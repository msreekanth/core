# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:18\n"
"PO-Revision-Date: 2009-03-13 16:32+0800\n"
"Last-Translator: Sean Wu <alartin@gmail.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Specialization, inheritance and alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When you first start developing with CDI, you&#39;ll likely be dealing only with a single bean implementation for each bean type. In this case, it&#39;s easy to understand how beans get selected for injection. As the complexity of your application grows, multiple occurrences of the same bean type start appearing, either because you have multiple implementations or two beans share a common (Java) inheritance. That&#39;s when you have to begin studying the specialization, inheritance and alternative rules to work through unsatisfied or ambiguous dependencies or to avoid certain beans from being called."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI specification recognizes two distinct scenarios in which one bean extends another:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second bean <emphasis>specializes</emphasis> the first bean in certain deployment scenarios. In these deployments, the second bean completely replaces the first, fulfilling the same role in the system."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second bean is simply reusing the Java implementation, and otherwise bears no relation to the first bean. The first bean may not even have been designed for use as a contextual object."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second case is the default assumed by CDI. It&#39;s possible to have two beans in the system with the same part bean type (interface or parent class). As you&#39;ve learned, you select between the two implementations using qualifiers."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The first case is the exception, and also requires more care. In any given deployment, only one bean can fulfill a given role at a time. That means one bean needs to be enabled and the other disabled. There are a two modifiers involved: <literal>@Alternative</literal> and <literal>@Specializes</literal>. We&#39;ll start by looking at alternatives and then show the guarantees that specialization adds."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using alternative stereotypes"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI lets you <emphasis>override</emphasis> the implementation of a bean type at deployment time using an alternative. For example, the following bean provides a default implementation of the <literal>PaymentProcessor</literal> interface:"
msgstr "我们已经看到Web Bean的依赖注入模型如何让我们在部署时期 <emphasis>重载</emphasis> 一个API实现。例如，下面的企业级Web Bean在生产环境下使提供一个<literal>PaymentProcessor</literal>接口的实现："

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class DefaultPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, fuzzy, no-c-format
msgid "But in our staging environment, we don&#39;t really want to submit payments to the external system, so we override that implementation of <literal>PaymentProcessor</literal> with a different bean:"
msgstr "但在我们的阶段开发环境中，我们可以使用一个不同的Web Bean来重载这个<literal>PaymentProcessor</literal> 实现："

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public @Alternative\n"
"class StagingPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "or"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public @Alternative\n"
"class StagingPaymentProcessor \n"
"      extends DefaultPaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "We&#39;ve already seen how we can enable this alternative by listing its class in the <literal>beans.xml</literal> descriptor."
msgstr ""

#. Tag: para
#, no-c-format
msgid "But suppose we have many alternatives in the staging environment. It would be much more convenient to be able to enable them all at once. So let&#39;s make <literal>@Staging</literal> an <literal>@Alternative</literal> stereotype and annotate the staging beans with this stereotype instead. You&#39;ll see how this level of indirection pays off. First, we create the stereotype:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Alternative\n"
"@Stereotype\n"
"@Retention(RUNTIME)\n"
"@Target(TYPE)\n"
"public @interface Staging {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Then we replace the <literal>@Alternative</literal> annotation on our bean with <literal>@Staging</literal>:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Staging\n"
"public class StagingPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@CreditCard @Stateless @Staging\n"
"public class StagingCreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "Finally, we activate the <literal>@Staging</literal> stereotype in the <literal>beans.xml</literal> descriptor:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;alternatives&#62;\n"
"         &#60;stereotype&#62;org.mycompany.myapp.Staging&#60;/stereotype&#62;\n"
"   &#60;/alternatives&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now, no matter how many staging beans we have, they will all be enabled at once."
msgstr ""

#. Tag: title
#, no-c-format
msgid "A minor problem with alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When we enable an alternative, does that mean the default implementation is disabled? Well, not exactly. If the default implementation has a qualifier, for instance <literal>@LargeTransaction</literal>, and the alternative does not, you could still inject the default implementation."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @LargeTransaction PaymentProcessor paymentProcessor;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "So we haven&#39;t completely replaced the default implementation in this deployment of the system. The only way one bean can completely override a second bean at all injection points is if it implements all the bean types and declares all the qualifiers of the second bean. However, if the second bean declares a producer method or observer method, then even this is not enough to ensure that the second bean is never called! We need something extra."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI provides a special feature, called <emphasis>specialization</emphasis>, that helps the developer avoid these traps. Specialization is a way of informing the system of your intent to completely replace and disable an implementation of a bean."
msgstr "Web Bean提供了一个特殊的特性，称之为<emphasis>特化</emphasis>，能够帮助开发者避免这些陷阱。特化初看起来有些神秘，但是在实际应用中非常容易使用，你很快就会感激它提供的特殊的安全性。"

#. Tag: title
#, no-c-format
msgid "Using specialization"
msgstr "使用特化"

#. Tag: para
#, no-c-format
msgid "When the goal is to replace one bean implementation with a second, to help prevent developer error, the first bean may:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "directly extend the bean class of the second bean, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid "directly override the producer method, in the case that the second bean is a producer method, and then"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "explicitly declare that it <emphasis>specializes</emphasis> the second bean:"
msgstr "我们称更高优先级的Web Bean<emphasis>特化</emphasis>了它的超类。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Alternative @Specializes\n"
"public class MockCreditCardPaymentProcessor \n"
"      extends CreditCardPaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "When an enabled bean specializes another bean, the other bean is never instantiated or called by the container. Even if the other bean defines a producer or observer method, the method will never be called."
msgstr ""

#. Tag: para
#, no-c-format
msgid "So why does specialization work, and what does it have to do with inheritance?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Since we&#39;re informing the container that our alternative bean is meant to stand in as a replacement for the default implementation, the alternative implementation automatically inherits all qualifiers of the default implementation. Thus, in our example, <literal>MockCreditCardPaymentProcessor</literal> inherits the qualifiers <literal>@Default</literal> and <literal>@CreditCard</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Furthermore, if the default implementation declares a bean EL name using <literal>@Named</literal>, the name is inherited by the specialized alternative bean."
msgstr ""

#~ msgid "Specialization"
#~ msgstr "特化"

#~ msgid "What we've tried to do with <literal>StagingCreditCardPaymentProcessor</literal> is to completely replace <literal>AsyncPaymentProcessor</literal> in a particular deployment of the system. In that deployment, the deployment type <literal>@Staging</literal> would have a higher priority than the default deployment type <literal>@Production</literal>, and therefore clients with the following injection point:"
#~ msgstr "我们试图做的是在特定的系统部署环境中使用<literal>StagingCreditCardPaymentProcessor</literal>来完全替代<literal>AsyncPaymentProcessor</literal>。在这个部署中，部署类型为<literal>@Staging</literal>的将有比默认部署类型<literal>@Production</literal>更高的优先级，因此下面注入点的客户："

#~ msgid "@CreditCard PaymentProcessor ccpp"
#~ msgstr "@CreditCard PaymentProcessor ccpp"

#~ msgid "Would receive an instance of <literal>StagingCreditCardPaymentProcessor</literal>."
#~ msgstr "将会收到一个 <literal>StagingCreditCardPaymentProcessor</literal> 的实例。"

#~ msgid "Unfortunately, there are several traps we can easily fall into:"
#~ msgstr "不幸的是，我们很容易掉入几个陷阱："

#~ msgid "the higher-priority Web Bean may not implement all the API types of the Web Bean that it attempts to override,"
#~ msgstr "更高优先级的Web Bean可能没有实现其要重载的所有的API类型，"

#~ msgid "the higher-priority Web Bean may not declare all the binding types of the Web Bean that it attempts to override,"
#~ msgstr "更高优先级的Web Bean可能没有声明其要重载的所有绑定类型，"

#~ msgid "the higher-priority Web Bean might not have the same name as the Web Bean that it attempts to override, or"
#~ msgstr "更高优先级的Web Bean可能没有和其要重载的Web Bean拥有相同的名字，或者"

#~ msgid "the Web Bean that it attempts to override might declare a producer method, disposal method or observer method."
#~ msgstr "其要重载的Web Bean有可能声明了一个生产者方法，清除方法或者观察者方法。"

#~ msgid "In each of these cases, the Web Bean that we tried to override could still be called at runtime. Therefore, overriding is somewhat prone to developer error."
#~ msgstr "在上面的任何一种情况，我们试图重载的Web Bean仍旧可以在运行时被调用。因此重载对于开发者来说是很容易出错的。"

#~ msgid "Specialization is a feature that is specific to simple and enterprise Web Beans. To make use of specialization, the higher-priority Web Bean must:"
#~ msgstr "特化是为简单和企业级Web Bean提供的特性。要使用特化，更高优先级的Web Bean必须："

#~ msgid "be a direct subclass of the Web Bean it overrides, and"
#~ msgstr "是其重载的Web Bean的直接子类，并且"

#~ msgid "be a simple Web Bean if the Web Bean it overrides is a simple Web Bean or an enterprise Web Bean if the Web Bean it overrides is an enterprise Web Bean, and"
#~ msgstr "如果其重载的是简单的Web Bean, 它也要是一个简单的Web Bean；如果其重载的是企业级的Web Bean, 它也要是一个企业级的Web Bean，并且"

#~ msgid "be annotated <literal>@Specializes</literal>."
#~ msgstr "需要使用 <literal>@Specializes</literal> 注释。"

#~ msgid "Advantages of specialization"
#~ msgstr "特化的优点"

#~ msgid "When specialization is used:"
#~ msgstr "当使用特化时："

#~ msgid "the binding types of the superclass are automatically inherited by the Web Bean annotated <literal>@Specializes</literal>, and"
#~ msgstr "超类的绑定类型自动被使用<literal>@Specializes</literal>注释的Web Bean继承，并且"

#~ msgid "the Web Bean name of the superclass is automatically inherited by the Web Bean annotated <literal>@Specializes</literal>, and"
#~ msgstr "超类的Web Bean名称自动被使用<literal>@Specializes</literal>注释的Web Bean继承，并且"

#~ msgid "producer methods, disposal methods and observer methods declared by the superclass are called upon an instance of the Web Bean annotated <literal>@Specializes</literal>."
#~ msgstr "超类声明的生产者方法，清除方法和观察者方法将在使用<literal>@Specializes</literal>注释的Web Bean实例上调用。"

#~ msgid "In our example, the binding type <literal>@CreditCard</literal> of <literal>CreditCardPaymentProcessor</literal> is inherited by <literal>StagingCreditCardPaymentProcessor</literal>."
#~ msgstr "在我们这个例子中，<literal>CreditCardPaymentProcessor</literal> 的绑定类型 <literal>@CreditCard</literal>  被<literal>StagingCreditCardPaymentProcessor</literal>继承。"

#~ msgid "Furthermore, the Web Bean manager will validate that:"
#~ msgstr "进一步，Web Bean管理器将验证："

#~ msgid "all API types of the superclass are API types of the Web Bean annotated <literal>@Specializes</literal> (all local interfaces of the superclass enterprise bean are also local interfaces of the subclass),"
#~ msgstr "超类的所有API类型是使用 <literal>@Specializes</literal> 注释的Web Bean的API类型（所有企业级Bean超类的本地接口是子类的本地接口）"

#~ msgid "the deployment type of the Web Bean annotated <literal>@Specializes</literal> has a higher precedence than the deployment type of the superclass, and"
#~ msgstr "使用 <literal>@Specializes</literal> 注释的Web Bean的部署类型比超类的部署类型拥有更高的优先级，并且"

#~ msgid "there is no other enabled Web Bean that also specializes the superclass."
#~ msgstr "没有其他特化该超类的Web Bean被激活。"

#~ msgid "If any of these conditions are violated, the Web Bean manager throws an exception at initialization time."
#~ msgstr "如果任何一条有冲突的话，Web Bean管理器将在初始化时抛出一个异常。"

#~ msgid "Therefore, we can be certain that the superclass will <emphasis>never</emphasis> be called in any deployment of the system where the Web Bean annotated <literal>@Specializes</literal> is deployed and enabled."
#~ msgstr "因此，我们可以确定当使用<literal>@Specializes</literal>注释的Web Bean被部署和激活时，超类在系统的任何部署中<emphasis>都不会</emphasis>被调用。"
