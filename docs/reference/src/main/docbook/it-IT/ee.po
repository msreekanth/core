# Language it-IT translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:16\n"
"PO-Revision-Date: 2009-11-23 21:16+0100\n"
"Last-Translator: Nicola Benaglia <nico.benaz@gmail.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Java EE integration"
msgstr "Integrazione Java EE"

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI is fully integrated into the Java EE environment. Beans have access to Java EE resources and JPA persistence contexts. They may be used in Unified EL expressions in JSF and JSP pages. They may even be injected into other platform components, such as servlets and message-driven Beans, which are not beans themselves."
msgstr "Web Beans è pienamente integrata nell'ambiente Java EE. Web Beans ha accesso alle risorse Java EE ed ai contesti di persistenza JPA. I Web Beans possono essere usati in espressioni Unified EL dentro pagine JSF e JSP. Possono anche essere iniettati negli oggetti, come Servlet e Message-Driven Beans, che non sono Web Beans."

#. Tag: title
#, no-c-format
msgid "Built-in beans"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the Java EE environment, the container provides the following built-in beans, all with the qualifier <literal>@Default</literal>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the current JTA <literal>UserTransaction</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "a <literal>Principal</literal> representing the current caller identity,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the default <ulink url=\"http://jcp.org/en/jsr/detail?id=303\">Bean Validation</ulink> <literal>ValidationFactory</literal>, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "a <literal>Validator</literal> for the default <literal>ValidationFactory</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI specification does not require the servlet context objects, <literal>HttpServletRequest</literal>, <literal>HttpSession</literal> and <literal>ServletContext</literal> to be exposed as injectable beans. If you really want to be able to inject these objects, it&#39;s easy to create a portable extension to expose them as beans. However, we recommend that direct access to these objects be limited to servlets, servlet filters and servlet event listeners, where they may be obtained in the usual way as defined by the Java Servlets spec. The <literal>FacesContext</literal> is also not injectable. You can get at it by calling <literal>FacesContext.getCurrentInstance()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Oh, you <emphasis>really</emphasis> want to inject the <literal>FacesContext</literal>? Alright then, try this producer method:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class FacesContextProducer {\n"
"   @Produces @RequestScoped FacesContext getFacesContext() {\n"
"      return FacesContext.getCurrentInstance();\n"
"   }\n"
"}"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Injecting Java EE resources into a bean"
msgstr "Iniettare risorse Java EE in un Web Bean"

#. Tag: para
#, fuzzy, no-c-format
msgid "All managed beans may take advantage of Java EE component environment injection using <literal>@Resource</literal>, <literal>@EJB</literal>, <literal>@PersistenceContext</literal>, <literal>@PeristenceUnit</literal> and <literal>@WebServiceRef</literal>. We&#39;ve already seen a couple of examples of this, though we didn&#39;t pay much attention at the time:"
msgstr "Tutti i Web Beans sia semplici che enterprise si avvantaggiano della dependency injection di Java EE usando <literal>@Resource</literal>, <literal>@EJB</literal> e <literal>@PersistenceContext</literal>. Abbiamo già visto un paio di esempi a riguardo, sebbene non ci siamo soffermati molto a suo tempo."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"   @Resource UserTransaction transaction;\n"
"\n"
"   @AroundInvoke public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""
"<![CDATA[@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"   @Resource UserTransaction transaction;\n"
"\n"
"   @AroundInvoke public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@SessionScoped\n"
"public class Login implements Serializable {\n"
"   @Inject Credentials credentials;\n"
"   @PersistenceContext EntityManager userDatabase;\n"
"    ...\n"
"}"
msgstr ""
"<![CDATA[@SessionScoped\n"
"public class Login implements Serializable {\n"
"   @Inject Credentials credentials;\n"
"   @PersistenceContext EntityManager userDatabase;\n"
"    ...\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The Java EE <literal>@PostConstruct</literal> and <literal>@PreDestroy</literal> callbacks are also supported for all managed beans. The <literal>@PostConstruct</literal> method is called after <emphasis>all</emphasis> injection has been performed."
msgstr "Le chiamate Java EE <literal>@PostConstruct</literal> e <literal>@PreDestroy</literal> vengono anche supportate per tutti i Web Beans (semplici e enterprise). Il metodo <literal>@PostConstruct</literal> viene chiamato dopo che <emphasis>tutta</emphasis> l'injection è stata eseguita."

#. Tag: para
#, no-c-format
msgid "Of course, we advise that component environment injection be used to define CDI resources, and that typesafe injection be used in application code."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Calling a bean from a servlet"
msgstr "Chiamare un Web Bean da un servlet"

#. Tag: para
#, fuzzy, no-c-format
msgid "It&#39;s easy to use a bean from a servlet in Java EE 6. Simply inject the bean using field or initializer method injection."
msgstr "E' facile utilizzare i Web Beans da un Servlet in Java EE 6. Semplicemente si inietti il Web Bean utilizzando l'injection del campo Web Bean o del metodo inizializzatore."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Login extends HttpServlet {\n"
"   @Inject Credentials credentials;\n"
"   @Inject Login login;\n"
"\n"
"   @Override\n"
"   public void service(HttpServletRequest request, HttpServletResponse response)\n"
"      throws ServletException, IOException {\n"
"      credentials.setUsername(request.getParameter(&#34;username&#34;)):\n"
"      credentials.setPassword(request.getParameter(&#34;password&#34;)):\n"
"      login.login();\n"
"      if ( login.isLoggedIn() ) {\n"
"         response.sendRedirect(&#34;/home.jsp&#34;);\n"
"      }\n"
"      else {\n"
"         response.sendRedirect(&#34;/loginError.jsp&#34;);\n"
"      }\n"
"   }\n"
"            \n"
"}"
msgstr ""
"<![CDATA[public class Login extends HttpServlet {\n"
"   @Inject Credentials credentials;\n"
"   @Inject Login login;\n"
"\n"
"   @Override\n"
"   public void service(HttpServletRequest request, HttpServletResponse response)\n"
"      throws ServletException, IOException {\n"
"      credentials.setUsername(request.getParameter(\"username\")):\n"
"      credentials.setPassword(request.getParameter(\"password\")):\n"
"      login.login();\n"
"      if ( login.isLoggedIn() ) {\n"
"         response.sendRedirect(\"/home.jsp\");\n"
"      }\n"
"      else {\n"
"         response.sendRedirect(\"/loginError.jsp\");\n"
"      }\n"
"   }\n"
"            \n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Since instances of servlets are shared across all incoming threads, the bean client proxy takes care of routing method invocations from the servlet to the correct instances of <literal>Credentials</literal> and <literal>Login</literal> for the current request and HTTP session."
msgstr "Il client proxy Web Beans si occupa di instradare le invocazioni dei metodi da un Servlet alle corrette istanze di <literal>Credentials</literal> e <literal>Login</literal> per la richiesta corrente e la sessione HTTP."

#. Tag: title
#, fuzzy, no-c-format
msgid "Calling a bean from a message-driven bean"
msgstr "Chiamare un Web Bean da un Message-Driven Bean"

#. Tag: para
#, no-c-format
msgid "CDI injection applies to all EJBs, even when they aren&#39;t managed beans. In particular, you can use CDI injection in message-driven beans, which are by nature not contextual objects."
msgstr ""

# Web Beans interceptor bindings =?
#. Tag: para
#, fuzzy, no-c-format
msgid "You can even use CDI interceptor bindings for message-driven Beans."
msgstr "Si possono perfino associare degli interceptor Web Beans ai Message-Driven Beans."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @MessageDriven\n"
"public class ProcessOrder implements MessageListener {\n"
"   @Inject Inventory inventory;\n"
"   @PersistenceContext EntityManager em;\n"
"\n"
"   public void onMessage(Message message) {\n"
"      ...\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@Transactional @MessageDriven\n"
"public class ProcessOrder implements MessageListener {\n"
"   @Inject Inventory inventory;\n"
"   @PersistenceContext EntityManager em;\n"
"\n"
"   public void onMessage(Message message) {\n"
"      ...\n"
"   }\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Please note that there is no session or conversation context available when a message is delivered to a message-driven bean. Only <literal>@RequestScoped</literal> and <literal>@ApplicationScoped</literal> beans are available."
msgstr "Quindi ricevere i messaggi è veramente facile in ambiente Web Beans. Ma attenzione che non è disponibile alcun contesto di sessione o conversazione quando il messaggio viene consegnato al Message-Driven Bean. Solamente i Web Beans <literal>@RequestScoped</literal> and <literal>@ApplicationScoped</literal> sono disponibili."

#. Tag: para
#, no-c-format
msgid "But how about beans which <emphasis>send</emphasis> JMS messages?"
msgstr ""

#. Tag: title
#, no-c-format
msgid "JMS endpoints"
msgstr "Endpoint JMS"

#. Tag: para
#, no-c-format
msgid "Sending messages using JMS can be quite complex, because of the number of different objects you need to deal with. For queues we have <literal>Queue</literal>, <literal>QueueConnectionFactory</literal>, <literal>QueueConnection</literal>, <literal>QueueSession</literal> and <literal>QueueSender</literal>. For topics we have <literal>Topic</literal>, <literal>TopicConnectionFactory</literal>, <literal>TopicConnection</literal>, <literal>TopicSession</literal> and <literal>TopicPublisher</literal>. Each of these objects has its own lifecycle and threading model that we need to worry about."
msgstr "La spedizione dei messaggi usando JMS può essere abbastanza complessa, a causa del numero di oggetti differenti da trattare. Per le code si hanno <literal>Queue</literal>, <literal>QueueConnectionFactory</literal>, <literal>QueueConnection</literal>, <literal>QueueSession</literal> e <literal>QueueSender</literal>. Per i topic si hanno <literal>Topic</literal>, <literal>TopicConnectionFactory</literal>, <literal>TopicConnection</literal>, <literal>TopicSession</literal> e <literal>TopicPublisher</literal>. Ciascuno di questi oggetti ha il proprio ciclo di vita e modello di thread di cui bisogna (pre)occuparsi."

#. Tag: para
#, no-c-format
msgid "You can use producer fields and methods to prepare all of these resources for injection into a bean:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class OrderResources {\n"
"   @Resource(name=&#34;jms/ConnectionFactory&#34;)\n"
"   private ConnectionFactory connectionFactory;\n"
"  \n"
"   @Resource(name=&#34;jms/OrderQueue&#34;)\n"
"   private Queue orderQueue;\n"
"  \n"
"   @Produces @OrderConnection\n"
"   public Connection createOrderConnection() throws JMSException {\n"
"    return connectionFactory.createConnection();\n"
"   }\n"
"  \n"
"   public void closeOrderConnection(@Disposes @OrderConnection Connection connection)\n"
"         throws JMSException {\n"
"      connection.close();\n"
"   }\n"
"  \n"
"   @Produces @OrderSession\n"
"   public Session createOrderSession(@OrderConnection Connection connection)\n"
"         throws JMSException {\n"
"      return connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n"
"   }\n"
"  \n"
"   public void closeOrderSession(@Disposes @OrderSession Session session)\n"
"         throws JMSException {\n"
"      session.close();\n"
"   }\n"
"  \n"
"   @Produces @OrderMessageProducer\n"
"   public MessageProducer createOrderMessageProducer(@OrderSession Session session)\n"
"         throws JMSException {\n"
"      return session.createProducer(orderQueue);\n"
"   }\n"
"  \n"
"   public void closeOrderMessageProducer(@Disposes @OrderMessageProducer MessageProducer producer)\n"
"         throws JMSException {\n"
"      producer.close();\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[public class OrderResources {\n"
"   @Resource(name=\"jms/ConnectionFactory\")\n"
"   private ConnectionFactory connectionFactory;\n"
"  \n"
"   @Resource(name=\"jms/OrderQueue\")\n"
"   private Queue orderQueue;\n"
"  \n"
"   @Produces @OrderConnection\n"
"   public Connection createOrderConnection() throws JMSException {\n"
"    return connectionFactory.createConnection();\n"
"   }\n"
"  \n"
"   public void closeOrderConnection(@Disposes @OrderConnection Connection connection)\n"
"         throws JMSException {\n"
"      connection.close();\n"
"   }\n"
"  \n"
"   @Produces @OrderSession\n"
"   public Session createOrderSession(@OrderConnection Connection connection)\n"
"         throws JMSException {\n"
"      return connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n"
"   }\n"
"  \n"
"   public void closeOrderSession(@Disposes @OrderSession Session session)\n"
"         throws JMSException {\n"
"      session.close();\n"
"   }\n"
"  \n"
"   @Produces @OrderMessageProducer\n"
"   public MessageProducer createOrderMessageProducer(@OrderSession Session session)\n"
"         throws JMSException {\n"
"      return session.createProducer(orderQueue);\n"
"   }\n"
"  \n"
"   public void closeOrderMessageProducer(@Disposes @OrderMessageProducer MessageProducer producer)\n"
"         throws JMSException {\n"
"      producer.close();\n"
"   }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "In this example, we can just inject the prepared <literal>MessageProducer</literal>, <literal>Connection</literal> or <literal>QueueSession</literal>:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject Order order;\n"
"@Inject @OrderMessageProducer MessageProducer producer;\n"
"@Inject @OrderSession QueueSession orderSession;\n"
"\n"
"public void sendMessage() {\n"
"   MapMessage msg = orderSession.createMapMessage();\n"
"   msg.setLong(&#34;orderId&#34;, order.getId());\n"
"   ...\n"
"   producer.send(msg);\n"
"}"
msgstr ""
"<![CDATA[@Inject Order order;\n"
"@Inject @OrderMessageProducer MessageProducer producer;\n"
"@Inject @OrderSession QueueSession orderSession;\n"
"\n"
"public void sendMessage() {\n"
"   MapMessage msg = orderSession.createMapMessage();\n"
"   msg.setLong(\"orderId\", order.getId());\n"
"   ...\n"
"   producer.send(msg);\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The lifecycle of the injected JMS objects is completely controlled by the container."
msgstr "Il ciclo di vita degli oggetti JMS iniettati è interamente controllato dal manager Web Bean."

#. Tag: title
#, no-c-format
msgid "Packaging and deployment"
msgstr "Packaging and deployment"

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI doesn&#39;t define any special deployment archive. You can package beans in jars, ejb jars or wars—any deployment location in the application classpath. However, the archive must be a &#34;bean archive&#34;. That means each archive that contains beans <emphasis>must</emphasis> include a file named <literal>beans.xml</literal> in the <literal>META-INF</literal> directory of the classpath or <literal>WEB-INF</literal> directory of the web root (for war archives). The file may be empty. Beans deployed in archives that do not have a <literal>beans.xml</literal> file will not be available for use in the application."
msgstr "Web Beans non definisce nessuno archivio speciale per il deploy. Si può impacchettare i Web Beans in JAR, EJB-JAR o WAR &#151; qualsiasi locazione di deploy nel classpath dell'applicazione. Comunque ciascun archivio che contiene Web Beans devi includere un file chiamato <literal>web-beans.xml</literal> nella directory <literal>META-INF</literal> o <literal>WEB-INF</literal>. Il file può essere vuoto. I Web Beans collocati negli archivi che non hanno un file <literal>web-beans.xml</literal> non saranno disponibili per l'uso nell'applicazione."

#. Tag: para
#, fuzzy, no-c-format
msgid "In an embeddable EJB container, beans may be deployed in any location in which EJBs may be deployed. Again, each location must contain a <literal>beans.xml</literal> file."
msgstr "Per l'esecuzione in Java SE, Web Beans può essere deployato in un qualsiasi posto nel quale gli EJB siano stati messi per essere eseguito da un embeddable EJB Lite container.  Di nuovo ogni locazioni deve contenere un file <literal>web-beans.xml</literal>."

#~ msgid "There is one restriction to be aware of here: <literal>@PersistenceContext(type=EXTENDED)</literal> is not supported for simple Web Beans."
#~ msgstr "C'è una restrizione di cui essere informati: <literal>@PersistenceContext(type=EXTENDED)</literal> non è supportato per i Web Beans semplici."

#~ msgid "Web Beans injection applies to all EJBs, even when they aren't under the control of the Web Bean manager (if they were obtained by direct JNDI lookup, or injection using <literal>@EJB</literal>, for example. In particular, you can use Web Beans injection in Message-Driven Beans, which are not considered Web Beans because you can't inject them."
#~ msgstr "L'injection dei Web Beans si applica a tutti gli EJB3, perfino quando non sono sotto il controllo del manager Web Bean (per esempio se sono stati ottenuti da ricerca JNDI diretta, o injection usando <literal>@EJB</literal>) In particolaresi può usare l'injection di Web Beans nei Message-Driven Beans, che non sono considerati Web Beans poiché non possono essere iniettati."

#~ msgid "It's also easy to send messages using Web Beans."
#~ msgstr "E' anche molto facile spedire messaggi usando Web Beans."

#~ msgid "Web Beans takes care of all this for us. All we need to do is declare the queue or topic in <literal>web-beans.xml</literal>, specifying an associated binding type and connection factory."
#~ msgstr "I Web Beans si prendono cura di tutto questo per noi. Tutto ciò che occorre fare è dichiarare la coda od il topic in <literal>web-beans.xml</literal>, specificando un "

#~ msgid ""
#~ "<![CDATA[<Queue>\n"
#~ "    <destination>java:comp/env/jms/OrderQueue</destination>\n"
#~ "    <connectionFactory>java:comp/env/jms/QueueConnectionFactory</connectionFactory>\n"
#~ "    <myapp:OrderProcessor/>    \n"
#~ "</Queue>]]>"
#~ msgstr ""
#~ "<![CDATA[<Queue>\n"
#~ "    <destination>java:comp/env/jms/OrderQueue</destination>\n"
#~ "    <connectionFactory>java:comp/env/jms/QueueConnectionFactory</connectionFactory>\n"
#~ "    <myapp:OrderProcessor/>    \n"
#~ "</Queue>]]>"

#~ msgid ""
#~ "<![CDATA[<Topic>\n"
#~ "    <destination>java:comp/env/jms/StockPrices</destination>\n"
#~ "    <connectionFactory>java:comp/env/jms/TopicConnectionFactory</connectionFactory>\n"
#~ "    <myapp:StockPrices/>    \n"
#~ "</Topic>]]>"
#~ msgstr ""
#~ "<![CDATA[<Topic>\n"
#~ "    <destination>java:comp/env/jms/StockPrices</destination>\n"
#~ "    <connectionFactory>java:comp/env/jms/TopicConnectionFactory</connectionFactory>\n"
#~ "    <myapp:StockPrices/>    \n"
#~ "</Topic>]]>"

#~ msgid "Now we can just inject the <literal>Queue</literal>, <literal>QueueConnection</literal>, <literal>QueueSession</literal> or <literal>QueueSender</literal> for a queue, or the <literal>Topic</literal>, <literal>TopicConnection</literal>, <literal>TopicSession</literal> or <literal>TopicPublisher</literal> for a topic."
#~ msgstr "Ora è possibile iniettare <literal>Queue</literal>, <literal>QueueConnection</literal>, <literal>QueueSession</literal> o <literal>QueueSender</literal> per una coda, oppure <literal>Topic</literal>, <literal>TopicConnection</literal>, <literal>TopicSession</literal> o <literal>TopicPublisher</literal> per un topic."

#~ msgid ""
#~ "@StockPrices TopicPublisher pricePublisher;\n"
#~ "@StockPrices TopicSession priceSession;\n"
#~ "\n"
#~ "public void sendMessage(String price) {\n"
#~ "    pricePublisher.send( priceSession.createTextMessage(price) );\n"
#~ "}"
#~ msgstr ""
#~ "@StockPrices TopicPublisher pricePublisher;\n"
#~ "@StockPrices TopicSession priceSession;\n"
#~ "\n"
#~ "public void sendMessage(String price) {\n"
#~ "    pricePublisher.send( priceSession.createTextMessage(price) );\n"
#~ "}"
