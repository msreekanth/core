# Language it-IT translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2009-03-31 11:05+0100\n"
"Last-Translator: Nicola Benaglia <nico.benaz@gmail.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Producer methods"
msgstr "Metodi produttori"

#. Tag: para
#, fuzzy, no-c-format
msgid "Producer methods let us overcome certain limitations that arise when a container, instead of the application, is responsible for instantiating objects. They&#39;re also the easiest way to integrate objects which are not beans into the CDI environment."
msgstr "I metodi produttori consentono di superare alcune limitazioni che sorgono quando il manager Web Bean è responsabile dell'istanziamento degli oggetti al posto dell'applicazione. Questi metodi sono anche il modo migliore per integrare gli oggetti che non sono Web Beans dentro l'ambiente Web Beans. (Si incontrerà un secondo approccio in <xref linkend=\"xml\"/>.)"

#. Tag: para
#, no-c-format
msgid "According to the spec:"
msgstr "Secondo la specifica:"

#. Tag: para
#, fuzzy, no-c-format
msgid "A producer method acts as a source of objects to be injected, where:"
msgstr "Un metodo produttore Web Beans agisce come sorgente di oggetti da iniettare, dove:"

#. Tag: para
#, fuzzy, no-c-format
msgid "the objects to be injected are not required to be instances of beans,"
msgstr "gli oggetti da iniettare non sono richiesti come istanze di Web Beans,"

#. Tag: para
#, no-c-format
msgid "the concrete type of the objects to be injected may vary at runtime or"
msgstr "il tipo concreto di oggetti da iniettare può variare a runtime o"

#. Tag: para
#, fuzzy, no-c-format
msgid "the objects require some custom initialization that is not performed by the bean constructor"
msgstr "gli oggetti richiedono alcune inizializzazioni personalizzate che non vengono eseguite da costruttore Web Bean"

#. Tag: para
#, no-c-format
msgid "For example, producer methods let us:"
msgstr "Per esempio, i metodi produttori consentono di:"

#. Tag: para
#, fuzzy, no-c-format
msgid "expose a JPA entity as a bean,"
msgstr "espone un entity JPA come Web Bean,"

#. Tag: para
#, fuzzy, no-c-format
msgid "expose any JDK class as a bean,"
msgstr "espone qualsiasi classe JDK come Web Bean,"

#. Tag: para
#, fuzzy, no-c-format
msgid "define multiple beans, with different scopes or initialization, for the same implementation class, or"
msgstr "definisce più Web Bean con differenti scope o inizializzazioni, per la stessa classe di implementazione, o"

#. Tag: para
#, fuzzy, no-c-format
msgid "vary the implementation of a bean type at runtime."
msgstr "varia l'implementazione di un tipo di API a runtime."

#. Tag: para
#, fuzzy, no-c-format
msgid "In particular, producer methods let us use runtime polymorphism with CDI. As we&#39;ve seen, alternative beans are one solution to the problem of deployment-time polymorphism. But once the system is deployed, the CDI implementation is fixed. A producer method has no such limitation:"
msgstr "In particolare i metodi produttori consentono l'uso del polimorfismo a runtime con Web Beans. Come visto, i tipi di deploy sono soluzioni potenti al problema del polimorfismo a deployment-time. Ma una volta che il sistema è deployato, l'implementazione Web Bean è sistemata. Un metodo produttore non ha tali limitazioni:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@SessionScoped\n"
"public class Preferences implements Serializable {\n"
"   private PaymentStrategyType paymentStrategy;\n"
"   ...\n"
"   @Produces @Preferred \n"
"   public PaymentStrategy getPaymentStrategy() {\n"
"       switch (paymentStrategy) {\n"
"           case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
"           case CHECK: return new CheckPaymentStrategy();\n"
"           case PAYPAL: return new PayPalPaymentStrategy();\n"
"           default: return null;\n"
"       } \n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@SessionScoped\n"
"public class Preferences {\n"
"    \n"
"    private PaymentStrategyType paymentStrategy;\n"
"    \n"
"    ...\n"
"    \n"
"    @Produces @Preferred \n"
"    public PaymentStrategy getPaymentStrategy() {\n"
"        switch (paymentStrategy) {\n"
"            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
"            case CHEQUE: return new ChequePaymentStrategy();\n"
"            case PAYPAL: return new PayPalPaymentStrategy();\n"
"            default: return null;\n"
"        } \n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "Consider an injection point:"
msgstr "Si consideri un punto di iniezione:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Preferred PaymentStrategy paymentStrategy;"
msgstr "<![CDATA[@Preferred PaymentStrategy paymentStrat;]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "This injection point has the same type and qualifier annotations as the producer method, so it resolves to the producer method using the usual CDI injection rules. The producer method will be called by the container to obtain an instance to service this injection point."
msgstr "Il punto di iniezione ha lo stesso tipo e le stesse annotazioni di binding del metodo produttore, e quindi risolve il metodo produttore usando le solite regole di iniezione Web Beans. Il metodo produttore verrà chiamato dal manager Web Bean per ottenere un'istanza per servire questo punto di iniezione:"

#. Tag: title
#, no-c-format
msgid "Scope of a producer method"
msgstr "Scope di un metodo produttore"

#. Tag: para
#, fuzzy, no-c-format
msgid "The scope of the producer method defaults to <literal>@Dependent</literal>, and so it will be called <emphasis>every time</emphasis> the container injects this field or any other field that resolves to the same producer method. Thus, there could be multiple instances of the <literal>PaymentStrategy</literal> object for each user session."
msgstr "Lo scope dei metodi produttori è di default impostato a <literal>@Dependent</literal>, e quindi verrà chiamato <emphasis>ogni volta</emphasis> che il manager Web Bean inietta questo campo o qualsiasi altro campi che risolve lo stesso metodo produttore. Quindi ci potrebbero essere istanze multiple dell'oggetto <literal>PaymentStrategy</literal> per ogni sessione utente."

#. Tag: para
#, no-c-format
msgid "To change this behavior, we can add a <literal>@SessionScoped</literal> annotation to the method."
msgstr "Per cambiare questo comportamento si può aggiungere un'annotazione <literal>@SessionScoped</literal> al metodo."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Now, when the producer method is called, the returned <literal>PaymentStrategy</literal> will be bound to the session context. The producer method won&#39;t be called again in the same session."
msgstr "Ora, quando il metodo produttore viene chiamato, il <literal>PaymentStrategy</literal> restituito verrà associato al contesto di sessione. Il metodo produttore non verrà più chiamato nella stessa sessione."

#. Tag: para
#, no-c-format
msgid "A producer method does <emphasis>not</emphasis> inherit the scope of the bean that declares the method. There are two different beans here: the producer method, and the bean which declares it. The scope of the producer method determines how often the method will be called, and the lifecycle of the objects returned by the method. The scope of the bean that declares the producer method determines the lifecycle of the object upon which the producer method is invoked."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Injection into producer methods"
msgstr "Iniezione nei metodi produttori"

#. Tag: para
#, fuzzy, no-c-format
msgid "There&#39;s one potential problem with the code above. The implementations of <literal>CreditCardPaymentStrategy</literal> are instantiated using the Java <literal>new</literal> operator. Objects instantiated directly by the application can&#39;t take advantage of dependency injection and don&#39;t have interceptors."
msgstr "C'è un potenziale problema con il codice visto sopra. Le implementazioni di <literal>CreditCardPaymentStrategy</literal> vengono istanziate usando l'operatore Java <literal>new</literal>. Gli oggetti istanziati direttamente dall'applicazione non possono sfruttare la dependency injection e non hanno interceptor."

#. Tag: para
#, fuzzy, no-c-format
msgid "If this isn&#39;t what we want, we can use dependency injection into the producer method to obtain bean instances:"
msgstr "Se questo non è ciò che si vuole, è possibile usare la dependency injection nel metodo produttore per ottenere istanze Web Bean:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          CheckPaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"   switch (paymentStrategy) {\n"
"      case CREDIT_CARD: return ccps;\n"
"      case CHEQUE: return cps;\n"
"      case PAYPAL: return ppps;\n"
"      default: return null;\n"
"   } \n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Wait, what if <literal>CreditCardPaymentStrategy</literal> is a request-scoped bean? Then the producer method has the effect of &#34;promoting&#34; the current request scoped instance into session scope. This is almost certainly a bug! The request scoped object will be destroyed by the container before the session ends, but the reference to the object will be left &#34;hanging&#34; in the session scope. This error will <emphasis>not</emphasis> be detected by the container, so please take extra care when returning bean instances from producer methods!"
msgstr "Ma cosa succede se <literal>CreditCardPaymentStrategy</literal> è un Web Bean con scope di tipo richiesta? Il metodo produttore ha l'effetto di \"promuovere\" l'istanza corrente con scope di tipo richiesta a scope di tipo sessione. Questo è quasi certamente un bug! L'oggetto con scope richiesta verrà distrutto dal manager Web Bean prima che la sessione termini. Quest'errore <emphasis>non</emphasis> verrà rilevato dal manager Web Bean, quindi si faccia attenzione quando si restituiscono istanze Web Bean dai metodi produttori!"

#. Tag: para
#, fuzzy, no-c-format
msgid "There&#39;s at least three ways we could go about fixing this bug. We could change the scope of the <literal>CreditCardPaymentStrategy</literal> implementation, but this would affect other clients of that bean. A better option would be to change the scope of the producer method to <literal>@Dependent</literal> or <literal>@RequestScoped</literal>."
msgstr "Ci sono almeno 3 modi per correggere questo bug. Si può cambiare lo scope dell'implementazione di <literal>CreditCardPaymentStrategy</literal>, ma questo non influenzerebbe gli altri client di questo Web Bean. Un'opzione migliore sarebbe quella di cambiare lo scope del metodo produttore a <literal>@Dependent</literal> o <literal>@RequestScoped</literal>."

#. Tag: para
#, fuzzy, no-c-format
msgid "But a more common solution is to use the special <literal>@New</literal> qualifier annotation."
msgstr "Ma una soluzione più comune è quella di usare la speciale annotazione di binding <literal>@New</literal>."

#. Tag: title
#, no-c-format
msgid "Use of <literal>@New</literal> with producer methods"
msgstr "Uso di <literal>@New</literal> con i metodi produttori"

#. Tag: para
#, no-c-format
msgid "Consider the following producer method:"
msgstr "Si consideri il seguente metodo produttore:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy ccps,\n"
"                                          @New CheckPaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) {\n"
"   switch (paymentStrategy) {\n"
"      case CREDIT_CARD: return ccps;\n"
"      case CHEQUE: return cps;\n"
"      case PAYPAL: return ppps;\n"
"      default: return null;\n"
"   } \n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy ccps,\n"
"                                          @New ChequePaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Then a new <emphasis>dependent</emphasis> instance of <literal>CreditCardPaymentStrategy</literal> will be created, passed to the producer method, returned by the producer method and finally bound to the session context. The dependent object won&#39;t be destroyed until the <literal>Preferences</literal> object is destroyed, at the end of the session."
msgstr "Quindi verrebbe creata una nuova istanza <emphasis>dipendente</emphasis> di <literal>CreditCardPaymentStrategy</literal>, passata al metodo produttore, ritornata al metodo produttore ed infine associata al contesto di sessione. L'oggetto dipendente non verrebbe distrutto finché l'oggetto <literal>Preferences</literal> non viene distrutto, cioè a fine sessione."

#. Tag: title
#, fuzzy, no-c-format
msgid "Disposer methods"
msgstr "Metodi produttori"

#. Tag: para
#, no-c-format
msgid "Some producer methods return objects that require explicit destruction. For example, somebody needs to close this JDBC connection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Produces @RequestScoped Connection connect(User user) {\n"
"   return createConnection(user.getId(), user.getPassword());\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Destruction can be performed by a matching <emphasis>disposer method</emphasis>, defined by the same class as the producer method:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"void close(@Disposes Connection connection) {\n"
"   connection.close();\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The disposer method must have at least one parameter, annotated <literal>@Disposes</literal>, with the same type and qualifiers as the producer method. The disposer method is called automatically when the context ends (in this case, at the end of the request), and this parameter receives the object produced by the producer method. If the disposer method has additional method parameters, the container will look for a bean that satisfies the type and qualifiers of each parameter and pass it to the method automatically."
msgstr ""

#~ msgid ""
#~ "<blockquote> <para>A Web Beans producer method acts as a source of objects to be injected, where:</para> <itemizedlist> <listitem> <para>the objects to be injected are not required to be instances of Web Beans,</para> </listitem> <listitem> <para>the concrete type of the objects to be injected may vary at runtime or</para> </listitem> <listitem> <para>the objects require some custom initialization that is not performed by the Web Bean constructor</para> </listitem> </itemizedlist> </blockquote> <para>For example, producer methods let us:</para> <itemizedlist> <listitem> <para>expose a JPA entity as a Web Bean,</para> </listitem> <listitem> <para>expose any JDK class as a Web Bean,</para> </listitem> <listitem> <para>define multiple Web Beans, with different scopes or initialization, for the same implementation class, or</para> </listitem> <listitem> <para>vary the implementation of an API type at runtime.</para> </listitem> </itemizedlist> <para>In particular, producer methods let us use runtime polymorphism with Web Beans. As we've seen, deployment types are a powerful solution to the problem of deployment-time polymorphism. But once the system is deployed, the Web Bean implementation is fixed. A producer method has no such limitation:</para> <programlisting role=\"JAVA\"><![CDATA[@SessionScoped\n"
#~ "public class Preferences {\n"
#~ "    \n"
#~ "    private PaymentStrategyType paymentStrategy;\n"
#~ "    \n"
#~ "    ...\n"
#~ "    \n"
#~ "    @Produces @Preferred \n"
#~ "    public PaymentStrategy getPaymentStrategy() {\n"
#~ "        switch (paymentStrategy) {\n"
#~ "            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
#~ "            case CHEQUE: return new ChequePaymentStrategy();\n"
#~ "            case PAYPAL: return new PayPalPaymentStrategy();\n"
#~ "            default: return null;\n"
#~ "        } \n"
#~ "    }\n"
#~ "    \n"
#~ "}]]></programlisting> <para>Consider an injection point:</para> <programlisting role=\"JAVA\"><![CDATA[@Preferred PaymentStrategy paymentStrat;]]></programlisting> <para>This injection point has the same type and binding annotations as the producer method, so it resolves to the producer method using the usual Web Beans injection rules. The producer method will be called by the Web Bean manager to obtain an instance to service this injection point.</para>."
#~ msgstr ""
#~ "<blockquote> <para>Un metodo produttore Web Bean agisce come sorgente di oggetti da iniettare, dove:</para> <itemizedlist> <listitem> <para>gli oggetti da iniettare non è richiesto siano istanze di Web Beans,</para> </listitem> <listitem> <para>il tipo concreto di oggetti da iniettare può variare a runtime o</para> </listitem> <listitem> <para>gli oggetti richiedono alcune inizializzazini personalizzate che non vengono eseguite dal costruttore Web Bean</para> </listitem> </itemizedlist> </blockquote> <para>Per esempio un metodo produttore consente di:</para> <itemizedlist> <listitem> <para>esporre un entity JPA comeWeb Bean,</para> </listitem> <listitem> <para>esporre qualsiasi classe JDK comeWeb Bean,</para> </listitem> <listitem> <para>definire Web Beans multipli, con scope o inizializzazione differenti, per la stessa implementazionedi classe, o</para> </listitem> <listitem> <para>variare l'implementazione di un tipo di API a runtime</para> </listitem> </itemizedlist> <para>In particolare, i metodi produttori consentono di usare un polimorfismo a runtime con i Web Beans. Come visto, i tipi di deploy sono soluzioni al problema del polimorfismo durante la fase di deploy. Ma una volta che il sistema viene deployato, l'implementazione del Web Bean viene fissata. Un metodo produttore non ha questi limiti:</para> <programlisting role=\"JAVA\"><![CDATA[@SessionScoped\n"
#~ "public class Preferences {\n"
#~ "    \n"
#~ "    private PaymentStrategyType paymentStrategy;\n"
#~ "    \n"
#~ "    ...\n"
#~ "    \n"
#~ "    @Produces @Preferred \n"
#~ "    public PaymentStrategy getPaymentStrategy() {\n"
#~ "        switch (paymentStrategy) {\n"
#~ "            case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
#~ "            case CHEQUE: return new ChequePaymentStrategy();\n"
#~ "            case PAYPAL: return new PayPalPaymentStrategy();\n"
#~ "            default: return null;\n"
#~ "        } \n"
#~ "    }\n"
#~ "    \n"
#~ "}]]></programlisting> <para>Si consideri un punto di iniezione:</para> <programlisting role=\"JAVA\"><![CDATA[@Preferred PaymentStrategy paymentStrat;]]></programlisting> <para>Questo punto di iniezione ha lo stesso tipo e annotazioni di binding del metodo produttore, e quindi risolve i metodi produttori usando le regole di iniezione dei Web Beans. Il metodo produttore verrà chiamato dal manager Web Bean per ottenere un'istanza per servire questo punto di iniezione.</para>"

#~ msgid "<chapter>.</chapter>"
#~ msgstr "<chapter>.</chapter>"
