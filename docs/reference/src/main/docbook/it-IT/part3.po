# Language it-IT translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2009-01-15 20:46+0100\n"
"Last-Translator: Nicola Benaglia <nico.benaz@gmail.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: para
#, no-c-format
msgid "The first major theme of CDI is <emphasis>loose coupling</emphasis>. We&#39;ve already seen three means of achieving loose coupling:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>alternatives</emphasis> enable deployment time polymorphism,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>producer methods</emphasis> enable runtime polymorphism, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>contextual lifecycle management</emphasis> decouples bean lifecycles."
msgstr ""

#. Tag: para
#, no-c-format
msgid "These techniques serve to enable loose coupling of client and server. The client is no longer tightly bound to an implementation of an interface, nor is it required to manage the lifecycle of the implementation. This approach lets <emphasis>stateful objects interact as if they were services</emphasis>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Loose coupling makes a system more <emphasis>dynamic</emphasis>. The system can respond to change in a well-defined manner. In the past, frameworks that attempted to provide the facilities listed above invariably did it by sacrificing type safety (most notably by using XML descriptors). CDI is the first technology, and certainly the first specification in the Java EE platform, that achieves this level of loose coupling in a typesafe way."
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI provides three extra important facilities that further the goal of loose coupling:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>interceptors</emphasis> decouple technical concerns from business logic,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>decorators</emphasis> may be used to decouple some business concerns, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>event notifications</emphasis> decouple event producers from event consumers."
msgstr ""

# strong typing?
#. Tag: para
#, fuzzy, no-c-format
msgid "The second major theme of CDI is <emphasis>strong typing</emphasis>. The information about the dependencies, interceptors and decorators of a bean, and the information about event consumers for an event producer, is contained in typesafe Java constructs that may be validated by the compiler."
msgstr "Il secondo tema saliente di Web Beans è lo <emphasis>tipizzazione forte (strong typing)</emphasis>. Le informazioni riguardanti dipendenze, interceptor e decorator di un Web Bean, e le informazioni sui i consumatori relativi ad un produttore di eventi, sono contenute in costrutti Java sicuri rispetto ai tipi (typesafe) che possono essere validati dal compilatore."

#. Tag: para
#, fuzzy, no-c-format
msgid "You don&#39;t see string-based identifiers in CDI code, not because the framework is hiding them from you using clever defaulting rules—so-called &#34;configuration by convention&#34;—but because there are simply no strings there to begin with!"
msgstr "Non si vedono identificatori di tipo stringa nel codice basato su Web Beans, non perché il framework li nasconde usando regole intelligenti nell'assegnamento dei valori di default &#151; la cosiddetta \"configurazione per convenzione (configuration by convention)\" &#151; ma semplicemente perché non ci sono stringhe, tanto per cominciare!"

# senza che sia necessario realizzare dei tools appositi
#. Tag: para
#, no-c-format
msgid "The obvious benefit of this approach is that <emphasis>any</emphasis> IDE can provide autocompletion, validation and refactoring without the need for special tooling. But there is a second, less-immediately-obvious, benefit. It turns out that when you start thinking of identifying objects, events or interceptors via annotations instead of names, you have an opportunity to lift the semantic level of your code."
msgstr "L'ovvio beneficio di questo approccio è che <emphasis>qualunque</emphasis> IDE può fornire autocompletamento, validazione e refactoring senza che sia necessario realizzare dei tool appositi. Ma c'è un secondo beneficio meno immediatamente ovvio. Si scopre che quando si incomincia a pensare di identificare oggetti, eventi o interceptor usando annotazioni invece di nomi, si ha l'opportunità di elevare il livello semantico del proprio codice."

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI encourages you develop annotations that model concepts, for example,"
msgstr "Web Beans incoraggia a sviluppare annotazioni che modellano concetti, per esempio,"

#. Tag: para
#, no-c-format
msgid "<literal>@Asynchronous</literal>,"
msgstr "<literal>@Asynchronous</literal>,"

#. Tag: para
#, no-c-format
msgid "<literal>@Mock</literal>,"
msgstr "<literal>@Mock</literal>,"

#. Tag: para
#, no-c-format
msgid "<literal>@Secure</literal> or"
msgstr "<literal>@Secure</literal> or"

#. Tag: para
#, no-c-format
msgid "<literal>@Updated</literal>,"
msgstr "<literal>@Secure</literal> or"

#. Tag: para
#, no-c-format
msgid "instead of using compound names like"
msgstr "invece di usare nomi composti come"

#. Tag: para
#, no-c-format
msgid "<literal>asyncPaymentProcessor</literal>,"
msgstr "<literal>asyncPaymentProcessor</literal>,"

#. Tag: para
#, no-c-format
msgid "<literal>mockPaymentProcessor</literal>,"
msgstr "<literal>mockPaymentProcessor</literal>,"

#. Tag: para
#, no-c-format
msgid "<literal>SecurityInterceptor</literal> or"
msgstr "<literal>SecurityInterceptor</literal> or"

#. Tag: para
#, no-c-format
msgid "<literal>DocumentUpdatedEvent</literal>."
msgstr "<literal>DocumentUpdatedEvent</literal>."

# literate=elegante?
#. Tag: para
#, no-c-format
msgid "The annotations are reusable. They help describe common qualities of disparate parts of the system. They help us categorize and understand our code. They help us deal with common concerns in a common way. They make our code more literate and more understandable."
msgstr "Le annotazioni sono riutilizzabili. Aiutano a descrivere caratteristiche comuni di parti diverse del sistema. Ci aiutano a categorizzare e comprendere il nostro stesso codice. Ci aiutano ad affrontare i concern comuni in un modo comune. Rendono il nostro codice più elegante e comprensibile."

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI <emphasis>stereotypes</emphasis> take this idea a step further. A stereotype models a common <emphasis>role</emphasis> in your application architecture. It encapsulates various properties of the role, including scope, interceptor bindings, qualifiers, etc, into a single reusable package. (Of course, there is also the benefit of tucking some of those annotations away)."
msgstr "Gli <emphasis>stereotipi (stereotypes)</emphasis> di Web Beans fanno fare un ulteriore passo in avanti a questa idea. Uno stereotipo descrive un <emphasis>ruolo</emphasis> comune nell'architettura di un'applicazione. Incapsula in un unico pacchetto riutilizzabile varie proprietà del ruolo stesso, inclusi lo scope, gli interceptor bindings, il tipo di deployment, etc, ."

#. Tag: para
#, fuzzy, no-c-format
msgid "We&#39;re now ready to meet some more advanced features of CDI. Bear in mind that these features exist to make our code both easier to validate and more understandable. Most of the time you don&#39;t ever really <emphasis>need</emphasis> to use these features, but if you use them wisely, you&#39;ll come to appreciate their power."
msgstr "Ora siamo pronti ad incontrare alcune caratteristiche più avanzate di Web Beans. Tenete a mente che tali caratteristiche esistono sia per rendere il nostro codice più facile da validare che per renderlo più comprensibile. La maggior parte delle volte non è necessario usare tali carattestiche, ma, se usate con accortezza, si arriverà ad apprezzerne l'efficacia."

# literate=elegante (come in altri contesti)? oppure = letterato/informato/cosciente. Qui scelgo informato... nel senso di cosciente di se stesso.
# l'XML=i descrittori XML, il codice XML?
#~ msgid "Even Web Beans XML metadata is strongly typed! There's no compiler for XML, so Web Beans takes advantage of XML schemas to validate the Java types and attributes that appear in XML. This approach turns out to make the XML more literate, just like annotations made our Java code more literate."
#~ msgstr "Persino i metadati XML di Web Beans sono fortemente tipizzati (strongly typed)! Non esistendo un compilatore XML, Web Beans si basa sugli schemi XML per validare i tipi Java e gli attributi che compaiono nell'XML. Questo approccio finisce col rendere il codice XML più informato, proprio come le annotazioni rendono il codice Java + informato."
