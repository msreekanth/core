# Language fr-FR translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:16\n"
"PO-Revision-Date: 2009-02-02 22:25+0100\n"
"Last-Translator: Vincent Latombe <vincent.latombe@gmail.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Decorators"
msgstr "Décorateurs"

#. Tag: para
#, fuzzy, no-c-format
msgid "Interceptors are a powerful way to capture and separate concerns which are <emphasis>orthogonal</emphasis> to the application (and type system). Any interceptor is able to intercept invocations of any Java type. This makes them perfect for solving technical concerns such as transaction management, security and call logging. However, by nature, interceptors are unaware of the actual semantics of the events they intercept. Thus, interceptors aren&#39;t an appropriate tool for separating business-related concerns."
msgstr "Les intercepteurs sont une manière puissante de capter et de séparer les problèmes qui sont <emphasis>orthogonaux</emphasis> au type de système. Tout intercepteur est capable d'intercepter les invocations à tout type Java. Cela les rend parfait pour résoudre des problèmes techniques tels que la gestion transactionnelle et la sécurité.Cependant, par nature, les intercepteurs ne sont pas conscients de la sémantique réelle des évênements qu'ils interceptent. En conséquence, les intercepteurs ne sont pas un outil approprié pour séparer problèmes <emphasis>métiers<emphasis>."

#. Tag: para
#, fuzzy, no-c-format
msgid "The reverse is true of <emphasis>decorators</emphasis>. A decorator intercepts invocations only for a certain Java interface, and is therefore aware of all the semantics attached to that interface. Since decorators directly implement operations with business semantics, it makes them the perfect tool for modeling some kinds of business concerns. It also means that a decorator doesn&#39;t have the generality of an interceptor. Decorators aren&#39;t able to solve technical concerns that cut across many disparate types. Interceptors and decorators, though similar in many ways, are complementary. Let&#39;s look at some cases where decorators fit the bill."
msgstr "L'inverse est vrai pour les <emphasis>décorateurs</emphasis>. Un décorateur intercepte les invocations uniquement pour une certain interface Java, et est donc conscient de toute la sémantique rattachée à cette interface. Cela fait des décorateurs un outil parfait pour modéliser certains concepts métiers. Cela veut aussi dire qu'un décorateur n'est pas aussi générique qu'un intercepteur. Les décorateurs ne sont pas capables de résoudres des problèmes techniques qui peuvent toucher des types très disparates."

#. Tag: para
#, no-c-format
msgid "Suppose we have an interface that represents accounts:"
msgstr "Supposez que nous ayons une interfaces représentant des comptes:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public interface Account {\n"
"   public BigDecimal getBalance();\n"
"   public User getOwner();\n"
"   public void withdraw(BigDecimal amount);\n"
"   public void deposit(BigDecimal amount);\n"
"}"
msgstr ""
"<![CDATA[public interface Account {\n"
"    public BigDecimal getBalance();\n"
"    public User getOwner();\n"
"    public void withdraw(BigDecimal amount);\n"
"    public void deposit(BigDecimal amount);\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Several different beans in our system implement the <literal>Account</literal> interface. However, we have a common legal requirement that; for any kind of account, large transactions must be recorded by the system in a special log. This is a perfect job for a decorator."
msgstr "Plusieurs Web Beans distincts dans notre système implémentent l'interface <literal>Account</literal>. Nous avons cependant une obligation légale qui nous oblige à enregistrer les grosses transactions faites sur le système dans un journal spécial, et ce, pour tout type de compte. Ceci est un cas d'utilisation idéal d'un décorateur."

#. Tag: para
#, fuzzy, no-c-format
msgid "A decorator is a bean (possibly even an abstract class) that implements the type it decorates and is annotated <literal>@Decorator</literal>."
msgstr "Un décorateur est un simple Web Bean qui implémente le type qu'il décore, et qui est annoté <literal>@Decorator</literal>."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[<Decorators>\n"
"    <myapp:LargeTransactionDecorator/>\n"
"</Decorators>]]>"

#. Tag: para
#, no-c-format
msgid "The decorator implements the methods of the decorated type that it wants to intercept."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   @Inject @Delegate @Any Account account;\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   public void withdraw(BigDecimal amount) {\n"
"      ...\n"
"   }\n"
"    \n"
"   public void deposit(BigDecimal amount);\n"
"      ...\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@Decorator\n"
"public abstract class LargeTransactionDecorator \n"
"        implements Account {\n"
"    \n"
"    @Decorates Account account;\n"
"    \n"
"    @PersistenceContext EntityManager em;\n"
"    \n"
"    public void withdraw(BigDecimal amount) {\n"
"        account.withdraw(amount);\n"
"        if ( amount.compareTo(LARGE_AMOUNT)>0 ) {\n"
"            em.persist( new LoggedWithdrawl(amount) );\n"
"        }\n"
"    }\n"
"    \n"
"    public void deposit(BigDecimal amount);\n"
"        account.deposit(amount);\n"
"        if ( amount.compareTo(LARGE_AMOUNT)>0 ) {\n"
"            em.persist( new LoggedDeposit(amount) );\n"
"        }\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Unlike other beans, a decorator may be an abstract class. Therefore, if there&#39;s nothing special the decorator needs to do for a particular method of the decorated interface, you don&#39;t need to implement that method."
msgstr "Contrairement à d'autres Web Beans simples, un décorateur peut être une classe abstraite. Si le décorateur n'a rien de spécial à faire pour une méthode particulière d'une interface décorée, vous n'avez pas besoin d'implémenter cette méthode."

#. Tag: para
#, fuzzy, no-c-format
msgid "Interceptors for a method are called before decorators that apply to the method."
msgstr "Les intercepteurs pour une méthode sont appelés avant les décorateurs qui s'appliquent à cette méthode."

#. Tag: title
#, fuzzy, no-c-format
msgid "Delegate object"
msgstr "Attributs de délégation"

#. Tag: para
#, no-c-format
msgid "Decorators have a special injection point, called the <emphasis>delegate injection point</emphasis>, with the same type as the beans they decorate, and the annotation <literal>@Delegate</literal>. There must be exactly one delegate injection point, which can be a constructor parameter, initializer method parameter or injected field."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   @Inject @Delegate @Any Account account;\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[<Decorators>\n"
"    <myapp:LargeTransactionDecorator/>\n"
"</Decorators>]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "A decorator is bound to any bean which:"
msgstr "Un décorateur est lié à tout Web Bean qui:"

#. Tag: para
#, fuzzy, no-c-format
msgid "has the type of the delegate injection point as a bean type, and"
msgstr "a le type de l'attribut de délégation comme type d'API, et"

#. Tag: para
#, fuzzy, no-c-format
msgid "has all qualifiers that are declared at the delegate injection point."
msgstr "a tous les types de liaison qui sont déclarés par l'attribut de délégation."

#. Tag: para
#, fuzzy, no-c-format
msgid "This delegate injection point specifies that the decorator is bound to all beans that implement <literal>Account</literal>:"
msgstr "L'attribut de délégation spécifie que le décorateur est lié à tous les Web Beans qui impémentent <literal>Account</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Delegate @Any Account account;"
msgstr "<![CDATA[@Decorates Account account;]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "A delegate injection point may specify any number of qualifier annotations. The decorator will only be bound to beans with the same qualifiers."
msgstr "Un attribut de délégation peut spécifier une annotation de liaison. Alors, le décorateur sera seulement lié à tous les Web Beans ayant la même liaison."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Delegate @Foreign Account account;"
msgstr "<![CDATA[@Decorates @Foreign Account account;]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The decorator may invoke the delegate object, which has much the same effect as calling <literal>InvocationContext.proceed()</literal> from an interceptor. The main difference is that the decorator can invoke <emphasis>any</emphasis> business method on the delegate object."
msgstr "Le décorateur peut invoquer l'attribut de délégation, qui a le même effet que d'appeler <literal>InvocationContext.proceed()</literal> à partir d'un intercepteur."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   @Inject @Delegate @Any Account account;\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   public void withdraw(BigDecimal amount) {\n"
"      account.withdraw(amount);\n"
"      if ( amount.compareTo(LARGE_AMOUNT)&#62;0 ) {\n"
"         em.persist( new LoggedWithdrawl(amount) );\n"
"      }\n"
"   }\n"
"    \n"
"   public void deposit(BigDecimal amount);\n"
"      account.deposit(amount);\n"
"      if ( amount.compareTo(LARGE_AMOUNT)&#62;0 ) {\n"
"         em.persist( new LoggedDeposit(amount) );\n"
"      }\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@Decorator\n"
"public abstract class LargeTransactionDecorator \n"
"        implements Account {\n"
"    \n"
"    @Decorates Account account;\n"
"    \n"
"    @PersistenceContext EntityManager em;\n"
"    \n"
"    public void withdraw(BigDecimal amount) {\n"
"        account.withdraw(amount);\n"
"        if ( amount.compareTo(LARGE_AMOUNT)>0 ) {\n"
"            em.persist( new LoggedWithdrawl(amount) );\n"
"        }\n"
"    }\n"
"    \n"
"    public void deposit(BigDecimal amount);\n"
"        account.deposit(amount);\n"
"        if ( amount.compareTo(LARGE_AMOUNT)>0 ) {\n"
"            em.persist( new LoggedDeposit(amount) );\n"
"        }\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Enabling decorators"
msgstr "Activation des décorateurs"

#. Tag: para
#, no-c-format
msgid "By default, all decorators are disabled. We need to <emphasis>enable</emphasis> our decorator in the <literal>beans.xml</literal> descriptor of a bean archive. This activation only applies to the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;decorators&#62;\n"
"         &#60;class&#62;org.mycompany.myapp.LargeTransactionDecorator&#60;/class&#62;\n"
"   &#60;/decorators&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "This declaration serves the same purpose for decorators that the <literal>&#60;interceptors&#62;</literal> declaration serves for interceptors:"
msgstr "Cette déclaration a le même but pour les décorateurs que la déclaration <literal>&lt;Interceptors&gt;</literal> pour les intercepteurs:"

#. Tag: para
#, no-c-format
msgid "it enables us to specify a total ordering for all decorators in our system, ensuring deterministic behavior, and"
msgstr "cela nous permet de spécifier un ordre total pour tous les décorateurs dans notre système, assurant un comportement déterministe, et"

#. Tag: para
#, no-c-format
msgid "it lets us enable or disable decorator classes at deployment time."
msgstr "cela nous permet d'activer ou désactiver les classes de décorateurs au moment du déploiement."

#~ msgid "All decorators have a <emphasis>delegate attribute</emphasis>. The type and binding types of the delegate attribute determine which Web Beans the decorator is bound to. The delegate attribute type must implement or extend all interfaces implemented by the decorator."
#~ msgstr "Tous les décorateurs ont un <emphasis>attribut de délégation</emphasis>. Le type et les types liés d'un attribut de délégation déterminent à quel Web Beans le décorateur est relié. Le type de l'attribut délégué doit implémenter ou étendre toutes les interfaces implémentées par le décorateur."

#~ msgid "We need to <emphasis>enable</emphasis> our decorator in <literal>web-beans.xml</literal>."
#~ msgstr "Nous avons besoin d'<emphasis>activer</emphasis> notre décorateur dans le fichier <literal>web-beans.xml</literal>."
