# Language fr-FR translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml \n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2008-12-19 20:26+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Interceptors"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Interceptor functionality is defined in the Java Interceptors specification. CDI enhances this functionality with a more sophisticated, semantic, annotation-based approach to binding interceptors to beans."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The Interceptors specification defines two kinds of interception points:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "business method interception, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "lifecycle callback interception."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In addition, the EJB specification defines timeout method interception."
msgstr ""

#. Tag: para
#, no-c-format
msgid "A <emphasis>business method interceptor</emphasis> applies to invocations of methods of the bean by clients of the bean:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class TransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A <emphasis>lifecycle callback interceptor</emphasis> applies to invocations of lifecycle callbacks by the container:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class DependencyInjectionInterceptor {\n"
"   @PostConstruct \n"
"   public void injectDependencies(InvocationContext ctx) { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "An interceptor class may intercept both lifecycle callbacks and business methods."
msgstr ""

#. Tag: para
#, no-c-format
msgid "A <emphasis>timeout method interceptor</emphasis> applies to invocations of EJB timeout methods by the container:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class TimeoutInterceptor {\n"
"   @AroundTimeout \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor bindings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Suppose we want to declare that some of our beans are transactional. The first thing we need is an <emphasis>interceptor binding type</emphasis> to specify exactly which beans we&#39;re interested in:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now we can easily specify that our <literal>ShoppingCart</literal> is a transactional object:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional\n"
"public class ShoppingCart { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Or, if we prefer, we can specify that just one method is transactional:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class ShoppingCart {\n"
"   @Transactional public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Implementing interceptors"
msgstr ""

#. Tag: para
#, no-c-format
msgid "That&#39;s great, but somewhere along the line we&#39;re going to have to actually implement the interceptor that provides this transaction management aspect. All we need to do is create a standard interceptor, and annotate it <literal>@Interceptor</literal> and <literal>@Transactional</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Interceptors can take advantage of dependency injection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"\n"
"    @Resource UserTransaction transaction;\n"
"\n"
"    @AroundInvoke \n"
"    public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Multiple interceptors may use the same interceptor binding type."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Enabling interceptors"
msgstr ""

#. Tag: para
#, no-c-format
msgid "By default, all interceptors are disabled. We need to <emphasis>enable</emphasis> our interceptor in the <literal>beans.xml</literal> descriptor of a bean archive. This activation only applies to the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;interceptors&#62;\n"
"      &#60;class&#62;org.mycompany.myapp.TransactionInterceptor&#60;/class&#62;\n"
"   &#60;/interceptors&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Whoah! Why the angle bracket stew?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Well, having the XML declaration is actually a <emphasis>good thing</emphasis>. It solves two problems:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "it enables us to specify a total ordering for all the interceptors in our system, ensuring deterministic behavior, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "it lets us enable or disable interceptor classes at deployment time."
msgstr ""

#. Tag: para
#, no-c-format
msgid "For example, we could specify that our security interceptor runs before our transaction interceptor."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;interceptors&#62;\n"
"      &#60;class&#62;org.mycompany.myapp.SecurityInterceptor&#60;/class&#62;\n"
"      &#60;class&#62;org.mycompany.myapp.TransactionInterceptor&#60;/class&#62;\n"
"   &#60;/interceptors&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Or we could turn them both off in our test environment by simply not mentioning them in <literal>beans.xml</literal>! Ah, so simple."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor bindings with members"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Suppose we want to add some extra information to our <literal>@Transactional</literal> annotation:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {\n"
"   boolean requiresNew() default false;\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI will use the value of <literal>requiresNew</literal> to choose between two different interceptors, <literal>TransactionInterceptor</literal> and <literal>RequiresNewTransactionInterceptor</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional(requiresNew = true) @Interceptor\n"
"public class RequiresNewTransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now we can use <literal>RequiresNewTransactionInterceptor</literal> like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional(requiresNew = true)\n"
"public class ShoppingCart { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "But what if we only have one interceptor and we want the container to ignore the value of <literal>requiresNew</literal> when binding interceptors? Perhaps this information is only useful for the interceptor implementation. We can use the <literal>@Nonbinding</literal> annotation:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Secure {\n"
"   @Nonbinding String[] rolesAllowed() default {};\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multiple interceptor binding annotations"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Usually we use combinations of interceptor bindings types to bind multiple interceptors to a bean. For example, the following declaration would be used to bind <literal>TransactionInterceptor</literal> and <literal>SecurityInterceptor</literal> to the same bean:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Secure(rolesAllowed=&#34;admin&#34;) @Transactional\n"
"public class ShoppingCart { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "However, in very complex cases, an interceptor itself may specify some combination of interceptor binding types:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Secure @Interceptor\n"
"public class TransactionalSecureInterceptor { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Then this interceptor could be bound to the <literal>checkout()</literal> method using any one of the following combinations:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class ShoppingCart {\n"
"   @Transactional @Secure public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Secure\n"
"public class ShoppingCart {\n"
"   @Transactional public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional\n"
"public class ShoppingCart {\n"
"   @Secure public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Secure\n"
"public class ShoppingCart {\n"
"   public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor binding type inheritance"
msgstr ""

#. Tag: para
#, no-c-format
msgid "One limitation of the Java language support for annotations is the lack of annotation inheritance. Really, annotations should have reuse built in, to allow this kind of thing to work:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "public @interface Action extends Transactional, Secure { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Well, fortunately, CDI works around this missing feature of Java. We may annotate one interceptor binding type with other interceptor binding types (termed a <emphasis>meta-annotation</emphasis>). The interceptor bindings are transitive — any bean with the first interceptor binding inherits the interceptor bindings declared as meta-annotations."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Secure\n"
"@InterceptorBinding\n"
"@Target(TYPE)\n"
"@Retention(RUNTIME)\n"
"public @interface Action { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now, any bean annotated <literal>@Action</literal> will be bound to both <literal>TransactionInterceptor</literal> and <literal>SecurityInterceptor</literal>. (And even <literal>TransactionalSecureInterceptor</literal>, if it exists.)"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Use of <literal>@Interceptors</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>@Interceptors</literal> annotation defined by the interceptor specification (and used by the managed bean and EJB specifications) is still supported in CDI."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Interceptors({TransactionInterceptor.class, SecurityInterceptor.class})\n"
"public class ShoppingCart {\n"
"   public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "However, this approach suffers the following drawbacks:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the interceptor implementation is hardcoded in business code,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "interceptors may not be easily disabled at deployment time, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the interceptor ordering is non-global — it is determined by the order in which interceptors are listed at the class level."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Therefore, we recommend the use of CDI-style interceptor bindings."
msgstr ""
