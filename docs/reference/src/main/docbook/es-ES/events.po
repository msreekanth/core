# translation of events.po to Spanish
# Language es-ES translations for master.xml package.
#
# Automatically generated, 2008.
# Gladys Guerrero Lozano <gguerrer@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: events\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2009-01-19 13:59+1000\n"
"Last-Translator: Gladys Guerrero Lozano <gguerrer@redhat.com>\n"
"Language-Team: Spanish <fedora-trans-es@redhat.com>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Events"
msgstr "Eventos"

#. Tag: para
#, no-c-format
msgid "Dependency injection enables loose-coupling by allowing the implementation of the injected bean type to vary, either a deployment time or runtime. Events go one step further, allowing beans to interact with no compile time dependency at all. Event <emphasis>producers</emphasis> raise events that are delivered to event <emphasis>observers</emphasis> by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This basic schema might sound like the familiar observer/observable pattern, but there are a couple of twists:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "not only are event producers decoupled from observers; observers are completely decoupled from producers,"
msgstr "no solamente los productores de eventos están disociados de los observadores; los observadores están completamente disociados de los productores."

#. Tag: para
#, fuzzy, no-c-format
msgid "observers can specify a combination of &#34;selectors&#34; to narrow the set of event notifications they will receive, and"
msgstr "los observadores pueden especificar una combinación de \"selectores\" para limitar el conjunto de notificaciones de eventos que recibirán y"

#. Tag: para
#, fuzzy, no-c-format
msgid "observers can be notified immediately, or can specify that delivery of the event should be delayed until the end of the current transaction."
msgstr "los observadores pueden ser notificados inmediatamente o pueden especificar que la entrega del evento sea retrasada hasta el final de la transacción actual"

#. Tag: para
#, no-c-format
msgid "The CDI event notification facility uses more or less the same typesafe approach that we&#39;ve already seen with the dependency injection service."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Event payload"
msgstr "Productores de Evento"

#. Tag: para
#, no-c-format
msgid "The event object carries state from producer to consumer. The event object is nothing more than an instance of a concrete Java class. (The only restriction is that an event type may not contain type variables). An event may be assigned qualifiers, which allows observers to distinguish it from other events of the same type. The qualifiers function like topic selectors, allowing an observer to narrow the set of events it observes."
msgstr ""

#. Tag: para
#, no-c-format
msgid "An event qualifier is just a normal qualifier, defined using <literal>@Qualifier</literal>. Here&#39;s an example:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Target({FIELD, PARAMETER})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated {}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated { ... }]]>"

#. Tag: title
#, no-c-format
msgid "Event observers"
msgstr "Observadores de evento"

#. Tag: para
#, fuzzy, no-c-format
msgid "An <emphasis>observer method</emphasis> is a method of a bean with a parameter annotated <literal>@Observes</literal>."
msgstr "Un <emphasis>método de observador</emphasis> es un método de un Web Bean con un parámetro anotado <literal>@Observes</literal>."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyDocumentEvent(@Observes Document document) { ... }"
msgstr "<![CDATA[public void onAnyDocumentEvent(@Observes Document document) { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The annotated parameter is called the <emphasis>event parameter</emphasis>. The type of the event parameter is the observed <emphasis>event type</emphasis>, in this case <literal>Document</literal>. The event parameter may also specify qualifiers."
msgstr "El parámetro anotado es llamado el <emphasis>parámetro de evento</emphasis>. El tipo del parámetro de evento es el <emphasis>tipo de evento</emphasis> observado. Los métodos de observador pueden también especificar \"selectores\", los cuales son sólo instancias de tipos de enlaces de Web Beans. Cuando un tipo de enlace se utiliza como un selector de evento, es llamado un <emphasis>tipo de enlace de evento</emphasis>."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void afterDocumentUpdate(@Observes @Updated Document document) { ... }"
msgstr "<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document document) { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "An observer method need not specify any event qualifiers—in this case it is interested in <emphasis>only unqualified</emphasis> events of a particular type. If it does specify qualifiers, it&#39;s only interested in events which have those qualifiers."
msgstr "Un método de observador no necesita especificar ningún enlace de evento  &#151; en este caso está interesado en <emphasis>todos</emphasis> los eventos de un tipo determinado. Si no especifica enlaces de eventos, sólo está  interesado en eventos que también tienen esos enlaces de eventos."

#. Tag: para
#, fuzzy, no-c-format
msgid "The observer method may have additional parameters, which are injection points:"
msgstr "El método de observador puede tener parámetros adicionales, los cuales se inyectan de acuerdo con la semántica de inyección del parámetro usual de método de Web Beans:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void afterDocumentUpdate(@Observes @Updated Document document, User user) { ... }"
msgstr "<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document document, User user) { ... }]]>"

#. Tag: title
#, no-c-format
msgid "Event producers"
msgstr "Productores de Evento"

#. Tag: para
#, no-c-format
msgid "Event producers fire events using an instance of the parameterized <literal>Event</literal> interface. An instance of this interface is obtained by injection:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Any Event&#60;Document&#62; documentEvent;"
msgstr "<![CDATA[@Observable Event<Document> documentEvent]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "A producer raises events by calling the <literal>fire()</literal> method of the <literal>Event</literal> interface, passing the event object:"
msgstr "Un productor crea eventos llamando al método <literal>fire()</literal> de la interfaz del <literal>Evento</literal>, pasando un <emphasis>objeto de evento</emphasis>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "documentEvent.fire(document);"
msgstr "<![CDATA[documentEvent.fire(document);]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "This particular event will be delivered to every observer method that:"
msgstr "El evento será entregado a cada método de observador que:"

#. Tag: para
#, fuzzy, no-c-format
msgid "has an event parameter to which the event object (the <literal>Document</literal>) is assignable, and"
msgstr "tenga un parámetro de evento al cual el objeto de evento sea asignable y"

#. Tag: para
#, fuzzy, no-c-format
msgid "specifies no qualifiers."
msgstr "especifique que no hay enlaces de eventos."

#. Tag: para
#, fuzzy, no-c-format
msgid "The container simply calls all the observer methods, passing the event object as the value of the event parameter. If any observer method throws an exception, the container stops calling observer methods, and the exception is rethrown by the <literal>fire()</literal> method."
msgstr "El administrador de Web Beans simplemente llama a todos los métodos de observador, pasando el objeto del evento como el valor de un parámetro de evento. Si cualquier método de observador produce una excepción, el administrador de Web Beans se detiene llamando a los métodos de observador y la excepción es reenviada por el método <literal>fire()</literal>."

#. Tag: para
#, no-c-format
msgid "Qualifiers can be applied to an event in one of two ways:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "by annotating the <literal>Event</literal> injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid "by passing qualifiers to the <literal>select()</literal> of <literal>Event</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Specifying the qualifiers at the injection point is far simpler:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Updated Event&#60;Document&#62; documentUpdatedEvent;"
msgstr "<![CDATA[@Observable @Updated Event<Document> documentUpdatedEvent]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Then, every event fired via this instance of <literal>Event</literal> has the event qualifier <literal>@Updated</literal>. The event is delivered to every observer method that:"
msgstr "Luego cada evento disparado vía esta instancia de <literal>Evento</literal> tiene el enlace de evento anotado. El evento será enviado a cada método de observador que:"

#. Tag: para
#, no-c-format
msgid "has an event parameter to which the event object is assignable, and"
msgstr "tenga un parámetro de evento al cual el objeto de evento sea asignable y"

#. Tag: para
#, fuzzy, no-c-format
msgid "does not have any event qualifier <emphasis>except</emphasis> for the event qualifiers that match those specified at the <literal>Event</literal> injection point."
msgstr "no especifique ningún enlace de evento <emphasis>excepto</emphasis> para enlaces de evento pasados a <literal>fire()</literal>."

#. Tag: para
#, no-c-format
msgid "The downside of annotating the injection point is that we can&#39;t specify the qualifier dynamically. CDI lets us obtain a qualifier instance by subclassing the helper class <literal>AnnotationLiteral</literal>. That way, we can pass the qualifier to the <literal>select()</literal> method of <literal>Event</literal>."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "documentEvent.select(new AnnotationLiteral&#60;Updated&#62;(){}).fire(document);"
msgstr "<![CDATA[documentEvent.fire( document, new AnnotationLiteral<Updated>(){} );]]>"

#. Tag: para
#, no-c-format
msgid "Events can have multiple event qualifiers, assembled using any combination of annotations at the <literal>Event</literal> injection point and qualifier instances passed to the <literal>select()</literal> method."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Conditional observer methods"
msgstr "Observadores transaccionales"

#. Tag: para
#, no-c-format
msgid "By default, if there is no instance of an observer in the current context, the container will instantiate the observer in order to deliver an event to it. This behavior isn&#39;t always desirable. We may want to deliver events only to instances of the observer that already exist in the current contexts."
msgstr ""

#. Tag: para
#, no-c-format
msgid "A conditional observer is specified by adding <literal>receive = IF_EXISTS</literal> to the <literal>@Observes</literal> annotation."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void refreshOnDocumentUpdate(@Observes(receive = IF_EXISTS) @Updated Document d) { ... }"
msgstr "<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid "A bean with scope <literal>@Dependent</literal> cannot be a conditional observer, since it would never be called!"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Event qualifiers with members"
msgstr "Enlaces de evento con miembros"

#. Tag: para
#, fuzzy, no-c-format
msgid "An event qualifier type may have annotation members:"
msgstr "Un tipo de enlace de evento puede tener miembros de anotación:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"   RoleType value();\n"
"}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"    RoleType value();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "The member value is used to narrow the messages delivered to the observer:"
msgstr "El valor de miembro se utiliza para limitar los mensajes enviados al observador:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) { ... }"
msgstr "<![CDATA[public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Event qualifier type members may be specified statically by the event producer, via annotations at the event notifier injection point:"
msgstr "Los miembros de tipo de enlace de evento se pueden especificar estáticamente por el producto del evento, a través de anotaciones en el punto de inyección del notificador de evento."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Role(ADMIN) Event&#60;LoggedIn&#62; loggedInEvent;"
msgstr "<![CDATA[@Observable @Role(ADMIN) Event<LoggedIn> LoggedInEvent;}}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Alternatively, the value of the event qualifier type member may be determined dynamically by the event producer. We start by writing an abstract subclass of <literal>AnnotationLiteral</literal>:"
msgstr "Alternativamente, el valor del miembro de tipo de enlace de evento puede ser determinado de modo dinámico por el productor de evento. Empezamos por escribir una subclase abstracta de <literal>AnnotationLiteral</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"abstract class RoleBinding \n"
"   extends AnnotationLiteral&#60;Role&#62; \n"
"   implements Role {}"
msgstr ""
"<![CDATA[abstract class RoleBinding \n"
"    extends AnnotationLiteral<Role> \n"
"    implements Role {}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The event producer passes an instance of this class to <literal>select()</literal>:"
msgstr "El productor de evento pasa una instancia de esta clase a <literal>fire()</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"documentEvent.select(new RoleBinding() {\n"
"   public void value() { return user.getRole(); }\n"
"}).fire(document);"
msgstr "<![CDATA[documentEvent.fire( document, new RoleBinding() { public void value() { return user.getRole(); } } );]]>"

#. Tag: title
#, fuzzy, no-c-format
msgid "Multiple event qualifiers"
msgstr "Enlaces de evento múltiples"

#. Tag: para
#, fuzzy, no-c-format
msgid "Event qualifier types may be combined, for example:"
msgstr "Los tipos de enlaces de evento pueden combinarse, por ejemplo:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject @Blog Event&#60;Document&#62; blogEvent;\n"
"...\n"
"if (document.isBlog()) blogEvent.select(new AnnotationLiteral&#60;Updated&#62;(){}).fire(document);"
msgstr ""
"<![CDATA[@Observable @Blog Event<Document> blogEvent;\n"
"...\n"
"if (document.isBlog()) blogEvent.fire(document, new AnnotationLiteral<Updated>(){});]]>"

#. Tag: para
#, no-c-format
msgid "Observers must completely match the final qualified type of the event. Assume the following observers in this example:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void afterBlogUpdate(@Observes @Updated @Blog Document document) { ... }"
msgstr "<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document document) { ... }]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyBlogEvent(@Observes @Blog Document document) { ... }"
msgstr "<![CDATA[public void onAnyBlogEvent(@Observes @Blog Document document) { ... }]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyDocumentEvent(@Observes Document document) { ... }}}"
msgstr "<![CDATA[public void onAnyDocumentEvent(@Observes Document document) { ... }}}]]>"

#. Tag: para
#, no-c-format
msgid "The only observer notified will be:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "However, if there were also an observer:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void afterBlogUpdate(@Observes @Any Document document) { ... }"
msgstr "<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid "It would also be notified, as <literal>@Any</literal> acts as an alias for any and all qualifiers."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Transactional observers"
msgstr "Observadores transaccionales"

#. Tag: para
#, no-c-format
msgid "Transactional observers receive their event notifications during the before or after completion phase of the transaction in which the event was raised. For example, the following observer method needs to refresh a query result set that is cached in the application context, but only when transactions that update the <literal>Category</literal> tree succeed:"
msgstr "Los observadores transaccionales reciben las notificaciones de sus eventos antes o después de la fase de finalización de la transacción en la se creó el evento. Por ejemplo, el siguiente método de observador necesita actualizar un conjunto de resultados de petición almacenado en caché en el contexto de aplicación, pero sólo cuando las transacciones que actualizan el árbol de <literal>Categoría</literal> tengan éxito:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void refreshCategoryTree(@Observes(during = AFTER_SUCCESS) CategoryUpdateEvent event) { ... }"
msgstr "<![CDATA[public void refreshCategoryTree(@AfterTransactionSuccess @Observes CategoryUpdateEvent event) { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "There are five kinds of transactional observers:"
msgstr "Hay tres clases de observadores transaccionales:"

#. Tag: para
#, no-c-format
msgid "<literal>IN_PROGESS</literal> observers are called immediately (default)"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>AFTER_SUCCESS</literal> observers are called during the after completion phase of the transaction, but only if the transaction completes successfully"
msgstr "Los observadores<literal>@AfterTransactionSuccess</literal> son llamados tras la fase de finalización de la transacción, pero sólo si la transacción finaliza exitosamente."

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>AFTER_FAILURE</literal> observers are called during the after completion phase of the transaction, but only if the transaction fails to complete successfully"
msgstr "Los observadores <literal>@AfterTransactionFailure</literal> son llamados tras la fase de finalización de la transacción, pero sólo si la transacción no se finaliza con éxito."

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>AFTER_COMPLETION</literal> observers are called during the after completion phase of the transaction"
msgstr "Los observadores <literal>@AfterTransactionCompletion</literal> son llamados tras la fase de finalización de la transacción."

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>BEFORE_COMPLETION</literal> observers are called during the before completion phase of the transaction"
msgstr "Los observadores <literal>@BeforeTransactionCompletion</literal> son llamados durante la fase anterior de finalización de la transacción"

#. Tag: para
#, fuzzy, no-c-format
msgid "Transactional observers are very important in a stateful object model because state is often held for longer than a single atomic transaction."
msgstr "Los observadores transaccionales son muy importantes en un modelo de objetos con estado como Web Beans, porque el estado suele ser mantenido para más de una transacción atómica."

#. Tag: para
#, no-c-format
msgid "Imagine that we have cached a JPA query result set in the application scope:"
msgstr "Imagine que hemos almacenado en caché una serie de resultados de petición JPA en el ámbito de la aplicación:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   List&#60;Product&#62; products;\n"
"\n"
"   @Produces @Catalog \n"
"   List&#60;Product&#62; getCatalog() {\n"
"      if (products==null) {\n"
"         products = em.createQuery(&#34;select p from Product p where p.deleted = false&#34;)\n"
"            .getResultList();\n"
"      }\n"
"      return products;\n"
"   }\n"
"    \n"
"}"
msgstr ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    @PersistenceContext EntityManager em;\n"
"    \n"
"    List<Product> products;\n"
"\n"
"    @Produces @Catalog \n"
"    List<Product> getCatalog() {\n"
"        if (products==null) {\n"
"            products = em.createQuery(\"select p from Product p where p.deleted = false\")\n"
"                .getResultList();\n"
"        }\n"
"        return products;\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "From time to time, a <literal>Product</literal> is created or deleted. When this occurs, we need to refresh the <literal>Product</literal> catalog. But we should wait until <emphasis>after</emphasis> the transaction completes successfully before performing this refresh!"
msgstr "De vez en cuando, se crea o borra un <literal>Producto</literal>. Cuando esto ocurre, necesitamos refrescar el catálogo del <literal>Producto</literal>. No obstante, deberíamos esperar hasta <emphasis>después</emphasis> de que la transacción finalice exitosamente antes de ¡actualizar!"

#. Tag: para
#, fuzzy, no-c-format
msgid "The bean that creates and deletes <literal>Product</literal>s could raise events, for example:"
msgstr "El Web Bean que crea y borra <literal>Productos</literal> podría crear eventos, por ejemplo:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Stateless\n"
"public class ProductManager {\n"
"   @PersistenceContext EntityManager em;\n"
"   @Inject @Any Event&#60;Product&#62; productEvent;\n"
"\n"
"   public void delete(Product product) {\n"
"      em.delete(product);\n"
"      productEvent.select(new AnnotationLiteral&#60;Deleted&#62;(){}).fire(product);\n"
"   }\n"
"    \n"
"   public void persist(Product product) {\n"
"      em.persist(product);\n"
"      productEvent.select(new AnnotationLiteral&#60;Created&#62;(){}).fire(product);\n"
"   }\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[@Stateless\n"
"public class ProductManager {\n"
"\n"
"    @PersistenceContext EntityManager em;\n"
"    @Observable Event<Product> productEvent;\n"
"\n"
"    public void delete(Product product) {\n"
"        em.delete(product);\n"
"        productEvent.fire(product, new AnnotationLiteral<Deleted>(){});\n"
"    }\n"
"    \n"
"    public void persist(Product product) {\n"
"        em.persist(product);\n"
"        productEvent.fire(product, new AnnotationLiteral<Created>(){});\n"
"    }\n"
"    \n"
"    ...\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "And now <literal>Catalog</literal> can observe the events after successful completion of the transaction:"
msgstr "Ahora el <literal>Catálogo</literal> puede observar los eventos después de finalizar la transacción exitosamente:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"   ...\n"
"   void addProduct(@Observes(during = AFTER_SUCCESS) @Created Product product) {\n"
"      products.add(product);\n"
"   }\n"
"    \n"
"   void removeProduct(@Observes(during = AFTER_SUCCESS) @Deleted Product product) {\n"
"      products.remove(product);\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    ...\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Created Product product) {\n"
"        products.add(product);\n"
"    }\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Deleted Product product) {\n"
"        products.remove(product);\n"
"    }\n"
"    \n"
"}]]>"

#~ msgid "When this event occurs, all of the following observer methods will be notified:"
#~ msgstr "Cuando un evento ocurre, todos los siguientes métodos de observador serán notificados:"

#~ msgid "The Web Beans event notification facility allows Web Beans to interact in a totally decoupled manner. Event <emphasis>producers</emphasis> raise events that are then delivered to event <emphasis>observers</emphasis> by the Web Bean manager. This basic schema might sound like the familiar observer/observable pattern, but there are a couple of twists:"
#~ msgstr "La notificación de eventos de Web Beans permite a Web Beans interactuar de una manera completamente disociada. Los <emphasis>productores</emphasis> crean eventos que son enviados luego a <emphasis>observadores</emphasis> de evento por el administrador de Web Beans. Este esquema básico podría parecerse al patrón conocido observador/observable, pero hay un par de cambios:"

#~ msgid "We specify the event bindings of the observer method by annotating the event parameter:"
#~ msgstr "Especificamos los enlaces de evento del método de observador al anotar el parámetro de evento:"

#~ msgid "The event producer may obtain an <emphasis>event notifier</emphasis> object by injection:"
#~ msgstr "El productor de evento puede obtener un objeto que <emphasis>notifica el evento</emphasis>por inyección:"

#~ msgid "The <literal>@Observable</literal> annotation implicitly defines a Web Bean with scope <literal>@Dependent</literal> and deployment type <literal>@Standard</literal>, with an implementation provided by the Web Bean manager."
#~ msgstr "La anotación <literal>@Observable</literal> define implícitamente un Web Bean con ámbito <literal>@Dependent</literal> y tipo de despliegue <literal>@Standard</literal>, con una implementación provista por el administrador de Web Bean."

#~ msgid "An event object may be an instance of any Java class that has no type variables or wildcard type parameters. The event will be delivered to every observer method that:"
#~ msgstr "Un objeto de evento puede ser una instancia de una clase de Java que no tiene variables de tecla o parámetros de  comodines. El evento será entregado a cada método de observador que:"

#~ msgid "To specify a \"selector\", the event producer may pass an instance of the event binding type to the <literal>fire()</literal> method:"
#~ msgstr "Para especificar un \"selector\", el productor del evento puede pasar una instancia del tipo de enlace del evento al método <literal>fire()</literal>:"

#~ msgid "The helper class <literal>AnnotationLiteral</literal> makes it possible to instantiate binding types inline, since this is otherwise difficult to do in Java."
#~ msgstr "La <literal>Anotación Literal</literal> clase auxiliar hace posible crear una instancia de tipos de enlaces en línea, ya que de otra manera es difícil hacerlo en Java."

#~ msgid "Alternatively, event bindings may be specified by annotating the event notifier injection point:"
#~ msgstr "De modo alternativo, se pueden especificar eventos de enlaces anotando el punto de inyección de notificador de eventos:"

#~ msgid "does not specify any event binding <emphasis>except</emphasis> for the event bindings passed to <literal>fire()</literal> or the annotated event bindings of the event notifier injection point."
#~ msgstr "no especifica ningún enlace de evento<emphasis>excepto</emphasis> para los enlaces de eventos pasados a <literal>fire()</literal> o a los enlaces de evento anotados del punto de inyección del notificador de evento."

#~ msgid "Registering observers dynamically"
#~ msgstr "Registro dinámico de observadores"

#~ msgid "It's often useful to register an event observer dynamically. The application may implement the <literal>Observer</literal> interface and register an instance with an event notifier by calling the <literal>observe()</literal> method."
#~ msgstr "Suele ser útil registrar dinámicamente un observador de evento. La aplicación puede implementar la interfaz del <literal>Observador</literal> y registrar una instancia con un notificador de evento llamando el método de <literal>observe()</literal>."

#~ msgid "<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify(Document doc) { ... } } );]]>"
#~ msgstr "<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify(Document doc) { ... } } );]]>"

#~ msgid "Event binding types may be specified by the event notifier injection point or by passing event binding type instances to the <literal>observe()</literal> method:"
#~ msgstr "Los tipos de enlace de evento pueden ser especificados por el punto de inyección del notificador del evento o pasando las instancias de tipo de enlace de evento al método <literal>observe()</literal>:"

#~ msgid ""
#~ "<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify(Document doc) { ... } }, \n"
#~ "                                                new AnnotationLiteral<Updated>(){} );]]>"
#~ msgstr ""
#~ "<![CDATA[documentEvent.observe( new Observer<Document>() { public void notify(Document doc) { ... } }, \n"
#~ "                                                new AnnotationLiteral<Updated>(){} );]]>"
