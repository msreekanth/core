#
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-12-14T13:35:16\n"
"PO-Revision-Date: 2010-10-19T02:13:49\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Context Management"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Managing the built in contexts"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld allows you to easiy manage the built in contexts by injecting them and calling lifecycle methods. Weld defines two types of context, <emphasis>managed</emphasis> and <emphasis>unmanaged</emphasis>. Managed contexts can be activated (allowing bean instances to be retrieved from the context), invalidated (scheduling bean instances for destruction) and deactivaed (stopping bean instances from being retrieved, and if the context has been invalidated, causing the bean instances to destroyed). Unmanaged contexts are always active; some may offer the ability to destroy instances."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Managed contexts can either be <emphasis>bound</emphasis> or <emphasis>unbound</emphasis>. An unbound context is scoped to the thread in which it is activated (instances placed in the context in one thread are not visible in other threads), and is destroyed upon invalidation and deactivation. Bound contexts are attached to some external data store (such as the Http Session or a manually propagated map) by <emphasis>associating</emphasis> the data store with the context before calling activate, and discociating the data store after calling activate."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld automatically controls context lifecycle in many scenarios such as Http Requests, EJB remote invocations, and MDB invocations. Many of the extensions for CDI offer context lifecycle for other environments, it&#39;s worth checking to see if there is a suitable extension before deciding to manage the context yourself."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld provides a number of built in contexts, which are shown in <xref linkend=\"contexts.available\" />."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Available Contexts in Weld"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Scope"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Qualifiers"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Context"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Notes"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@Dependent</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@Default</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>DependentContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "The dependent context is unbound and unmanaged"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@RequestScoped</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@Unbound</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>RequestContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "An unbound request context, useful for testing"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@Bound</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A request context bound to a manually propagated map, useful for testing or non-Servlet environments"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>BoundRequestContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@Http</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A request context bound to a Servlet request, used for any Servlet based request context"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>HttpRequestContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@Ejb</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A request context bound to a an interceptor&#39;s invocation context, used for EJB invocations outside of Servlet requests"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>EjbRequestContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@ConversationScoped</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>ConversationContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A conversation context bound to two manually propagated maps (one which represents the request and one which represents the session), useful for testing or non-Servlet environments"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>BoundConversationContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A conversation context bound to a Servlet request, used for any Servlet based conversation context"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>HttpConversationContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@SessionScoped</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>SessionContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A session context bound to a manually propagated map, useful for testing or non-Servlet environments"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>BoundSessionContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A session context bound to a Servlet request, used for any Servlet based session context"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>HttpSessionContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@ApplicationScoped</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>ApplicationContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "An application context backed by an application scoped singleton, it is unmanaged and unbound but does offer an option to destroy all entries"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>@SingletonScoped</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>SingletonContext</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A singleton context backed by an application scoped singleton, it is unmanaged and unbound but does offer an option to destroy all entries"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Unmanaged contexts offer little of interest in a discussion about managing context lifecycles, so from here on in we will concentrate on the managed contexts (unmanaged contexts of course play a vital role in the functioning of your application and Weld!). As you can see from the table above, the managed contexts offer a number of different implmentations for the same scope; in general, each flavor of context for a scope has the same API. We&#39;ll walk through a number of common lifecycle management scenarios below; armed with this knowledge, and the Javadoc, you should be able to work with any of the context implementations Weld offers."
msgstr ""

#. Tag: para
#, no-c-format
msgid "We&#39;ll start simple with the <code>BoundRequestContext</code>, which you might use to provide the request scope outside of a Servlet request or EJB Invocation."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"   /* Inject the BoundRequestContext. */\n"
"   /* Alternatively, you could look this up from the BeanManager */ \n"
"   @Inject BoundRequestContext requestContext;\n"
"   \n"
"   ...\n"
"   \n"
"   /* Start the request, providing a data store which will last the lifetime of the request */\n"
"   public void startRequest(Map&#60;String, Object&#62; requestDataStore) {\n"
"      // Associate the store with the context and acticate the context\n"
"      requestContext.associate(requestDataStore);\n"
"      requestContext.activate();\n"
"   }\n"
"   \n"
"   /* End the request, providing the same data store as was used to start the request */\n"
"   public void endRequest(Map&#60;String, Object&#62; requestDataStore) {\n"
"      try {\n"
"         /* Invalidate the request (all bean instances will be scheduled for destruction) */\n"
"         requestContext.invalidate();\n"
"         /* Deactivate the request, causing all bean instances to be destroyed (as the context is invalid) */\n"
"         requestContext.deactivate();\n"
"      } finally {\n"
"         /* Ensure that whatever happens we dissociate to prevent any memory leaks */\n"
"         requestContext.dissociate(requestDataStore);\n"
"      }\n"
"   }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The bound session context works in much the same way, excepting that invalidating and deactivating the session context causes the any conversations in the session to be destroyed as well. The http session context and http request context also work similarly, and might be of use if you find yourself creating threads from an http request). The http session context additionally offers a method which can immediately destroy the context."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld&#39;s session contexts are &#34;lazy&#34; and don&#39;t require a session to actually exist until a bean instance must be written."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The conversation context offers a few more options, which we will walk through here."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"   @Inject BoundConversationContext conversationContext;\n"
"   \n"
"   ...\n"
"\n"
"   /* Start a transient conversation */\n"
"   /* Provide a data store which will last the lifetime of the request */\n"
"   /* and one that will last the lifetime of the session */\n"
"   public void startTransientConversation(Map&#60;String, Object&#62; requestDataStore, \n"
"                                          Map&#60;String, Object&#62; sessionDataStore) {\n"
"      resumeOrStartConversation(requestDataStore, sessionDataStore, null);\n"
"   }\n"
"\n"
"   /* Start a transient conversation (if cid is null) or resume a non-transient */\n"
"   /* conversation. Provide a data store which will last the lifetime of the request */\n"
"   /* and one that will last the lifetime of the session */      \n"
"   public void resumeOrStartConversation(Map&#60;String, Object&#62; requestDataStore, \n"
"                                         Map&#60;String, Object&#62; sessionDataStore, \n"
"                                         String cid) {\n"
"      /* Associate the stores with the context and acticate the context */\n"
"      * BoundRequest just wraps the two datastores */\n"
"      conversationContext.associate(new MutableBoundRequest(requestDataStore, sessionDataStore));\n"
"      // Pass the cid in\n"
"      conversationContext.activate(cid);\n"
"   }\n"
"   \n"
"   /* End the conversations, providing the same data store as was used to start */\n"
"   /* the request. Any transient conversations will be destroyed, any newly-promoted */\n"
"   /* conversations will be placed into the session */\n"
"   public void endOrPassivateConversation(Map&#60;String, Object&#62; requestDataStore, \n"
"                                          Map&#60;String, Object&#62; sessionDataStore) {\n"
"      try {\n"
"         /* Invalidate the conversation (all transient conversations will be scheduled for destruction) */\n"
"         conversationContext.invalidate();\n"
"         /* Deactivate the conversation, causing all transient conversations to be destroyed */\n"
"         conversationContext.deactivate();\n"
"      } finally {\n"
"        /* Ensure that whatever happens we dissociate to prevent memory leaks*/\n"
"         conversationContext.dissociate(new MutableBoundRequest(requestDataStore, sessionDataStore));\n"
"      }\n"
"   }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The conversation context also offers a number of properties which control the behavior of conversation expiration (after this period of inactivity the conversation will be ended and destroyed by the containber), and the duration of lock timeouts (the conversation context ensures that a single thread is accessing any bean instances by locking access, if a lock can&#39;t be obtained after a certain time Weld will error rather than continue to wait for the lock). Additionally, you can alter the name of the parameter used to transfer the conversation id (by default, <code>cid</code>)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld also introduces the notion of a <code>ManagedConversation</code>, which extends the <code>Conversation</code> interface with the abilty to lock, unlock and touch (update the last used timestamp) a conversation. Finally, all non-transient conversations in a session can be obtained from the conversation context, as can the current conversation."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld&#39;s conversations are not assigned ids until they become non-transient."
msgstr ""
