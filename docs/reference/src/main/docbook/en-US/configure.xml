<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="configure">
   <title>Configuration</title>

   <section>
      <title>Excluding classes from scanning and deployment</title>

      <para>
         Weld allows you to exclude classes in your archive from scanning, having
         container lifecycle events fired, and being deployed as beans.
      </para>
      
      <para>
         In this tutorial, we'll explore this feature via an example; a more formal specification can be found in the
         xsd, located at <ulink url="http://jboss.org/schema/weld/beans_1_1.xsd">http://jboss.org/schema/weld/beans_1_1.xsd</ulink>.
      </para>
      
      <programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://java.sun.com/xml/ns/javaee" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:weld="http://jboss.org/schema/weld/beans" 
       xsi:schemaLocation="
          http://java.sun.com/xml/ns/javaee http://docs.jboss.org/cdi/beans_1_0.xsd
          http://jboss.org/schema/weld/beans http://jboss.org/schema/weld/beans_1_1.xsd">
    
    <weld:scan>
      
        <!-- Don't deploy the classes for the swing app! -->
        <weld:exclude name="com.acme.swing.**" />
      
        <!-- Don't include GWT support if GWT is not installed -->
        <weld:exclude name="com.acme.gwt.**">
            <weld:if-class-available name="!com.google.GWT"/>
        </weld:exclude>
        
        <!--
            Exclude classes which end in Blether if the system property verbosity is set to low
            i.e.
              java ... -Dverbosity=low            
        -->        
        <weld:exclude pattern="^(.*)Blether$">
            <weld:if-system-property name="verbosity" value="low"/>
        </weld:exclude>
        
       <!--
             Don't include JSF support if Wicket classes are present, and the viewlayer system
             property is not set
        -->
        <weld:exclude name="com.acme.jsf.**">
            <weld:if-class-available name="org.apahce.wicket.Wicket"/>
            <weld:if-system-property name="!viewlayer"/>
        </weld:exclude>
    </weld:scan>
    
</beans>]]></programlisting>

      <para>
         In this example we show the most common use cases for exercising fine control over which classes
         Weld scans. The first filter excludes all classes in the package <code>com.acme.swing</code>, and
         in most cases this will be sufficient for your needs.
      </para>
      
      <para>
         However, sometimes it's useful to be able to activate the filter depending on the environment used.
         In this case, Weld allows you to activate (or deactivate) a filter based on either system properties
         or whether a class is available. The second filter shows the use case of disabling scanning of certain
         classes depending on the capabilities of the environment you deploy to - in this case we are excluding
         GWT support if GWT is not installed.
      </para>
      
      <note>
         <para>
            Notice how we use a <code>!</code> character on the <code>name</code> attribute to invert the 
            activation condition. You can invert any activation condition in this way.
         </para>
      </note>
      
      <para>
         The third filter uses a regular expression to select the classes to match (normally we use simple 
         name-based patterns, as they don't require us to escape the period which delimits the package 
         hierarchy).
      </para>
      
      <note>
         <para>
            If you specify just a system property name, Weld will activate the filter if that system property
            has been set (with any value). If you also specify the system property value, then Weld will only
            activate the filter if the system property's value matches exactly.
         </para>
      </note>
      
      <para>
         The fourth filter shows more a advanced configurations, where we use multiple activation conditions to 
         decide whether to activate the filter.
      </para>
      
      <para>
         You can combine as many activation conditions as you like (<emphasis>all</emphasis> must be true for the 
         filter to be activated).
         If you want to a filter that is active if <emphasis>any</emphasis> of the activation conditions are true,
         then you need multiple identical filters, each with different activation conditions.
      </para>
      
      <tip>
         <para>
            In general, the semantics defined by Ant's pattern sets 
            (http://ant.apache.org/manual/dirtasks.html#patternset) are followed.
         </para>
      </tip>

   </section>

<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
