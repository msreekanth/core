# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml \n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2008-12-19 20:26+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Getting started with Weld"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld comes with a number of examples. We recommend you start with <literal>examples/jsf/numberguess</literal> and <literal>examples/jsf/translator</literal>. Numberguess is a web (war) example containing only non-transactional managed beans. This example can be run on a wide range of servers, including JBoss AS, GlassFish, Apache Tomcat, Jetty, Google App Engine, and any compliant Java EE 6 container. Translator is an enterprise (ear) example that contains session beans. This example must be run on JBoss AS 6.0, Glassfish 3.0 or any compliant Java EE 6 container."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Both examples use JSF 2.0 as the web framework and, as such, can be found in the <literal>examples/jsf</literal> directory of the Weld distribution."
msgstr "このサンプルは、Web Beans のディストリビューションの <literal>examples/se/numberguess</literal> フォルダ に見つけることができます。"

#. Tag: title
#, no-c-format
msgid "Prerequisites"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To run the examples with the provided build scripts, you&#39;ll need the following:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "the latest release of Weld, which contains the examples"
msgstr "Web Beans の最新リリース"

#. Tag: para
#, no-c-format
msgid "Ant 1.7.0, to build and deploy the examples"
msgstr ""

#. Tag: para
#, no-c-format
msgid "a supported runtime environment (minimum versions shown)"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "JBoss AS 6.0.0,"
msgstr "JBoss AS 5.0.1.GA あるいは"

#. Tag: para
#, fuzzy, no-c-format
msgid "GlassFish 3.0,"
msgstr "GlassFish の使用"

#. Tag: para
#, fuzzy, no-c-format
msgid "Apache Tomcat 6.0.x (war example only), or"
msgstr "Apache Tomcat 6.0.x"

#. Tag: para
#, fuzzy, no-c-format
msgid "Jetty 6.1.x (war example only)"
msgstr "Apache Tomcat 6.0.x"

#. Tag: para
#, no-c-format
msgid "(optionally) Maven 2.x, to run the examples in an embedded servlet container"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You&#39;ll need a full install of Ant 1.7.0. Some linux distributions only supply a partial installation of Ant which cause the build to fail. If you encounter problems, verify that ant-nodeps.jar is on the classpath."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the next few sections, you&#39;ll be using the Ant command (<literal>ant</literal>) to invoke the Ant build script in each example to compile, assemble and deploy the example to JBoss AS and, for the war example, Apache Tomcat. You can also deploy the generated artifact (war or ear) to any other container that supports Java EE 6, such as GlassFish 3."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you have Maven installed, you can use the Maven command (<literal>mvn</literal>) to compile and assemble the standalone artifact (war or ear) and, for the war example, run it in an embedded container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The sections below cover the steps for deploying with both Ant and Maven in detail. Let&#39;s start with JBoss AS."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Deploying to JBoss AS"
msgstr "JBoss AS 5 の使用"

#. Tag: para
#, no-c-format
msgid "To deploy the examples to JBoss AS, you&#39;ll need <ulink url=\"http://jboss.org/jbossas/\">JBoss AS 6.0.0</ulink> or above. If a release of the JBoss AS 6.0 line isn&#39;t yet available, you can download a <ulink url=\"http://hudson.jboss.org/hudson/view/JBoss%20AS/job/JBoss-AS-6.0.x/\">nightly snapshot</ulink>. The reason JBoss AS 6.0.0 or above is required is because it&#39;s the first release that has both CDI and Bean Validation support built-in, making it close enough to Java EE 6 to run the examples. The good news is that there are no additional modifications you have to make to the server. It&#39;s ready to go!"
msgstr ""

#. Tag: para
#, no-c-format
msgid "After you have downloaded JBoss AS, extract it. (We recommended renaming the folder to include the <literal>as</literal> qualifier so it&#39;s clear that it&#39;s the application server). You can move the extracted folder anywhere you like. Wherever it lays to rest, that&#39;s what we&#39;ll call the JBoss AS installation directory, or <literal>JBOSS_HOME</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"$&#62; unzip jboss-6.0.*.zip\n"
"$&#62; mv jboss-6.0.*/ jboss-as-6.0"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In order for the build scripts to know where to deploy the example, you have to tell them where to find your JBoss AS installation (i.e., <literal>JBOSS_HOME</literal>). Create a new file named <literal>local.build.properties</literal> in the examples directory of the Weld distribution and assign the path of your JBoss AS installation to the property key <literal>jboss.home</literal>, as follows:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "jboss.home=/path/to/jboss-as-6.0"
msgstr "jboss.home=/Applications/jboss-5.0.1.GA"

#. Tag: para
#, fuzzy, no-c-format
msgid "You&#39;re now ready to deploy your first example!"
msgstr "これで、最初のサンプルをデプロイする用意ができました。"

#. Tag: para
#, no-c-format
msgid "Switch to the <literal>examples/jsf/numberguess</literal> directory and execute the Ant <literal>deploy</literal> target:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd examples/jsf/numberguess\n"
"$&#62; ant deploy"
msgstr ""
"$ cd examples/numberguess\n"
"ant deploy"

#. Tag: para
#, no-c-format
msgid "If you haven&#39;t already, start JBoss AS. You can either start JBoss AS from a Linux shell:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd /path/to/jboss-as-6.0\n"
"$&#62; ./bin/run.sh"
msgstr "$ /Application/jboss-5.0.0.GA/bin/run.sh"

#. Tag: para
#, no-c-format
msgid "a Windows command window:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"$&#62; cd c:\\path\\to\\jboss-as-6.0\\bin\n"
"$&#62; run"
msgstr ""

#. Tag: para
#, no-c-format
msgid "or you can start the server using an IDE, like Eclipse."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you are using Eclipse, you should seriously consider installing the <ulink url=\"http://www.jboss.org/tools\">JBoss Tools</ulink> add-ons, which include a wide variety of tooling for JSR-299 and Java EE development, as well as an enhanced JBoss AS server view."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Wait a few seconds for the application to deploy (or the application server to start) and see if you can determine the most efficient approach to pinpoint the random number at the local URL <ulink url=\"http://localhost:8080/weld-numberguess\">http://localhost:8080/weld-numberguess</ulink>."
msgstr "ここでは、コンテキストパスを親切なurl (<ulink url=\"http://localhost:8080/webbeans-translator\">http://localhost:8080/webbeans-translator</ulink>) に設定します。"

#. Tag: para
#, no-c-format
msgid "The Ant build script includes additional targets for JBoss AS to deploy and undeploy the archive in either exploded or packaged format and to tidy things up."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ant restart</literal> - deploy the example in exploded format to JBoss AS"
msgstr "<literal>ant restart</literal> - サンプルを展開形式フォーマットでデプロイします"

#. Tag: para
#, no-c-format
msgid "<literal>ant explode</literal> - update an exploded example, without restarting the deployment"
msgstr "<literal>ant explode</literal> - デプロイを最初から行うのでなく、展開形式でデプロイされたサンプルを必要な部分のみを更新します"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ant deploy</literal> - deploy the example in compressed jar format to JBoss AS"
msgstr "<literal>ant deploy</literal> - サンプルを圧縮 jar フォーマットでデプロイします"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ant undeploy</literal> - remove the example from JBoss AS"
msgstr "<literal>ant undeploy</literal> - サーバからサンプルを削除します"

#. Tag: para
#, no-c-format
msgid "<literal>ant clean</literal> - clean the example"
msgstr "<literal>ant clean</literal> - サンプルをクリーンします"

#. Tag: para
#, no-c-format
msgid "The second starter example, <literal>weld-translator</literal>, will translate your text into Latin. (Well, not really, but the stub is there for you to implement, at least. Good luck!) To try it out, switch to the translator example directory and execute the deploy target:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd examples/jsf/translator\n"
"$&#62; ant deploy"
msgstr ""
"$ cd examples/translator\n"
"ant deploy"

#. Tag: para
#, no-c-format
msgid "The translator uses session beans, which are packaged in an EJB module within an ear. Java EE 6 will allow session beans to be deployed in war modules, but that&#39;s a topic for a later chapter."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Again, wait a few seconds for the application to deploy (if you&#39;re really bored, read the log messages), and visit <ulink url=\"http://localhost:8080/weld-translator\">http://localhost:8080/weld-translator</ulink> to begin pseudo-translating."
msgstr "ここでは、コンテキストパスを親切なurl (<ulink url=\"http://localhost:8080/webbeans-translator\">http://localhost:8080/webbeans-translator</ulink>) に設定します。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Deploying to GlassFish"
msgstr "GlassFish の使用"

#. Tag: para
#, no-c-format
msgid "Deploying to GlassFish should be easy and familiar, right? After all, it&#39;s the Java EE 6 reference implementation and Weld is the JSR-299 reference implementation, meaning Weld gets bundled with GlassFish. So yes, it&#39;s all quite easy and familiar."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To deploy the examples to GlassFish, you&#39;ll need the final <ulink url=\"https://glassfish.dev.java.net/downloads/v3-final.html\">GlassFish V3</ulink> release. Select the release that ends in either <literal>-unix.sh</literal> or <literal>-windows.exe</literal> depending on your platform. After the download is complete, execute the installer. On Linux/Unix, you&#39;ll need to first make the script executable."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"$&#62; chmod 755 glassfish-v3-unix.sh\n"
"$&#62; ./glassfish-v3-unix.sh"
msgstr ""

#. Tag: para
#, no-c-format
msgid "On Windows you can just click on the executable. Follow the instructions in the installer. It will create a single domain named <literal>domain1</literal>. You&#39;ll use that domain to deploy the example. We recommend that you choose <literal>7070</literal> as the main HTTP port to avoid conflicts with a running instance of JBoss AS (or Apache Tomcat)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you&#39;ve deployed either of the starter examples, <literal>weld-numberguess</literal> or <literal>weld-translator</literal>, to JBoss AS, then you already have the deployable artifact you need. If not, switch to either of the two directories and build it."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"$&#62; cd examples/jsf/numberguess (or examples/jsf/translator)\n"
"$&#62; ant package"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The deployable archive for the <literal>weld-numberguess</literal>, named <literal>weld-numberguess.war</literal>, ends up in the example&#39;s <literal>target</literal> directory. The archive for the <literal>weld-translator</literal> example, named <literal>weld-translator.ear</literal>, ends up in the example&#39;s <literal>ear/target</literal> directory. All you need to do now is deploy them to GlassFish."
msgstr ""

#. Tag: para
#, no-c-format
msgid "One way to deploy applications to GlassFish is by using the <ulink url=\"http://localhost:4848\">GlassFish Admin Console</ulink>. To get the Admin Console running, you need to start a GlassFish domain, in our case <literal>domain1</literal>. Switch to the <literal>bin</literal> folder in the directory where you installed GlassFish and execute the following command:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; asadmin start-domain domain1"
msgstr ""

#. Tag: para
#, no-c-format
msgid "After a few seconds you can visit the Admin Console in the browser at the URL <ulink url=\"http://localhost:4848\">http://localhost:4848</ulink>. In the tree on the left-hand side of the page, click on &#34;Applications&#34;, then click on the &#34;Deploy...&#34; button under the heading &#34;Applications&#34; and select the deployable artifact for either of the two examples. The deployer should recognize that you have selected a Java EE artifact and allow you to start it. You can see the examples running at either <ulink url=\"http://localhost:7070/weld-numberguess\">http://localhost:7070/weld-numberguess</ulink> or <ulink url=\"http://localhost:7070/weld-translator\">http://localhost:7070/weld-translator</ulink>, depending on which example you deployed."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Alternatively, you can deploy the application to GlassFish using the asadmin command:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; asadmin deploy target/weld-numberguess.war"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The reason the same artifact can be deployed to both JBoss AS and GlassFish, without any modifications, is because all of the features being used are part of the standard platform. And what a capable platform it has become!"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Deploying to Apache Tomcat"
msgstr "Apache Tomcat 6.0 の使用"

#. Tag: para
#, no-c-format
msgid "Servlet containers are not required to support Java EE services like CDI. However, you can use CDI in a servlet container like Tomcat by embedding a standalone CDI implementation such as Weld."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld comes with a servlet listener which bootstraps the CDI environment, registers the <literal>BeanManager</literal> in JNDI and provides injection into servlets. Basically, it emulates some of the work done by the Java EE container. (But you don&#39;t get enterprise features such as session beans and container-managed transactions.)"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Let&#39;s give the Weld servlet extension a spin on Apache Tomcat. First, you&#39;ll need to download Tomcat 6.0.18 or later from <ulink url=\"http://tomcat.apache.org/download-60.cgi\">tomcat.apache.org</ulink> and extract it."
msgstr "Tomcat 6.0.18 以降を <ulink url=\"http://tomcat.apache.org/download-60.cgi\">tomcat.apache.org</ulink> からダウンロードして展開する必要があります。例:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "$&#62; unzip apache-tomcat-6.0.18.zip"
msgstr ""
"<![CDATA[$ cd /Applications\n"
"$ unzip ~/apache-tomcat-6.0.18.zip]]>"

#. Tag: para
#, no-c-format
msgid "You have two choices for how you can deploy the application to Tomcat. You can deploy it by pushing the artifact to the hot deploy directory using Ant or you can deploy to the server across HTTP using a Maven plugin. The Ant approach doesn&#39;t require that you have Maven installed, so we&#39;ll start there. If you want to use Maven, you can just skip ahead."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Deploying with Ant"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In order for Ant to push the artifact to the Tomcat hot deploy directory, it needs to know where the Tomcat installation is located. Again, we need to set a property in the <literal>local.build.properties</literal> file in the examples directory of the Weld distribution. If you haven&#39;t yet created this file, do so now. Then assign the path of your Tomcat installation to the property key <literal>tomcat.home</literal>."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "tomcat.home=/path/to/apache-tomcat-6"
msgstr "tomcat.home=/Applications/apache-tomcat-6.0.18"

#. Tag: para
#, fuzzy, no-c-format
msgid "Now you&#39;re ready to deploy the numberguess example to Tomcat!"
msgstr "Tomcat への numberguess サンプルのデプロイ:"

#. Tag: para
#, no-c-format
msgid "Change to the <literal>examples/jsf/numberguess</literal> directory again and run the Ant <literal>deploy</literal> target for Tomcat:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd examples/jsf/numberguess\n"
"$&#62; ant tomcat.deploy"
msgstr ""
"$ cd examples/numberguess\n"
"ant deploy"

#. Tag: para
#, no-c-format
msgid "The Ant build script includes additional targets for Tomcat to deploy and undeploy the archive in either exploded or packaged format. They are the same target names used for JBoss AS, prefixed with &#34;tomcat.&#34;."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ant tomcat.restart</literal> - deploy the example in exploded format to Tomcat"
msgstr "<literal>ant tomcat.restart</literal> - サンプルを展開形式フォーマットでデプロイします"

#. Tag: para
#, no-c-format
msgid "<literal>ant tomcat.explode</literal> - update an exploded example, without restarting the deployment"
msgstr "<literal>ant tomcat.explode</literal> - デプロイを最初から行うのでなく、展開形式でデプロイされたサンプルを必要な部分のみを更新します"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ant tomcat.deploy</literal> - deploy the example in compressed jar format to Tomcat"
msgstr "<literal>ant tomcat.deploy</literal> - サンプルを圧縮 jar フォーマットでデプロイします"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ant tomcat.undeploy</literal> - remove the example from Tomcat"
msgstr "<literal>ant undeploy</literal> - サーバからサンプルを削除します"

#. Tag: para
#, no-c-format
msgid "If you haven&#39;t already, start Tomcat. You can either start Tomcat from a Linux shell:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd /path/to/apache-tomcat-6\n"
"$&#62; ./bin/start.sh"
msgstr "$ /Applications/apache-tomcat-6.0.18/bin/startup.sh"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd c:\\path\\to\\apache-tomcat-6\\bin\n"
"$&#62; start"
msgstr ""
"<![CDATA[$ cd /Applications\n"
"$ unzip ~/apache-tomcat-6.0.18.zip]]>"

#. Tag: para
#, no-c-format
msgid "Wait a few seconds for the application to deploy (or the application server to start) and see if you can figure out the most efficient approach to pinpoint the random number at the local URL <ulink url=\"http://localhost:8080/weld-numberguess\">http://localhost:8080/weld-numberguess</ulink>!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Deploying with Maven"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can also deploy the application to Tomcat using Maven. This section is a bit more advanced, so skip it unless you&#39;re itching to use Maven natively. Of course, you&#39;ll first need to make sure that you have Maven installed on your path, similar to how you setup Ant."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The Maven plugin communicates with Tomcat over HTTP, so it doesn&#39;t care where you have installed Tomcat. However, the plugin configuration assumes you are running Tomcat in its default configuration, with a hostname of localhost and port <literal>8080</literal>. The <literal>readme.txt</literal> file in the example directory has information about how to modify the Maven settings to accommodate a different setup."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To allow Maven to communicate with Tomcat over HTTP, edit the <literal>conf/tomcat-users.xml</literal> file in your Tomcat installation and add the following line:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&#60;user username=&#34;admin&#34; password=&#34;&#34; roles=&#34;manager&#34;/&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Restart Tomcat. You can now deploy the application to Tomcat with Maven using this command:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn compile war:exploded tomcat:exploded -Ptomcat"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Once the application is deployed, you can redeploy it using this command:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn tomcat:redeploy -Ptomcat"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>-Ptomcat</literal> argument activates the <literal>tomcat</literal> profile defined in the Maven POM (<literal>pom.xml</literal>). Among other things, this profile activates the Tomcat plugin."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Rather than shipping the container off to a standalone Tomcat installation, you can also execute the application in an embedded Tomcat 6 container:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn war:inplace tomcat:run -Ptomcat"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The advantage of using the embedded server is that changes to assets in <literal>src/main/webapp</literal> take effect immediately. If a change to a webapp configuration file is made, the application may automatically redeploy (depending on the plugin configuration). If you make a change to a classpath resource, you need to execute a build:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn compile war:inplace -Ptomcat"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There are several other Maven goals that you can use if you are hacking on the example, which are documented in the example&#39;s <literal>readme.txt</literal> file."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Deploying to Jetty"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Support for Jetty in the examples is a more recent addition. Since Jetty is traditionally used with Maven, there are no Ant targets. You must invoke the Maven build directly to deploy the examples to Jetty out of the box. Also, only the <literal>weld-numberguess</literal> example is configured for Jetty support at the time of writing."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you&#39;ve read through the entire Tomcat section, then you&#39;re all ready to go. The Maven build parallels the embedded Tomcat deployment. If not, don&#39;t worry. We&#39;ll still go over everything that you need to know again in this section."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The Maven POM (<literal>pom.xml</literal>) includes a profile named <literal>jetty</literal> that activates the Maven Jetty plugin, which you can use to start Jetty in embedded mode and deploy the application in place. You don&#39;t need anything else installed except to have the Maven command (<literal>mvn</literal>) on your path. The rest will be downloaded from the internet when the build is run."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To run the <literal>weld-numberguess</literal> example on Jetty, switch to the example directory and execute the <literal>inplace</literal> goal of the Maven war plugin followed by the <literal>run</literal> goal of the Maven Jetty plugin with the <literal>jetty</literal> profile enabled, as follows:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"$&#62; cd examples/jsf/numberguess\n"
"$&#62; mvn war:inplace jetty:run -Pjetty"
msgstr ""
"<![CDATA[cd examples/wicket/numberguess\n"
"mvn eclipse:eclipse]]>"

#. Tag: para
#, no-c-format
msgid "The log output of Jetty will be shown in the console. Once Jetty reports that the application has deployed, you can access it at the following local URL: <ulink url=\"http://localhost:9090/weld-numberguess\">http://localhost:9090/weld-numberguess</ulink>. The port is defined in the Maven Jetty plugin configuration within the <literal>jetty</literal> profile."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Any changes to assets in <literal>src/main/webapp</literal> take effect immediately. If a change to a webapp configuration file is made, the application may automatically redeploy. The redeploy behavior can be fined-tuned in the plugin configuration. If you make a change to a classpath resource, you need to execute a build and the <literal>inplace</literal> goal of the Maven war plugin, again with the <literal>jetty</literal> profile enabled."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn compile war:inplace -Pjetty"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>war:inplace</literal> goal copies the compiled classes and jars inside <literal>src/main/webapp</literal>, under <literal>WEB-INF/classes</literal> and <literal>WEB-INF/lib</literal>, respectively, mixing source and compiled files. However, the build does work around these temporary files by excluding them from the packaged war and cleaning them during the Maven clean phase."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You have two options if you want to run the example on Jetty from the IDE. You can either install the m2eclispe[link] plugin and run the goals as described above. Your other option is to start the Jetty container from a Java application."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "First, initialize the Eclipse project:"
msgstr "Eclipse プロジェクトの作成"

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn clean eclipse:clean eclipse:eclipse -Pjetty-ide"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Next, assemble all the necessary resources under <literal>src/main/webapp</literal>:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$&#62; mvn war:inplace -Pjetty-ide"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now, you are ready to run the server in Eclipse. Import the project into your Eclipse workspace using &#34;Import Existing Project into Workspace. Then, find the start class in <literal>src/jetty/java</literal> and run its main method as a Java Application. Jetty will launch. You can view the application at the following local URL: <ulink url=\"http://localhost:8080\">http://localhost:8080</ulink>. Pay particular attention to the port in the URL and the lack of a trailing context path."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now that you have gotten the starter applications deployed on the server of your choice, you probably want to know a little bit about how they actually work."
msgstr ""

#~ msgid "Getting started with Web Beans, the Reference Implementation of JSR-299"
#~ msgstr "JSR-299 参照実装 Web Beans を始めよう"

#~ msgid "The Web Beans is being developed at <ulink url=\"http://seamframework.org/WebBeans\">the Seam project</ulink>. You can download the latest developer release of Web Beans from the <ulink url=\"http://seamframework.org/Download\">the downloads page</ulink>."
#~ msgstr "Web Beans は <ulink url=\"http://seamframework.org/WebBeans\"> Seam プロジェクト</ulink> で開発されています。Web Beans の開発者向け最新リリースは <ulink url=\"http://seamframework.org/Download\">ダウンロードページ</ulink> からダウンロードすることができます。"

#~ msgid "Web Beans comes with a two deployable example applications: <literal>webbeans-numberguess</literal>, a war example, containing only simple beans, and <literal>webbeans-translator</literal> an ear example, containing enterprise beans. There are also two variations on the numberguess example, the tomcat example (suitable for deployment to Tomcat) and the jsf2 example, which you can use if you are running JSF2. To run the examples you'll need the following:"
#~ msgstr "Web Beans は、2つのデプロイ可能なサンプルアプリケーションが一緒に提供されます:簡単な bean のみを含む war サンプルの <literal>webbeans-numberguess</literal> とエンタープライズ beanを含む ear サンプルの <literal>webbeans-translator</literal> です。また numberguess サンプルには2種類のサンプルがあります。Tomcat サンプル(Tomcatへのデプロイに適している)と、JSF2 を実行させる場合に使用できる JSF2 サンプルです。サンプルを実行するためには、以下のものが必要です:"

#~ msgid "Ant 1.7.0."
#~ msgstr "Ant 1.7.0"

#~ msgid "You'll need to download JBoss AS 5.0.1.GA from <ulink url=\"http://www.jboss.org/jbossas/downloads/\">jboss.org</ulink>, and unzip it. For example:"
#~ msgstr "JBoss AS 5.0.1.GA は <ulink url=\"http://www.jboss.org/jbossas/downloads/\">jboss.org</ulink> からダウンロードして展開する必要があります。例:"

#~ msgid ""
#~ "<![CDATA[$ cd /Applications\n"
#~ "$ unzip ~/jboss-5.0.1.GA.zip]]>"
#~ msgstr ""
#~ "<![CDATA[$ cd /Applications\n"
#~ "$ unzip ~/jboss-5.0.1.GA.zip]]>"

#~ msgid "Next, download Web Beans from <ulink url=\"http://seamframework.org/Download\">seamframework.org</ulink>, and unzip it. For example"
#~ msgstr "次に、Web Beans を <ulink url=\"http://seamframework.org/Download\">seamframework.org</ulink> からダウンロードして展開してください。例:"

#~ msgid ""
#~ "<![CDATA[$ cd ~/\n"
#~ "$ unzip ~/webbeans-$VERSION.zip]]>"
#~ msgstr ""
#~ "<![CDATA[$ cd ~/\n"
#~ "$ unzip ~/webbeans-$VERSION.zip]]>"

#~ msgid "Next, we need to tell Web Beans where JBoss is located. Edit <literal>jboss-as/build.properties</literal> and set the <literal>jboss.home</literal> property. For example:"
#~ msgstr "次に、Web Beans にどこに JBoss が置かれているのかを指定する必要があります。<literal>jboss-as/build.properties</literal> を編集して <literal>jboss.home</literal> プロパティを設定してください。例:"

#~ msgid "To install Web Beans, you'll need Ant 1.7.0 installed, and the <literal>ANT_HOME</literal> environment variable set. For example:"
#~ msgstr "Web Beans をインストールするためには、Ant 1.7.0 をインストールし、<literal>ANT_HOME</literal> 環境変数を設定する必要があります。例:"

#~ msgid ""
#~ "$ unzip apache-ant-1.7.0.zip\n"
#~ "$ export ANT_HOME=~/apache-ant-1.7.0"
#~ msgstr ""
#~ "$ unzip apache-ant-1.7.0.zip\n"
#~ "$ export ANT_HOME=~/apache-ant-1.7.0"

#~ msgid "Then, you can install the update. The update script will use Maven to download Web Beans automatically."
#~ msgstr "これで最新版をインストールすることができます。更新スクリプトは、Web Beans を自動的にダウンロードするために Maven を使用します。"

#~ msgid ""
#~ "$ cd webbeans-$VERSION/jboss-as\n"
#~ "$ ant update"
#~ msgstr ""
#~ "$ cd webbeans-$VERSION/jboss-as\n"
#~ "$ ant update"

#~ msgid "The build scripts for the examples offer a number of targets for JBoss AS, these are:"
#~ msgstr "サンプルのためのビルドスクリプトには、JBoss AS への多くのターゲットが定義されています:"

#~ msgid "To deploy the numberguess example:"
#~ msgstr "numberguess サンプルのデプロイ: "

#~ msgid "Start JBoss AS:"
#~ msgstr "JBoss AS を起動してください:"

#~ msgid "If you use Windows, use the <literal>run.bat</literal>script."
#~ msgstr "もし Windows を使用しているのであれば、<literal>run.bat</literal> バッチコマンドを使用してください。"

#~ msgid "Wait for the application to deploy, and enjoy hours of fun at <ulink url=\"http://localhost:8080/webbeans-numberguess\"></ulink>!"
#~ msgstr "アプリケーションがデプロイされるのを待って、<ulink url=\"http://localhost:8080/webbeans-numberguess\"></ulink> にアクセスして楽しんでください!"

#~ msgid "Web Beans includes a second simple example that will translate your text into Latin. The numberguess example is a war example, and uses only simple beans; the translator example is an ear example, and includes enterprise beans, packaged in an EJB module. To try it out:"
#~ msgstr "Web Beans は、テキストをラテン語に翻訳する２つ目の簡単なサンプルを含んでいます。numberguess サンプルは、war 形式のサンプルで、簡単な bean のみを使用しています。translator サンプルは、ear 形式のサンプルで、エンタープライズ beansを含み、EJB モジュールにパッケージされています。試してみましょう:"

#~ msgid "Wait for the application to deploy, and visit <ulink url=\"http://localhost:8080/webbeans-translator\"></ulink>!"
#~ msgstr "アプリケーションがデプロイされるの待って、<ulink url=\"http://localhost:8080/webbeans-translator\"></ulink> にアクセスしてください!"

#~ msgid "Next, we need to tell Web Beans where Tomcat is located. Edit <literal>jboss-as/build.properties</literal> and set the <literal>tomcat.home</literal> property. For example:"
#~ msgstr "次に、Web Beans にどこに Tomcat  が置かれているのかを指定する必要があります。<literal>jboss-as/build.properties</literal>  を編集して  <literal>tomcat.home</literal> プロパティを設定してください。例:"

#~ msgid "The build scripts for the examples offer a number of targets for Tomcat, these are:"
#~ msgstr "サンプルのためのビルドスクリプトには、Tomcat への多くのターゲットが定義されています:"

#, fuzzy
#~ msgid "<literal>ant tomcat.undeploy</literal> - remove the example (in compressed jar format) from the server"
#~ msgstr "<literal>ant tomcat.deploy</literal> - サンプルを圧縮 jar フォーマットでデプロイします"

#, fuzzy
#~ msgid "<literal>ant tomcat.unexplode</literal> - remove the example (in exploded format) from the server"
#~ msgstr "<literal>ant tomcat.undeploy</literal> - サーバからサンプルを削除します"

#~ msgid "<literal>ant tomcat.clean</literal> - clean the example"
#~ msgstr "<literal>ant tomcat.clean</literal> - サンプルをクリーンします"

#~ msgid ""
#~ "$ cd examples/tomcat\n"
#~ "ant tomcat.deploy"
#~ msgstr ""
#~ "$ cd examples/tomcat\n"
#~ "ant tomcat.deploy"

#~ msgid "Start Tomcat:"
#~ msgstr "Tomcat を起動してください:"

#~ msgid "If you use Windows, use the <literal>startup.bat</literal>script."
#~ msgstr "もし Windows を使用しているのであれば、<literal>startup.bat</literal> バッチコマンドを使用してください。"

#~ msgid "TODO"
#~ msgstr "TODO"

#~ msgid "The numberguess example"
#~ msgstr "numberguess サンプル"

#~ msgid "In the numberguess application you get given 10 attempts to guess a number between 1 and 100. After each attempt, you will be told whether you are too high, or too low."
#~ msgstr "numberguess アプリケーションは、1 から100 の間の数字を 10 回以内で推測して当てるというものです。各回の推測の後で、その値より高いか低いかが告げられます。"

#~ msgid "The numberguess example is comprised of a number of Web Beans, configuration files, and Facelet JSF pages, packaged as a war. Let's start with the configuration files."
#~ msgstr "numberguess サンプルには、多くのWeb Beans と構成ファイル、Facelet JSFページから構成され、war 形式でパッケージされます。構成ファイルから説明を始めましょう。"

#~ msgid "All the configuration files for this example are located in <literal>WEB-INF/</literal>, which is stored in <literal>WebContent</literal> in the source tree. First, we have <literal>faces-config.xml</literal>, in which we tell JSF to use Facelets:"
#~ msgstr "このサンプルの構成ファイルはすべて、<literal>WEB-INF/</literal> に配置されます。ソースツリー上では <literal>WebContent</literal> に格納されています。まず最初に、<literal>faces-config.xml</literal> ファイルがあり、ここで JSF に Facelets を使用するように設定します:"

#~ msgid ""
#~ "<![CDATA[<?xml version='1.0' encoding='UTF-8'?>\n"
#~ "<faces-config version=\"1.2\"\n"
#~ "              xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
#~ "              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "              xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd\">\n"
#~ "    \n"
#~ "    <application>\n"
#~ "        <view-handler>com.sun.facelets.FaceletViewHandler</view-handler>\n"
#~ "    </application>\n"
#~ "\n"
#~ "</faces-config>]]>"
#~ msgstr ""
#~ "<![CDATA[<?xml version='1.0' encoding='UTF-8'?>\n"
#~ "<faces-config version=\"1.2\"\n"
#~ "              xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
#~ "              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "              xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd\">\n"
#~ "    \n"
#~ "    <application>\n"
#~ "        <view-handler>com.sun.facelets.FaceletViewHandler</view-handler>\n"
#~ "    </application>\n"
#~ "\n"
#~ "</faces-config>]]>"

#~ msgid "There is an empty <literal>web-beans.xml</literal> file, which marks this application as a Web Beans application."
#~ msgstr "次に、空の <literal>web-beans.xml</literal> ファイルがあります。これはこのアプリケーションが Web Beans アプリケーションである印を付けて指定しています。"

#~ msgid "Finally there is <literal>web.xml</literal>:"
#~ msgstr "最後に <literal>web.xml</literal> があります:"

#~ msgid ""
#~ "<programlistingco> <areaspec> <area id=\"faces.servlet\" coords=\"12\"/> <area id=\"faces.servlet.mapping\" coords=\"18\"/> <area id=\"faces.default.suffix\" coords=\"23\"/> <area id=\"session.timeout\" coords=\"28\"/> <area id=\"webbeans.listener\" coords=\"32\"/> </areaspec> <programlisting><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
#~ "\n"
#~ "<web-app version=\"2.5\"\n"
#~ "    xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
#~ "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n"
#~ "   \n"
#~ "   <display-name>Web Beans Numbergues example</display-name>\n"
#~ "\n"
#~ "   <!-- JSF -->\n"
#~ "\n"
#~ "   <servlet>\n"
#~ "      <servlet-name>Faces Servlet</servlet-name>\n"
#~ "      <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>\n"
#~ "      <load-on-startup>1</load-on-startup>\n"
#~ "   </servlet>\n"
#~ "\n"
#~ "   <servlet-mapping>\n"
#~ "      <servlet-name>Faces Servlet</servlet-name>\n"
#~ "      <url-pattern>*.jsf</url-pattern>\n"
#~ "   </servlet-mapping>\n"
#~ "   \n"
#~ "   <context-param>\n"
#~ "      <param-name>javax.faces.DEFAULT_SUFFIX</param-name>\n"
#~ "      <param-value>.xhtml</param-value>\n"
#~ "   </context-param>\n"
#~ "\n"
#~ "   <session-config>\n"
#~ "      <session-timeout>10</session-timeout>\n"
#~ "   </session-config>\n"
#~ "\n"
#~ "</web-app>]]></programlisting> <calloutlist> <callout arearefs=\"faces.servlet\"> <para> Enable and load the JSF servlet </para> </callout> <callout arearefs=\"faces.servlet.mapping\"> <para> Configure requests to <literal>.jsf</literal> pages to be handled by JSF </para> </callout> <callout arearefs=\"faces.default.suffix\"> <para> Tell JSF that we will be giving our source files (facelets) an extension of <literal>.xhtml</literal> </para> </callout> <callout arearefs=\"session.timeout\"> <para> Configure a session timeout of 10 minutes </para> </callout> </calloutlist> </programlistingco> <note> <para> Whilst this demo is a JSF demo, you can use Web Beans with any Servlet based web framework. </para> </note> <para> Let's take a look at the Facelet view: </para> <programlistingco> <areaspec> <area id=\"template\" coords=\"8\"/> <area id=\"messages2\" coords=\"12\"/> <area id=\"instructions\" coords=\"19\"/> <area id=\"guess\" coords=\"25\"/> <area id=\"validator\" coords=\"30\"/> <area id=\"submit\" coords=\"33\"/> </areaspec> <programlisting><![CDATA[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
#~ "<html xmlns=\"http://www.w3.org/1999/xhtml\"\n"
#~ "    xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n"
#~ "    xmlns:h=\"http://java.sun.com/jsf/html\"\n"
#~ "    xmlns:f=\"http://java.sun.com/jsf/core\"\n"
#~ "    xmlns:s=\"http://jboss.com/products/seam/taglib\">\n"
#~ "\n"
#~ "  <ui:composition template=\"template.xhtml\">\n"
#~ "    <ui:define name=\"content\">\n"
#~ "       <h1>Guess a number...</h1>\n"
#~ "       <h:form id=\"NumberGuessMain\">\n"
#~ "          <div style=\"color: red\">\n"
#~ "             <h:messages id=\"messages\" globalOnly=\"false\"/>\n"
#~ "             <h:outputText id=\"Higher\" value=\"Higher!\" rendered=\"#{game.number gt game.guess and game.guess ne 0}\"/>\n"
#~ "             <h:outputText id=\"Lower\" value=\"Lower!\" rendered=\"#{game.number lt game.guess and game.guess ne 0}\"/>\n"
#~ "          </div>\n"
#~ "   \n"
#~ "          <div>\n"
#~ "             I'm thinking of a number between #{game.smallest} and #{game.biggest}.\n"
#~ "             You have #{game.remainingGuesses} guesses.\n"
#~ "          </div>\n"
#~ "     \n"
#~ "          <div>\n"
#~ "             Your guess: \n"
#~ "             <h:inputText id=\"inputGuess\" \n"
#~ "                          value=\"#{game.guess}\" \n"
#~ "                          required=\"true\" \n"
#~ "                          size=\"3\" \n"
#~ "                          disabled=\"#{game.number eq game.guess}\">\n"
#~ "                <f:validateLongRange maximum=\"#{game.biggest}\" \n"
#~ "                                     minimum=\"#{game.smallest}\"/>\n"
#~ "             </h:inputText>\n"
#~ "            <h:commandButton id=\"GuessButton\"  \n"
#~ "                             value=\"Guess\" \n"
#~ "                             action=\"#{game.check}\" \n"
#~ "                             disabled=\"#{game.number eq game.guess}\"/>\n"
#~ "          </div>\n"
#~ "          <div>\n"
#~ "            <h:commandButton id=\"RestartButton\" value=\"Reset\" action=\"#{game.reset}\" immediate=\"true\" />\n"
#~ "          </div>\n"
#~ "       </h:form>\n"
#~ "    </ui:define>\n"
#~ "  </ui:composition>\n"
#~ "</html>]]></programlisting> <calloutlist> <callout arearefs=\"template\"> <para> Facelets is a templating language for JSF, here we are wrapping our page in a template which defines the header. </para> </callout> <callout arearefs=\"messages2\"> <para> There are a number of messages which can be sent to the user, \"Higher!\", \"Lower!\" and \"Correct!\" </para> </callout> <callout arearefs=\"instructions\"> <para> As the user guesses, the range of numbers they can guess gets smaller - this sentance changes to make sure they know what range to guess in. </para> </callout> <callout arearefs=\"guess\"> <para> This input field is bound to a Web Bean, using the value expression. </para> </callout> <callout arearefs=\"validator\"> <para> A range validator is used to make sure the user doesn't accidentally input a number outside of the range in which they can guess - if the validator wasn't here, the user might use up a guess on an out of range number. </para> </callout> <callout arearefs=\"submit\"> <para> And, of course, there must be a way for the user to send their guess to the server. Here we bind to an action method on the Web Bean. </para> </callout> </calloutlist> </programlistingco>"
#~ msgstr ""
#~ "<programlistingco> <areaspec> <area id=\"faces.servlet\" coords=\"12\"/> <area id=\"faces.servlet.mapping\" coords=\"18\"/> <area id=\"faces.default.suffix\" coords=\"23\"/> <area id=\"session.timeout\" coords=\"28\"/> <area id=\"webbeans.listener\" coords=\"32\"/> </areaspec> <programlisting><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
#~ "\n"
#~ "<web-app version=\"2.5\"\n"
#~ "    xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
#~ "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n"
#~ "   \n"
#~ "   <display-name>Web Beans Numbergues example</display-name>\n"
#~ "\n"
#~ "   <!-- JSF -->\n"
#~ "\n"
#~ "   <servlet>\n"
#~ "      <servlet-name>Faces Servlet</servlet-name>\n"
#~ "      <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>\n"
#~ "      <load-on-startup>1</load-on-startup>\n"
#~ "   </servlet>\n"
#~ "\n"
#~ "   <servlet-mapping>\n"
#~ "      <servlet-name>Faces Servlet</servlet-name>\n"
#~ "      <url-pattern>*.jsf</url-pattern>\n"
#~ "   </servlet-mapping>\n"
#~ "   \n"
#~ "   <context-param>\n"
#~ "      <param-name>javax.faces.DEFAULT_SUFFIX</param-name>\n"
#~ "      <param-value>.xhtml</param-value>\n"
#~ "   </context-param>\n"
#~ "\n"
#~ "   <session-config>\n"
#~ "      <session-timeout>10</session-timeout>\n"
#~ "   </session-config>\n"
#~ "\n"
#~ "</web-app>]]></programlisting> <calloutlist> <callout arearefs=\"faces.servlet\"> <para> JSF サーブレットを有効にしてロードします </para> </callout> <callout arearefs=\"faces.servlet.mapping\"> <para> <literal>.jsf</literal> ページへのリクエストを JSF で処理するように設定します </para> </callout> <callout arearefs=\"faces.default.suffix\"> <para> JSF に対してソースファイル (Facelets) に <literal>.xhtml</literal> の拡張子を付与することを指定します  </para> </callout> <callout arearefs=\"session.timeout\"> <para> セッションタイムアウトを 10 分に設定します </para> </callout> </calloutlist> </programlistingco> <note> <para> このデモは JSF デモであるので、どんなサーブレットベース の Web フレームワークとでも一緒に Web Beans を使用することができます。</para> </note> <para> Facelets ビューを見てみましょう: </para> <programlistingco> <areaspec> <area id=\"template\" coords=\"8\"/> <area id=\"messages2\" coords=\"12\"/> <area id=\"instructions\" coords=\"19\"/> <area id=\"guess\" coords=\"25\"/> <area id=\"validator\" coords=\"30\"/> <area id=\"submit\" coords=\"33\"/> </areaspec> <programlisting><![CDATA[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
#~ "<html xmlns=\"http://www.w3.org/1999/xhtml\"\n"
#~ "    xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n"
#~ "    xmlns:h=\"http://java.sun.com/jsf/html\"\n"
#~ "    xmlns:f=\"http://java.sun.com/jsf/core\"\n"
#~ "    xmlns:s=\"http://jboss.com/products/seam/taglib\">\n"
#~ "\n"
#~ "  <ui:composition template=\"template.xhtml\">\n"
#~ "    <ui:define name=\"content\">\n"
#~ "       <h1>Guess a number...</h1>\n"
#~ "       <h:form id=\"NumberGuessMain\">\n"
#~ "          <div style=\"color: red\">\n"
#~ "             <h:messages id=\"messages\" globalOnly=\"false\"/>\n"
#~ "             <h:outputText id=\"Higher\" value=\"Higher!\" rendered=\"#{game.number gt game.guess and game.guess ne 0}\"/>\n"
#~ "             <h:outputText id=\"Lower\" value=\"Lower!\" rendered=\"#{game.number lt game.guess and game.guess ne 0}\"/>\n"
#~ "          </div>\n"
#~ "   \n"
#~ "          <div>\n"
#~ "             I'm thinking of a number between #{game.smallest} and #{game.biggest}.\n"
#~ "             You have #{game.remainingGuesses} guesses.\n"
#~ "          </div>\n"
#~ "     \n"
#~ "          <div>\n"
#~ "             Your guess: \n"
#~ "             <h:inputText id=\"inputGuess\" \n"
#~ "                          value=\"#{game.guess}\" \n"
#~ "                          required=\"true\" \n"
#~ "                          size=\"3\" \n"
#~ "                          disabled=\"#{game.number eq game.guess}\">\n"
#~ "                <f:validateLongRange maximum=\"#{game.biggest}\" \n"
#~ "                                     minimum=\"#{game.smallest}\"/>\n"
#~ "             </h:inputText>\n"
#~ "            <h:commandButton id=\"GuessButton\"  \n"
#~ "                             value=\"Guess\" \n"
#~ "                             action=\"#{game.check}\" \n"
#~ "                             disabled=\"#{game.number eq game.guess}\"/>\n"
#~ "          </div>\n"
#~ "          <div>\n"
#~ "            <h:commandButton id=\"RestartButton\" value=\"Reset\" action=\"#{game.reset}\" immediate=\"true\" />\n"
#~ "          </div>\n"
#~ "       </h:form>\n"
#~ "    </ui:define>\n"
#~ "  </ui:composition>\n"
#~ "</html>]]></programlisting> <calloutlist> <callout arearefs=\"template\"> <para> Facelets は、JSF のテンプレート言語です。ここではヘッダを定義するテンプレートでページを囲んでいます。</para> </callout> <callout arearefs=\"messages2\"> <para> ユーザに送られる「もっと大きい!」や「もっと小さい!」、「正しい!」 の多くのメッセージがあります。 </para> </callout> <callout arearefs=\"instructions\"> <para> ユーザが推測するときに、推測できる数字の幅は徐々に小さくなります - この文が変わることによりどの範囲で推測するのかを確認することができます。</para> </callout> <callout arearefs=\"guess\"> <para> この入力フィールドは、式表現を使用して Web Bean に括り付けられます。</para> </callout> <callout arearefs=\"validator\"> <para> 範囲バリデータを使用してユーザがそこで推測できる範囲外にある数値を誤って入力していないことを確認します - もしバリデータがここになかったら、ユーザは範囲外の数値で推測を使い果たしてしまうかもしれません。</para> </callout> <callout arearefs=\"submit\"> <para> そして、もちろん、ユーザがサーバに推測した値を送信する方法がなければなりません。ここで、Web Bean のアクションメソッドに括り付けます。</para> </callout> </calloutlist> </programlistingco>"

#~ msgid "The example exists of 4 classes, the first two of which are binding types. First, there is the <literal>@Random</literal> binding type, used for injecting a random number:"
#~ msgstr "サンプルには４つのクラスが存在します。その内の最初の２つはバインディングタイプです。１つは、ランダムな数字をインジェクトするのに使用される <literal>@Random</literal> バインディングタイプです:"

#~ msgid ""
#~ "<![CDATA[@Target( { TYPE, METHOD, PARAMETER, FIELD })\n"
#~ "@Retention(RUNTIME)\n"
#~ "@Documented\n"
#~ "@BindingType\n"
#~ "public @interface Random {}]]>"
#~ msgstr ""
#~ "<![CDATA[@Target( { TYPE, METHOD, PARAMETER, FIELD })\n"
#~ "@Retention(RUNTIME)\n"
#~ "@Documented\n"
#~ "@BindingType\n"
#~ "public @interface Random {}]]>"

#~ msgid "There is also the <literal>@MaxNumber</literal> binding type, used for injecting the maximum number that can be injected:"
#~ msgstr "もう１つは、インジェクトされることができる最大数をインジェクトするのに使用される使われる <literal>@MaxNumber</literal> バインディングタイプです:"

#~ msgid ""
#~ "<![CDATA[@Target( { TYPE, METHOD, PARAMETER, FIELD })\n"
#~ "@Retention(RUNTIME)\n"
#~ "@Documented\n"
#~ "@BindingType\n"
#~ "public @interface MaxNumber {}\n"
#~ "]]>"
#~ msgstr ""
#~ "<![CDATA[@Target( { TYPE, METHOD, PARAMETER, FIELD })\n"
#~ "@Retention(RUNTIME)\n"
#~ "@Documented\n"
#~ "@BindingType\n"
#~ "public @interface MaxNumber {}\n"
#~ "]]>"

#~ msgid "The <literal>Generator</literal> class is responsible for creating the random number, via a producer method. It also exposes the maximum possible number via a producer method:"
#~ msgstr "<literal>Generator</literal>  クラスは、プロデューサメソッドによってランダムな数字を生成することに責任を持ちます。またプロデューメソッドによって可能な最大数を公開します:"

#~ msgid ""
#~ "<![CDATA[@ApplicationScoped\n"
#~ "public class Generator {\n"
#~ "   \n"
#~ "   private java.util.Random random = new java.util.Random( System.currentTimeMillis() );\n"
#~ "   \n"
#~ "   private int maxNumber = 100;\n"
#~ "   \n"
#~ "   java.util.Random getRandom()\n"
#~ "   {\n"
#~ "      return random;\n"
#~ "   }\n"
#~ "   \n"
#~ "   @Produces @Random int next() { \n"
#~ "      return getRandom().nextInt(maxNumber); \n"
#~ "   }\n"
#~ "   \n"
#~ "   @Produces @MaxNumber int getMaxNumber()\n"
#~ "   {\n"
#~ "      return maxNumber;\n"
#~ "   }\n"
#~ "\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@ApplicationScoped\n"
#~ "public class Generator {\n"
#~ "   \n"
#~ "   private java.util.Random random = new java.util.Random( System.currentTimeMillis() );\n"
#~ "   \n"
#~ "   private int maxNumber = 100;\n"
#~ "   \n"
#~ "   java.util.Random getRandom()\n"
#~ "   {\n"
#~ "      return random;\n"
#~ "   }\n"
#~ "   \n"
#~ "   @Produces @Random int next() { \n"
#~ "      return getRandom().nextInt(maxNumber); \n"
#~ "   }\n"
#~ "   \n"
#~ "   @Produces @MaxNumber int getMaxNumber()\n"
#~ "   {\n"
#~ "      return maxNumber;\n"
#~ "   }\n"
#~ "\n"
#~ "}]]>"

#~ msgid "You'll notice that the <literal>Generator</literal> is application scoped; therefore we don't get a different random each time."
#~ msgstr "<literal>Generator</literal>  がアプリケーションスコープであるということに気づくでしょう。 それゆえに毎回異なるランダムな数字を取得するようなことはしません。"

#~ msgid "The final Web Bean in the application is the session scoped <literal>Game</literal>."
#~ msgstr "アプリケーションの最後の Web Bean は、セッションスコープの <literal>Game</literal> です。"

#~ msgid "You'll note that we've used the <literal>@Named</literal> annotation, so that we can use the bean through EL in the JSF page. Finally, we've used constructor injection to initialize the game with a random number. And of course, we need to tell the player when they've won, so we give feedback with a <literal>FacesMessage</literal>."
#~ msgstr "<literal>@Named</literal> アノテーションを使用することによって、JSF ページで EL によって bean を扱うことができるようにしています。最後に、ランダムな数を持つゲームを初期化するためにコンストラクタインジェクションを使用しています。そしてもちろん、プレーヤにいつ勝ったかを告げる必要があるので、<literal>FacesMessage</literal> でフィードバックを行います。"

#~ msgid ""
#~ "<![CDATA[package org.jboss.webbeans.examples.numberguess;\n"
#~ "\n"
#~ "\n"
#~ "import javax.annotation.PostConstruct;\n"
#~ "import javax.faces.application.FacesMessage;\n"
#~ "import javax.faces.context.FacesContext;\n"
#~ "import javax.webbeans.AnnotationLiteral;\n"
#~ "import javax.webbeans.Current;\n"
#~ "import javax.webbeans.Initializer;\n"
#~ "import javax.webbeans.Named;\n"
#~ "import javax.webbeans.SessionScoped;\n"
#~ "import javax.webbeans.manager.Manager;\n"
#~ "\n"
#~ "@Named\n"
#~ "@SessionScoped\n"
#~ "public class Game\n"
#~ "{\n"
#~ "   private int number;\n"
#~ "   \n"
#~ "   private int guess;\n"
#~ "   private int smallest;\n"
#~ "   private int biggest;\n"
#~ "   private int remainingGuesses;\n"
#~ "   \n"
#~ "   @Current Manager manager;\n"
#~ "   \n"
#~ "   public Game()\n"
#~ "   {\n"
#~ "   }\n"
#~ "   \n"
#~ "   @Initializer\n"
#~ "   Game(@MaxNumber int maxNumber)\n"
#~ "   {      \n"
#~ "      this.biggest = maxNumber;\n"
#~ "   }\n"
#~ "\n"
#~ "   public int getNumber()\n"
#~ "   {\n"
#~ "      return number;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getGuess()\n"
#~ "   {\n"
#~ "      return guess;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public void setGuess(int guess)\n"
#~ "   {\n"
#~ "      this.guess = guess;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getSmallest()\n"
#~ "   {\n"
#~ "      return smallest;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getBiggest()\n"
#~ "   {\n"
#~ "      return biggest;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getRemainingGuesses()\n"
#~ "   {\n"
#~ "      return remainingGuesses;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public String check()\n"
#~ "   {\n"
#~ "      if (guess>number)\n"
#~ "      {\n"
#~ "         biggest = guess - 1;\n"
#~ "      }\n"
#~ "      if (guess<number)\n"
#~ "      {\n"
#~ "         smallest = guess + 1;\n"
#~ "      }\n"
#~ "      if (guess == number)\n"
#~ "      {\n"
#~ "         FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Correct!\"));\n"
#~ "      }\n"
#~ "      remainingGuesses--;\n"
#~ "      return null;\n"
#~ "   }\n"
#~ "   \n"
#~ "   @PostConstruct\n"
#~ "   public void reset()\n"
#~ "   {\n"
#~ "      this.smallest = 0;\n"
#~ "      this.guess = 0;\n"
#~ "      this.remainingGuesses = 10;\n"
#~ "      this.number = manager.getInstanceByType(Integer.class, new AnnotationLiteral<Random>(){});\n"
#~ "   }\n"
#~ "   \n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[package org.jboss.webbeans.examples.numberguess;\n"
#~ "\n"
#~ "\n"
#~ "import javax.annotation.PostConstruct;\n"
#~ "import javax.faces.application.FacesMessage;\n"
#~ "import javax.faces.context.FacesContext;\n"
#~ "import javax.webbeans.AnnotationLiteral;\n"
#~ "import javax.webbeans.Current;\n"
#~ "import javax.webbeans.Initializer;\n"
#~ "import javax.webbeans.Named;\n"
#~ "import javax.webbeans.SessionScoped;\n"
#~ "import javax.webbeans.manager.Manager;\n"
#~ "\n"
#~ "@Named\n"
#~ "@SessionScoped\n"
#~ "public class Game\n"
#~ "{\n"
#~ "   private int number;\n"
#~ "   \n"
#~ "   private int guess;\n"
#~ "   private int smallest;\n"
#~ "   private int biggest;\n"
#~ "   private int remainingGuesses;\n"
#~ "   \n"
#~ "   @Current Manager manager;\n"
#~ "   \n"
#~ "   public Game()\n"
#~ "   {\n"
#~ "   }\n"
#~ "   \n"
#~ "   @Initializer\n"
#~ "   Game(@MaxNumber int maxNumber)\n"
#~ "   {      \n"
#~ "      this.biggest = maxNumber;\n"
#~ "   }\n"
#~ "\n"
#~ "   public int getNumber()\n"
#~ "   {\n"
#~ "      return number;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getGuess()\n"
#~ "   {\n"
#~ "      return guess;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public void setGuess(int guess)\n"
#~ "   {\n"
#~ "      this.guess = guess;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getSmallest()\n"
#~ "   {\n"
#~ "      return smallest;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getBiggest()\n"
#~ "   {\n"
#~ "      return biggest;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public int getRemainingGuesses()\n"
#~ "   {\n"
#~ "      return remainingGuesses;\n"
#~ "   }\n"
#~ "   \n"
#~ "   public String check()\n"
#~ "   {\n"
#~ "      if (guess>number)\n"
#~ "      {\n"
#~ "         biggest = guess - 1;\n"
#~ "      }\n"
#~ "      if (guess<number)\n"
#~ "      {\n"
#~ "         smallest = guess + 1;\n"
#~ "      }\n"
#~ "      if (guess == number)\n"
#~ "      {\n"
#~ "         FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Correct!\"));\n"
#~ "      }\n"
#~ "      remainingGuesses--;\n"
#~ "      return null;\n"
#~ "   }\n"
#~ "   \n"
#~ "   @PostConstruct\n"
#~ "   public void reset()\n"
#~ "   {\n"
#~ "      this.smallest = 0;\n"
#~ "      this.guess = 0;\n"
#~ "      this.remainingGuesses = 10;\n"
#~ "      this.number = manager.getInstanceByType(Integer.class, new AnnotationLiteral<Random>(){});\n"
#~ "   }\n"
#~ "   \n"
#~ "}]]>"

#~ msgid "The numberguess example in Tomcat"
#~ msgstr "Tomcat での numberguess サンプル"

#~ msgid "The numberguess for Tomcat differs in a couple of ways. Firstly, Web Beans should be deployed as a Web Application library in <literal>WEB-INF/lib</literal>. For your convenience we provide a single jar suitable for running Web Beans in any servlet container <literal>webbeans-servlet.jar</literal>."
#~ msgstr "Tomcat での numberguess は、いくつかの点で異なります。第一に、Web Beans は、<literal>WEB-INF/lib</literal> に Web アプリケーションライブラリとしてデプロイされる必要があります。便宜を図るため、どんなサーブレットコンテナでも Web Beans を実行させるのに適したであるので、単一の jar の <literal>webbeans-servlet.jar</literal> を提供します。"

#~ msgid "Of course, you must also include JSF and EL, as well common annotations (<literal>jsr250-api.jar</literal>) which a JEE server includes by default."
#~ msgstr "もちろん、JEEサーバにデフォルトで含まれているコモンアノテーション (<literal>jsr250-api.jar</literal>) と同様に、JSF と EL も含める必要があります。"

#~ msgid "Secondly, we need to explicitly specify the servlet listener (used to boot Web Beans, and control it's interaction with requests) in <literal>web.xml</literal>:"
#~ msgstr "第二に、<literal>web.xml</literal> に明示的にサーブレットリスナーを指定する必要があります(Web Beans をブートするのに使用され、リクエストとの相互作用を制御します):"

#~ msgid ""
#~ "<![CDATA[<listener>\n"
#~ "   <listener-class>org.jboss.webbeans.environment.servlet.Listener</listener-class>\n"
#~ "</listener>]]>"
#~ msgstr ""
#~ "<![CDATA[<listener>\n"
#~ "   <listener-class>org.jboss.webbeans.environment.servlet.Listener</listener-class>\n"
#~ "</listener>]]>"

#~ msgid "The numberguess example for Apache Wicket"
#~ msgstr "Apache Wicket 向けの numberguess サンプル"

#~ msgid "Whilst JSR-299 specifies integration with Java ServerFaces, Web Beans allows you to inject into Wicket components, and also allows you to use a conversation context with Wicket. In this section, we'll walk you through the Wicket version of the numberguess example."
#~ msgstr "JSR-299 が Java ServerFaces との統合の仕様を定める一方で、Web Beans は Wicket コンポーネントへインジェクトすることを可能にし、Wicket で対話コンテキストを使用することも可能にします。このセクションでは、numberguess サンプルの Wicket バージョンを一つずつ説明します。"

#~ msgid "You may want to review the Wicket documentation at <ulink url=\"http://wicket.apache.org/\">http://wicket.apache.org/</ulink>."
#~ msgstr "<ulink url=\"http://wicket.apache.org/\">http://wicket.apache.org/</ulink> の Wicket ドキュメントを見直すこともできます。"

#~ msgid "Like the previous example, the Wicket WebBeans examples make use of the <literal>webbeans-servlet</literal> module. The use of the <ulink url=\"http://jetty.mortbay.org/\">Jetty servlet container</ulink> is common in the Wicket community, and is chosen here as the runtime container in order to facilitate comparison between the standard Wicket examples and these examples, and also to show how the webbeans-servlet integration is not dependent upon Tomcat as the servlet container."
#~ msgstr "これまでのサンプルと同じよう、Wicket WebBeans サンプルは <literal>webbeans-servlet</literal> モジュールを利用します。<ulink url=\"http://jetty.mortbay.org/\">Jetty サーブレットコンテナ</ulink> の使用は Wicket コミュニティでは一般的なので、標準 Wicket サンプルとこれらのサンプルとの比較を容易にするために、また webbeans-サーブレットの統合がサーブレットコンテナとしての Tomcat に依存していないことを示すために、ここでは実行コンテナとしてJetty サーブレットコンテナを選択しています。"

#~ msgid "These examples make use of the Eclipse IDE; instructions are also given to deploy the application from the command line."
#~ msgstr "これらのサンプルは、Eclipse IDE を利用します。またアプリケーションをデプロイする命令は、コマンドラインから入力します。"

#~ msgid "To generate an Eclipse project from the example:"
#~ msgstr "サンプルから Eclipse プロジェクトを生成します:"

#, fuzzy
#~ msgid "Then, from eclipse, choose <emphasis>File -> Import -> General -> Existing Projects into Workspace</emphasis>, select the root directory of the numberguess example, and click finish. Note that if you do not intend to run the example with jetty from within eclipse, omit the \"-Pjetty.\" This will create a project in your workspace called <literal>webbeans-wicket-numberguess</literal>"
#~ msgstr "次に eclipse で <emphasis>ファイル -> インポート -> 一般 -> 既存のプロジェクトをワークスペースへ</emphasis> を選んで、numberguess サンプルのルートディレクトリを指定して、完了をクリックします。これにより ワークスペースに <literal>webbeans-wicket-numberguess</literal> という名前のプロジェクトが作成されます。"

#~ msgid "Running the example from Eclipse"
#~ msgstr "Eclipse からのサンプルの実行"

#~ msgid "This project follows the <literal>wicket-quickstart</literal> approach of creating an instance of Jetty in the <literal>Start</literal> class. So running the example is as simple as right-clicking on that Start class in <literal>src/test/java</literal> in the <emphasis>Package Explorer</emphasis> and choosing <emphasis>Run as Java Application</emphasis>. You should see console output related to Jetty starting up; then visit able <literal>http://localhost:8080</literal> to view the app. To debug choose <emphasis>Debug as Java Application</emphasis>."
#~ msgstr "このプロジェクトは、<literal>Start</literal> クラスで Jetty のインスタンスを作成する<literal>wicket-quickstart</literal> のアプローチに従っています。よって、サンプルを実行するには <emphasis>パッケージエクスプローラ</emphasis> で <literal>src/test/java</literal> にあるスタートクラスを右クリックし、<emphasis>Run as Java Application</emphasis> を選択して、簡単に実行できます。Jetty が起動するのをコンソール出力で確認してください。起動すれば<literal>http://localhost:8080</literal> からアプリケーションをアクセスしてください。デバッグするためには <emphasis>Debug as Java Application</emphasis> を選択してください。"

#~ msgid "Running the example from the command line in JBoss AS or Tomcat"
#~ msgstr "JBoss AS または Tomcat でコマンドラインからのサンプルの実行"

#~ msgid "This example can also be deployed from the command line in a (similar to the other examples). Assuming you have set up the <literal>build.properties</literal> file in the <literal>examples</literal> directory to specify the location of JBoss AS or Tomcat, as previously described, you can run <literal>ant deploy</literal> from the <literal>examples/wicket/numberguess</literal> directory, and access the application at <literal>http://localhost:8080/webbeans-numberguess-wicket</literal>."
#~ msgstr "このサンプルはコマンドラインからもデプロイすることができます(その他のサンプルと同様に)。<literal>examples</literal> ディレクトリ内の<literal>build.properties</literal>ファイルでJBoss AS あるいは Tomcat の場所を指定したとすると、以前に述べたように、<literal>examples/wicket/numberguess</literal> ディレクトリで <literal>ant deploy</literal> を実行して、<literal>http://localhost:8080/webbeans-numberguess-wicket</literal> からアプリケーションにアクセスすることができます。"

#~ msgid "Understanding the code"
#~ msgstr "コードの理解"

#~ msgid "JSF uses Unified EL expressions to bind view layer components in JSP or Facelet views to beans, Wicket defines it's components in Java. The markup is plain html with a one-to-one mapping between html elements and the view components. All view logic, including binding of components to models and controlling the response of view actions, is handled in Java. The integration of Web Beans with Wicket takes advantage of the same binding annotations used in your business layer to provide injection into your WebPage subclass (or into other custom wicket component subclasses)."
#~ msgstr "JSF はユニファイド EL 式を使用して、JSP あるいは Facelet ビューのビューレイヤコンポーネントを Bean にバインドします。Wicket は Java でコンポーネントを定義します。マークアップ は、html 要素とビューコンポーネントとの１対１のマッピングを行うプレーンな html です。モデルへのコンポーネントのバインディングとビューアクションの応答のコントロールを含むすべてのビューロジックは Java で処理されます。Web Beans と Wicket の統合により、WebPage サブクラス(あるいは他のカスタム Wicket コンポーネントサブクラスに)への注入を提供するビジネスレイヤで同一バインディングアノテーションを利用できるようになります。"

#~ msgid "The code in the wicket numberguess example is very similar to the JSF-based numberguess example. The business layer is identical!"
#~ msgstr "Wicket numberguess サンプルのコードは、JSFベースの numberguess サンプルにとても類似しています。ビジネス層レイヤは同一です。"

#~ msgid "Differences are:"
#~ msgstr "違いは以下の通りです:"

#~ msgid "Each wicket application must have a <literal>WebApplication</literal> subclass, In our case, our application class is <literal>SampleApplication</literal>:"
#~ msgstr "各々の Wicket アプリケーションは、<literal>WebApplication</literal> サブクラスを持たなければなりません。サンプルの場合、アプリケーションクラスは <literal>SampleApplication</literal> です:"

#~ msgid ""
#~ "<![CDATA[public class SampleApplication extends WebBeansApplication {\n"
#~ "   @Override\n"
#~ "   public Class getHomePage() {\n"
#~ "      return HomePage.class;\n"
#~ "   }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public class SampleApplication extends WebBeansApplication {\n"
#~ "   @Override\n"
#~ "   public Class getHomePage() {\n"
#~ "      return HomePage.class;\n"
#~ "   }\n"
#~ "}]]>"

#~ msgid "This class specifies which page wicket should treat as our home page, in our case, <literal>HomePage.class</literal>"
#~ msgstr "このクラスはどのページを Wicket がホームページとして取り扱うべきかを指定しています。サンプルでは <literal>HomePage.class</literal> です。"

#~ msgid "In <literal>HomePage</literal> we see typical wicket code to set up page elements. The bit that is interesting is the injection of the <literal>Game</literal> bean:"
#~ msgstr "<literal>HomePage</literal>では、 ページ要素を設定するために典型的な Wicket コードを見ることができます。面白い箇所は、<literal>Game</literal> bean の注入です:"

#~ msgid "<![CDATA[ @Current Game game;]]>"
#~ msgstr "<![CDATA[ @Current Game game;]]>"

#~ msgid "The <literal>Game</literal> bean is can then be used, for example, by the code for submitting a guess:"
#~ msgstr "<literal>Game</literal> bean 例えば、推測を送信するコードによって使用されます:"

#~ msgid ""
#~ "<![CDATA[final Component guessButton = new AjaxButton(\"GuessButton\") { \n"
#~ "   protected void onSubmit(AjaxRequestTarget target, Form form) {\n"
#~ "      if (game.check()) {]]>"
#~ msgstr ""
#~ "<![CDATA[final Component guessButton = new AjaxButton(\"GuessButton\") { \n"
#~ "   protected void onSubmit(AjaxRequestTarget target, Form form) {\n"
#~ "      if (game.check()) {]]>"

#~ msgid "All injections may be serialized; actual storage of the bean is managed by JSR-299. Note that Wicket components, like the HomePage and it subcomponents, are <emphasis>not</emphasis> JSR-299 beans."
#~ msgstr "すべての注入はシリアライズされます。Bean の実際の保管は、JSR-299 によって管理されます。Wicket コンポーネントは、HomePage やそのサブクラスと同様に、JSR-299 beans<emphasis>ではない</emphasis> ことに注意してください。"

#~ msgid "Wicket components allow injection, but they <emphasis>cannot</emphasis> use interceptors, decorators and lifecycle callbacks such as <literal>@PostConstruct</literal> or <literal>@Initializer</literal> methods."
#~ msgstr "Wicket コンポーネントは注入を許可します。しかし <literal>@PostConstruct</literal> あるいは <literal>@Initializer</literal> といったインタセプタやデコレータ、ライフサイクルコールバックを使用することは<emphasis>できません</emphasis>。"

#~ msgid "The example uses AJAX for processing of button events, and dynamically hides buttons that are no longer relevant, for example when the user has won the game."
#~ msgstr "サンプルではボタンイベント処理のために AJAX を使用して、例えばユーザがゲームに勝利したときに、もはや適切でなくなったボタンを動的に隠しています。"

#~ msgid "In order to activate wicket for this webapp, the Wicket filter is added to web.xml, and our application class is specified:"
#~ msgstr "この webapp のための Wicket を有効化するために、Wicket フィルタが web.xml に加えられ、アプリケーションクラスが指定されます:"

#~ msgid ""
#~ "<![CDATA[<filter>\n"
#~ "   <filter-name>wicket.numberguess-example</filter-name>\n"
#~ "   <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>\n"
#~ "   <init-param>\n"
#~ "      <param-name>applicationClassName</param-name>\n"
#~ "      <param-value>org.jboss.webbeans.examples.wicket.SampleApplication</param-value>\n"
#~ "   </init-param>\n"
#~ "</filter>\n"
#~ "\n"
#~ "<filter-mapping>\n"
#~ "   <filter-name>wicket.numberguess-example</filter-name>\n"
#~ "   <url-pattern>/*</url-pattern>\n"
#~ "</filter-mapping>\n"
#~ " \n"
#~ "<listener>\n"
#~ "   <listener-class>org.jboss.webbeans.environment.servlet.Listener</listener-class>\n"
#~ "</listener>]]>"
#~ msgstr ""
#~ "<![CDATA[<filter>\n"
#~ "   <filter-name>wicket.numberguess-example</filter-name>\n"
#~ "   <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>\n"
#~ "   <init-param>\n"
#~ "      <param-name>applicationClassName</param-name>\n"
#~ "      <param-value>org.jboss.webbeans.examples.wicket.SampleApplication</param-value>\n"
#~ "   </init-param>\n"
#~ "</filter>\n"
#~ "\n"
#~ "<filter-mapping>\n"
#~ "   <filter-name>wicket.numberguess-example</filter-name>\n"
#~ "   <url-pattern>/*</url-pattern>\n"
#~ "</filter-mapping>\n"
#~ " \n"
#~ "<listener>\n"
#~ "   <listener-class>org.jboss.webbeans.environment.servlet.Listener</listener-class>\n"
#~ "</listener>]]>"

#~ msgid "Note that the servlet listener is also added, as in the Tomcat example, in order to boostrap Web Beans when Jetty starts, and to hook Web Beans into the Jetty servlet request and session lifecycles."
#~ msgstr "Tomcat サンプルと同様に、Jetty が起動したときに Web Beans をブートストラップし、Jetty のサーブレットリクエストとセッションライフサイクルへ Web Beans をフックするために、サーブレットリスナも追加されていることに注意してください。"

#~ msgid "The numberguess example for Java SE with Swing"
#~ msgstr "Java SE 上の Swing 向けの numberguess サンプル"

#~ msgid "To run this example:"
#~ msgstr "このサンプルの実行方法:"

#~ msgid "Open a command line/terminal window in the <literal>examples/se/numberguess</literal> directory"
#~ msgstr "<literal>examples/se/numberguess</literal> ディレクトリでコマンドライン/ターミナルウィンドウを開いてください"

#~ msgid "Ensure that Maven 2 is installed and in your PATH"
#~ msgstr "Maven 2 がインストールされていてパスに設定されていることを確認してください"

#~ msgid "Ensure that the <literal>JAVA_HOME</literal> environment variable is pointing to your JDK installation"
#~ msgstr "<literal>JAVA_HOME</literal> 環境変数がJDKのインストール場所を指定しているを確認してください"

#~ msgid "execute the following command"
#~ msgstr "以下のコマンドを実行してください"

#~ msgid "mvn -Drun"
#~ msgstr "mvn -Drun"

#~ msgid "There is an empty <literal>beans.xml</literal> file in the root package (<literal>src/main/resources/beans.xml</literal>), which marks this application as a Web Beans application."
#~ msgstr "ルートパッケージの中には空の <literal>beans.xml</literal> ファイル (<literal>src/main/resources/beans.xml</literal>) があります。これによりこのアプリケーションが Web Beans アプリケーションであるという印をつけます。"

#~ msgid "The game's main logic is located in <literal>Game.java</literal>. Here is the code for that class, highlighting the changes made from the web application version:"
#~ msgstr "ゲームのメインロジックは、 <literal>Game.java</literal> にあります。以下はそのクラスのコードで、Web アプリケーションバージョンから変更された箇所を目立たせています:"

#~ msgid ""
#~ "<programlistingco> <areaspec> <area id=\"scope\" coords=\"1\"/> <area id=\"name\" coords=\"1\"/> <area id=\"messages1\" coords=\"26\"/> <area id=\"validation\" coords=\"39\"/> <area id=\"reset\" coords=\"68\"/> </areaspec> <programlisting role=\"JAVA\"><![CDATA[@ApplicationScoped\n"
#~ "public class Game implements Serializable\n"
#~ "{\n"
#~ "\n"
#~ "    private int number;\n"
#~ "    private int guess;\n"
#~ "    private int smallest;\n"
#~ "\n"
#~ "    @MaxNumber\n"
#~ "    private int maxNumber;\n"
#~ "\n"
#~ "    private int biggest;\n"
#~ "    private int remainingGuesses;\n"
#~ "    private boolean validNumberRange = true;\n"
#~ "\n"
#~ "    @Current Generator rndGenerator;\n"
#~ "\n"
#~ "    ...\n"
#~ "\n"
#~ "    public boolean isValidNumberRange()\n"
#~ "    {\n"
#~ "        return validNumberRange;\n"
#~ "    }\n"
#~ "\n"
#~ "    public boolean isGameWon()\n"
#~ "    {\n"
#~ "        return guess == number;\n"
#~ "    }\n"
#~ "\n"
#~ "    public boolean isGameLost()\n"
#~ "    {\n"
#~ "        return guess != number && remainingGuesses <= 0;\n"
#~ "    }\n"
#~ "\n"
#~ "    public boolean check()\n"
#~ "    {\n"
#~ "        boolean result = false;\n"
#~ "\n"
#~ "        if ( checkNewNumberRangeIsValid() )\n"
#~ "        {\n"
#~ "            if ( guess > number )\n"
#~ "            {\n"
#~ "                biggest = guess - 1;\n"
#~ "            }\n"
#~ "\n"
#~ "            if ( guess < number )\n"
#~ "            {\n"
#~ "                smallest = guess + 1;\n"
#~ "            }\n"
#~ "\n"
#~ "            if ( guess == number )\n"
#~ "            {\n"
#~ "                result = true;\n"
#~ "            }\n"
#~ "\n"
#~ "            remainingGuesses--;\n"
#~ "        }\n"
#~ "\n"
#~ "        return result;\n"
#~ "    }\n"
#~ "\n"
#~ "    private boolean checkNewNumberRangeIsValid()\n"
#~ "    {\n"
#~ "        return validNumberRange = ( ( guess >= smallest ) && ( guess <= biggest ) );\n"
#~ "    }\n"
#~ "\n"
#~ "    @PostConstruct\n"
#~ "    public void reset()\n"
#~ "    {\n"
#~ "        this.smallest = 0;\n"
#~ "        ...\n"
#~ "        this.number = rndGenerator.next();\n"
#~ "    }\n"
#~ "}]]></programlisting> <calloutlist> <callout arearefs=\"scope\"> <para> The bean is application scoped instead of session scoped, since an instance of the application represents a single 'session'. </para> </callout> <callout arearefs=\"name\"> <para> The bean is not named, since it doesn't need to be accessed via EL </para> </callout> <callout arearefs=\"messages1\"> <para> There is no JSF <literal>FacesContext</literal> to add messages to. Instead the <literal>Game</literal> class provides additional information about the state of the current game including: </para> <itemizedlist> <listitem> <para> If the game has been won or lost </para> </listitem> <listitem> <para> If the most recent guess was invalid </para> </listitem> </itemizedlist> <para> This allows the Swing UI to query the state of the game, which it does indirectly via a class called <literal>MessageGenerator,</literal> in order to determine the appropriate messages to display to the user during the game. </para> </callout> <callout arearefs=\"validation\"> <para> Validation of user input is performed during the <literal>check()</literal> method, since there is no dedicated validation phase </para> </callout> <callout arearefs=\"reset\"> <para> The <literal>reset()</literal> method makes a call to the injected <literal>rndGenerator</literal> in order to get the random number at the start of each game. It cannot use <literal>manager.getInstanceByType(Integer.class, new AnnotationLiteral&lt;Random&gt;(){})</literal> as the JSF example does because there will not be any active contexts like there is during a JSF request. </para> </callout> </calloutlist> </programlistingco> <para> The <literal>MessageGenerator</literal> class depends on the current instance of <literal>Game</literal>, and queries its state in order to determine the appropriate messages to provide as the prompt for the user's next guess and the response to the previous guess. The code for <literal>MessageGenerator</literal> is as follows: </para> <programlistingco> <areaspec> <area id=\"game\" coords=\"3\"/> <area id=\"challenge\" coords=\"5\"/> <area id=\"result\" coords=\"16\"/> </areaspec> <programlisting role=\"JAVA\"><![CDATA[public class MessageGenerator\n"
#~ "{\n"
#~ "    @Current Game game;\n"
#~ "\n"
#~ "    public String getChallengeMessage()\n"
#~ "    {\n"
#~ "        StringBuilder challengeMsg = new StringBuilder( \"I'm thinking of a number between \" );\n"
#~ "        challengeMsg.append( game.getSmallest() );\n"
#~ "        challengeMsg.append( \" and \" );\n"
#~ "        challengeMsg.append( game.getBiggest() );\n"
#~ "        challengeMsg.append( \". Can you guess what it is?\" );\n"
#~ "\n"
#~ "        return challengeMsg.toString();\n"
#~ "    }\n"
#~ "\n"
#~ "    public String getResultMessage()\n"
#~ "    {\n"
#~ "        if ( game.isGameWon() )\n"
#~ "        {\n"
#~ "            return \"You guess it! The number was \" + game.getNumber();\n"
#~ "        } else if ( game.isGameLost() )\n"
#~ "        {\n"
#~ "            return \"You are fail! The number was \" + game.getNumber();\n"
#~ "        } else if ( ! game.isValidNumberRange() )\n"
#~ "        {\n"
#~ "            return \"Invalid number range!\";\n"
#~ "        } else if ( game.getRemainingGuesses() == Game.MAX_NUM_GUESSES )\n"
#~ "        {\n"
#~ "            return \"What is your first guess?\";\n"
#~ "        } else\n"
#~ "        {\n"
#~ "            String direction = null;\n"
#~ "\n"
#~ "            if ( game.getGuess() < game.getNumber() )\n"
#~ "            {\n"
#~ "                direction = \"Higher\";\n"
#~ "            } else\n"
#~ "            {\n"
#~ "                direction = \"Lower\";\n"
#~ "            }\n"
#~ "\n"
#~ "            return direction + \"! You have \" + game.getRemainingGuesses() + \" guesses left.\";\n"
#~ "        }\n"
#~ "    }\n"
#~ "}]]></programlisting> <calloutlist> <callout arearefs=\"game\"> <para> The instance of <literal>Game</literal> for the application is injected here. </para> </callout> <callout arearefs=\"challenge\"> <para> The <literal>Game</literal>'s state is interrogated to determine the appropriate challenge message. </para> </callout> <callout arearefs=\"result\"> <para> And again to determine whether to congratulate, console or encourage the user to continue. </para> </callout> </calloutlist> </programlistingco> <para> Finally we come to the <literal>NumberGuessFrame</literal> class which provides the Swing front end to our guessing game. </para> <programlistingco> <areaspec> <area id=\"gameIn\" coords=\"3\"/> <area id=\"messagesIn\" coords=\"4\"/> <area id=\"start\" coords=\"6\"/> <area id=\"init\" coords=\"18\"/> <area id=\"guess1\" coords=\"34\"/> <area id=\"replay\" coords=\"44\"/> <area id=\"refresh\" coords=\"50\"/> </areaspec> <programlisting role=\"JAVA\"><![CDATA[public class NumberGuessFrame  extends javax.swing.JFrame\n"
#~ "{\n"
#~ "    private @Current Game game;\n"
#~ "    private @Current MessageGenerator msgGenerator;\n"
#~ "\n"
#~ "    public void start( @Observes @Deployed Manager manager )\n"
#~ "    {\n"
#~ "        java.awt.EventQueue.invokeLater( new Runnable()\n"
#~ "            {\n"
#~ "                public void run()\n"
#~ "                {\n"
#~ "                    initComponents();\n"
#~ "                    setVisible( true );\n"
#~ "                }\n"
#~ "            } );\n"
#~ "    }\n"
#~ "\n"
#~ "    private void initComponents() {\n"
#~ "\n"
#~ "        buttonPanel = new javax.swing.JPanel();\n"
#~ "        mainMsgPanel = new javax.swing.JPanel();\n"
#~ "        mainLabel = new javax.swing.JLabel();\n"
#~ "        messageLabel = new javax.swing.JLabel();\n"
#~ "        guessText = new javax.swing.JTextField();\n"
#~ "        ...\n"
#~ "        mainLabel.setText(msgGenerator.getChallengeMessage());\n"
#~ "        mainMsgPanel.add(mainLabel);\n"
#~ "\n"
#~ "        messageLabel.setText(msgGenerator.getResultMessage());\n"
#~ "        mainMsgPanel.add(messageLabel);\n"
#~ "        ...\n"
#~ "    }\n"
#~ "\n"
#~ "    private void guessButtonActionPerformed( java.awt.event.ActionEvent evt )\n"
#~ "    {\n"
#~ "        int guess =  Integer.parseInt(guessText.getText());\n"
#~ "\n"
#~ "        game.setGuess( guess );\n"
#~ "        game.check();\n"
#~ "        refreshUI();\n"
#~ "\n"
#~ "    }\n"
#~ "\n"
#~ "    private void replayBtnActionPerformed( java.awt.event.ActionEvent evt )\n"
#~ "    {\n"
#~ "       game.reset();\n"
#~ "       refreshUI();\n"
#~ "    }\n"
#~ "\n"
#~ "    private void refreshUI()\n"
#~ "    {\n"
#~ "        mainLabel.setText( msgGenerator.getChallengeMessage() );\n"
#~ "        messageLabel.setText( msgGenerator.getResultMessage() );\n"
#~ "        guessText.setText( \"\" );\n"
#~ "        guessesLeftBar.setValue( game.getRemainingGuesses() );\n"
#~ "        guessText.requestFocus();\n"
#~ "    }\n"
#~ "\n"
#~ "    // swing components\n"
#~ "    private javax.swing.JPanel borderPanel;\n"
#~ "    ...\n"
#~ "    private javax.swing.JButton replayBtn;\n"
#~ "\n"
#~ "}]]></programlisting> <calloutlist> <callout arearefs=\"gameIn\"> <para> The injected instance of the game (logic and state). </para> </callout> <callout arearefs=\"messagesIn\"> <para> The injected message generator for UI messages. </para> </callout> <callout arearefs=\"start\"> <para> This application is started in the usual Web Beans SE way, by observing the <literal>@Deployed Manager</literal> event. </para> </callout> <callout arearefs=\"init\"> <para> This method initialises all of the Swing components. Note the use of the <literal>msgGenerator</literal>. </para> </callout> <callout arearefs=\"guess1\"> <para> <literal>guessButtonActionPerformed</literal> is called when the 'Guess' button is clicked, and it does the following: </para> <itemizedlist> <listitem> <para> Gets the guess entered by the user and sets it as the current guess in the <literal>Game</literal> </para> </listitem> <listitem> <para> Calls <literal>game.check()</literal> to validate and perform one 'turn' of the game </para> </listitem> <listitem> <para> Calls <literal>refreshUI</literal>. If there were validation errors with the input, this will have been captured during <literal>game.check()</literal> and as such will be reflected in the messeges returned by <literal>MessageGenerator</literal> and subsequently presented to the user. If there are no validation errors then the user will be told to guess again (higher or lower) or that the game has ended either in a win (correct guess) or a loss (ran out of guesses). </para> </listitem> </itemizedlist> </callout> <callout arearefs=\"replay\"> <para> <literal>replayBtnActionPerformed</literal> simply calls <literal>game.reset()</literal> to start a new game and refreshes the messages in the UI. </para> </callout> <callout arearefs=\"refresh\"> <para> <literal>refreshUI</literal> uses the <literal>MessageGenerator</literal> to update the messages to the user based on the current state of the Game. </para> </callout> </calloutlist> </programlistingco>"
#~ msgstr ""
#~ "<programlistingco> <areaspec> <area id=\"scope\" coords=\"1\"/> <area id=\"name\" coords=\"1\"/> <area id=\"messages1\" coords=\"26\"/> <area id=\"validation\" coords=\"39\"/> <area id=\"reset\" coords=\"68\"/> </areaspec> <programlisting role=\"JAVA\"><![CDATA[@ApplicationScoped\n"
#~ "public class Game implements Serializable\n"
#~ "{\n"
#~ "\n"
#~ "    private int number;\n"
#~ "    private int guess;\n"
#~ "    private int smallest;\n"
#~ "\n"
#~ "    @MaxNumber\n"
#~ "    private int maxNumber;\n"
#~ "\n"
#~ "    private int biggest;\n"
#~ "    private int remainingGuesses;\n"
#~ "    private boolean validNumberRange = true;\n"
#~ "\n"
#~ "    @Current Generator rndGenerator;\n"
#~ "\n"
#~ "    ...\n"
#~ "\n"
#~ "    public boolean isValidNumberRange()\n"
#~ "    {\n"
#~ "        return validNumberRange;\n"
#~ "    }\n"
#~ "\n"
#~ "    public boolean isGameWon()\n"
#~ "    {\n"
#~ "        return guess == number;\n"
#~ "    }\n"
#~ "\n"
#~ "    public boolean isGameLost()\n"
#~ "    {\n"
#~ "        return guess != number && remainingGuesses <= 0;\n"
#~ "    }\n"
#~ "\n"
#~ "    public boolean check()\n"
#~ "    {\n"
#~ "        boolean result = false;\n"
#~ "\n"
#~ "        if ( checkNewNumberRangeIsValid() )\n"
#~ "        {\n"
#~ "            if ( guess > number )\n"
#~ "            {\n"
#~ "                biggest = guess - 1;\n"
#~ "            }\n"
#~ "\n"
#~ "            if ( guess < number )\n"
#~ "            {\n"
#~ "                smallest = guess + 1;\n"
#~ "            }\n"
#~ "\n"
#~ "            if ( guess == number )\n"
#~ "            {\n"
#~ "                result = true;\n"
#~ "            }\n"
#~ "\n"
#~ "            remainingGuesses--;\n"
#~ "        }\n"
#~ "\n"
#~ "        return result;\n"
#~ "    }\n"
#~ "\n"
#~ "    private boolean checkNewNumberRangeIsValid()\n"
#~ "    {\n"
#~ "        return validNumberRange = ( ( guess >= smallest ) && ( guess <= biggest ) );\n"
#~ "    }\n"
#~ "\n"
#~ "    @PostConstruct\n"
#~ "    public void reset()\n"
#~ "    {\n"
#~ "        this.smallest = 0;\n"
#~ "        ...\n"
#~ "        this.number = rndGenerator.next();\n"
#~ "    }\n"
#~ "}]]></programlisting> <calloutlist> <callout arearefs=\"scope\"> <para> アプリケーションのインスタンスが唯一の「セッション」を表すので、Bean はセッションスコープではなくアプリケーションスコープです。 </para> </callout> <callout arearefs=\"name\"> <para> EL 経由でアクセスされる必要がないので、Bean には名前がつけられていません </para> </callout> <callout arearefs=\"messages1\"> <para> メッセージを付加するための JSF <literal>FacesContext</literal> はありません。その代わりに <literal>Game</literal>  クラスは以下の現在のゲーム状態に関する追加情報を提供します: </para> <itemizedlist> <listitem> <para> ゲームは勝ったのかあるいは負けたのか </para> </listitem> <listitem> <para> 最も直前の推測は外れだったのか </para> </listitem> </itemizedlist> <para> ゲームの間にユーザに表示するべき適切なメッセージを決定するために Swing UI がゲームの状態を問い合わせることを可能にし、それは <literal>MessageGenerator</literal> と呼ばれるクラスを経由して間接的に行われます。 </para> </callout> <callout arearefs=\"validation\"> <para> 専用のバリデーションフェーズがないので、ユーザ入力のバリデーションは <literal>check()</literal> メソッドの間に実行されます </para> </callout> <callout arearefs=\"reset\"> <para> それぞれのゲームの開始時にランダム数を取得するために、<literal>reset()</literal> メソッドは、注入された <literal>rndGenerator</literal> を呼び出します。そこには JSF リクエストの間にようなアクティブコンテキストはないのでは、<literal>manager.getInstanceByType(Integer.class, new AnnotationLiteral&lt;Random&gt;(){})</literal> を使用することはできません。</para> </callout> </calloutlist> </programlistingco> <para> <literal>MessageGenerator</literal> クラスは <literal>Game</literal> の現在のインスタンスに依存し、直前の推測への応答とユーザの次の推測のためのプロンプトとして提供すべき適切なメッセージを決定するために、状態を問い合わせします。<literal>MessageGenerator</literal> のコードは、以下の通りです: </para> <programlistingco> <areaspec> <area id=\"game\" coords=\"3\"/> <area id=\"challenge\" coords=\"5\"/> <area id=\"result\" coords=\"16\"/> </areaspec> <programlisting role=\"JAVA\"><![CDATA[public class MessageGenerator\n"
#~ "{\n"
#~ "    @Current Game game;\n"
#~ "\n"
#~ "    public String getChallengeMessage()\n"
#~ "    {\n"
#~ "        StringBuilder challengeMsg = new StringBuilder( \"I'm thinking of a number between \" );\n"
#~ "        challengeMsg.append( game.getSmallest() );\n"
#~ "        challengeMsg.append( \" and \" );\n"
#~ "        challengeMsg.append( game.getBiggest() );\n"
#~ "        challengeMsg.append( \". Can you guess what it is?\" );\n"
#~ "\n"
#~ "        return challengeMsg.toString();\n"
#~ "    }\n"
#~ "\n"
#~ "    public String getResultMessage()\n"
#~ "    {\n"
#~ "        if ( game.isGameWon() )\n"
#~ "        {\n"
#~ "            return \"You guess it! The number was \" + game.getNumber();\n"
#~ "        } else if ( game.isGameLost() )\n"
#~ "        {\n"
#~ "            return \"You are fail! The number was \" + game.getNumber();\n"
#~ "        } else if ( ! game.isValidNumberRange() )\n"
#~ "        {\n"
#~ "            return \"Invalid number range!\";\n"
#~ "        } else if ( game.getRemainingGuesses() == Game.MAX_NUM_GUESSES )\n"
#~ "        {\n"
#~ "            return \"What is your first guess?\";\n"
#~ "        } else\n"
#~ "        {\n"
#~ "            String direction = null;\n"
#~ "\n"
#~ "            if ( game.getGuess() < game.getNumber() )\n"
#~ "            {\n"
#~ "                direction = \"Higher\";\n"
#~ "            } else\n"
#~ "            {\n"
#~ "                direction = \"Lower\";\n"
#~ "            }\n"
#~ "\n"
#~ "            return direction + \"! You have \" + game.getRemainingGuesses() + \" guesses left.\";\n"
#~ "        }\n"
#~ "    }\n"
#~ "}]]></programlisting> <calloutlist> <callout arearefs=\"game\"> <para> アプリケーションのための <literal>Game</literal> のインスタンスは、ここで注入されます。</para> </callout> <callout arearefs=\"challenge\"> <para> 適切な挑戦メッセージを決めるために、<literal>Game</literal>の状態が問い合わせられます。</para> </callout> <callout arearefs=\"result\"> <para> ユーザを祝福するか、あるいは慰めるか、続けるように励ますかを再び決定します。</para> </callout> </calloutlist> </programlistingco> <para> 最後に、推測ゲームの Swing フロントエンドを提供する <literal>NumberGuessFrame</literal> クラスを見てみます。</para> <programlistingco> <areaspec> <area id=\"gameIn\" coords=\"3\"/> <area id=\"messagesIn\" coords=\"4\"/> <area id=\"start\" coords=\"6\"/> <area id=\"init\" coords=\"18\"/> <area id=\"guess1\" coords=\"34\"/> <area id=\"replay\" coords=\"44\"/> <area id=\"refresh\" coords=\"50\"/> </areaspec> <programlisting role=\"JAVA\"><![CDATA[public class NumberGuessFrame  extends javax.swing.JFrame\n"
#~ "{\n"
#~ "    private @Current Game game;\n"
#~ "    private @Current MessageGenerator msgGenerator;\n"
#~ "\n"
#~ "    public void start( @Observes @Deployed Manager manager )\n"
#~ "    {\n"
#~ "        java.awt.EventQueue.invokeLater( new Runnable()\n"
#~ "            {\n"
#~ "                public void run()\n"
#~ "                {\n"
#~ "                    initComponents();\n"
#~ "                    setVisible( true );\n"
#~ "                }\n"
#~ "            } );\n"
#~ "    }\n"
#~ "\n"
#~ "    private void initComponents() {\n"
#~ "\n"
#~ "        buttonPanel = new javax.swing.JPanel();\n"
#~ "        mainMsgPanel = new javax.swing.JPanel();\n"
#~ "        mainLabel = new javax.swing.JLabel();\n"
#~ "        messageLabel = new javax.swing.JLabel();\n"
#~ "        guessText = new javax.swing.JTextField();\n"
#~ "        ...\n"
#~ "        mainLabel.setText(msgGenerator.getChallengeMessage());\n"
#~ "        mainMsgPanel.add(mainLabel);\n"
#~ "\n"
#~ "        messageLabel.setText(msgGenerator.getResultMessage());\n"
#~ "        mainMsgPanel.add(messageLabel);\n"
#~ "        ...\n"
#~ "    }\n"
#~ "\n"
#~ "    private void guessButtonActionPerformed( java.awt.event.ActionEvent evt )\n"
#~ "    {\n"
#~ "        int guess =  Integer.parseInt(guessText.getText());\n"
#~ "\n"
#~ "        game.setGuess( guess );\n"
#~ "        game.check();\n"
#~ "        refreshUI();\n"
#~ "\n"
#~ "    }\n"
#~ "\n"
#~ "    private void replayBtnActionPerformed( java.awt.event.ActionEvent evt )\n"
#~ "    {\n"
#~ "       game.reset();\n"
#~ "       refreshUI();\n"
#~ "    }\n"
#~ "\n"
#~ "    private void refreshUI()\n"
#~ "    {\n"
#~ "        mainLabel.setText( msgGenerator.getChallengeMessage() );\n"
#~ "        messageLabel.setText( msgGenerator.getResultMessage() );\n"
#~ "        guessText.setText( \"\" );\n"
#~ "        guessesLeftBar.setValue( game.getRemainingGuesses() );\n"
#~ "        guessText.requestFocus();\n"
#~ "    }\n"
#~ "\n"
#~ "    // swing components\n"
#~ "    private javax.swing.JPanel borderPanel;\n"
#~ "    ...\n"
#~ "    private javax.swing.JButton replayBtn;\n"
#~ "\n"
#~ "}]]></programlisting> <calloutlist> <callout arearefs=\"gameIn\"> <para> ゲーム(ロジックと状態)の注入されたインスタンス。</para> </callout> <callout arearefs=\"messagesIn\"> <para> UI メッセージのための注入されたジェネレータ。</para> </callout> <callout arearefs=\"start\"> <para> <literal>@Deployed Manager</literal> イベントを監視することにより、このアプリケーションは通常の Web Beans SE の方法で開始されます。</para> </callout> <callout arearefs=\"init\"> <para> このメソッドはすべての Swing コンポーネントを初期化します。<literal>msgGenerator</literal> の使用 に注意してください。 </para> </callout> <callout arearefs=\"guess1\"> <para> <literal>guessButtonActionPerformed</literal> は、「推測」ボタンがクリックされたときに呼ばれ、以下のことを行います: </para> <itemizedlist> <listitem> <para> ユーザによって入力された推測を取得して、<literal>Game</literal> に現在の推測をセットします </para> </listitem> <listitem> <para> バリデートしてゲームの１つの「順番」を実行するために <literal>game.check()</literal> を呼び出します </para> </listitem> <listitem> <para> <literal>refreshUI</literal> を呼び出します。もし入力にバリデーションエラーがあれば、これは <literal>game.check()</literal> の間に捕捉され、<literal>MessageGenerator</literal> によって返されるメッセージに反映され、続いてユーザに表示されます。もしバリデーションエラーがなければ、ユーザは再び推測結果(より高いかより低いか)を告げられるか、あるいはゲームは勝利(正しい推測)または負け(推測を使い尽くし)でゲームを終えます。</para> </listitem> </itemizedlist> </callout> <callout arearefs=\"replay\"> <para> <literal>replayBtnActionPerformed</literal>  は、新しいゲームを始めるために単に <literal>game.reset()</literal> を呼んで、UIのメッセージを新しくします。</para> </callout> <callout arearefs=\"refresh\"> <para> <literal>refreshUI</literal> は、ゲームの現在の状況に基づいてユーザへのメッセージを更新するために、<literal>MessageGenerator</literal> を使います。</para> </callout> </calloutlist> </programlistingco>"

#~ msgid "The translator example"
#~ msgstr "translator サンプル"

#~ msgid "The translator example will take any sentences you enter, and translate them to Latin."
#~ msgstr "translator サンプルは、入力するどんな文章も受け取り、それをラテン語に翻訳します。"

#~ msgid "The translator example is built as an ear, and contains EJBs. As a result, it's structure is more complex than the numberguess example."
#~ msgstr "translator サンプルは ear としてビルドされ、EJB を含みます。その結果として、numberguess サンプルよりも構造が複雑です。"

#~ msgid "EJB 3.1 and Jave EE 6 allow you to package EJBs in a war, which will make this structure much simpler!"
#~ msgstr "EJB 3.1 と Jave EE 6 により EJB を war にパッケージングすることが可能になります。これによりこの構造はもっと簡単になります。"

#~ msgid "First, let's take a look at the ear aggregator, which is located in <literal>webbeans-translator-ear</literal> module. Maven automatically generates the <literal>application.xml</literal> for us:"
#~ msgstr "まず最初に、<literal>webbeans-translator-ear</literal> モジュール にある ear 形式の aggregatorを見てみましょう。Maven が自動的に <literal>application.xml</literal> を生成します:"

#~ msgid ""
#~ "<![CDATA[<plugin>\n"
#~ "   <groupId>org.apache.maven.plugins</groupId>\n"
#~ "   <artifactId>maven-ear-plugin</artifactId>\n"
#~ "   <configuration>\n"
#~ "      <modules>\n"
#~ "         <webModule>\n"
#~ "            <groupId>org.jboss.webbeans.examples.translator</groupId>\n"
#~ "            <artifactId>webbeans-translator-war</artifactId>\n"
#~ "            <contextRoot>/webbeans-translator</contextRoot>\n"
#~ "         </webModule>\n"
#~ "      </modules>\n"
#~ "   </configuration>\n"
#~ "</plugin>]]>"
#~ msgstr ""
#~ "<![CDATA[<plugin>\n"
#~ "   <groupId>org.apache.maven.plugins</groupId>\n"
#~ "   <artifactId>maven-ear-plugin</artifactId>\n"
#~ "   <configuration>\n"
#~ "      <modules>\n"
#~ "         <webModule>\n"
#~ "            <groupId>org.jboss.webbeans.examples.translator</groupId>\n"
#~ "            <artifactId>webbeans-translator-war</artifactId>\n"
#~ "            <contextRoot>/webbeans-translator</contextRoot>\n"
#~ "         </webModule>\n"
#~ "      </modules>\n"
#~ "   </configuration>\n"
#~ "</plugin>]]>"

#~ msgid "If you aren't using Maven to generate these files, you would need <literal>META-INF/application.xml</literal>:"
#~ msgstr "もしこれらのファイルを生成するのに Maven を使用しなければ、<literal>META-INF/application.xml</literal> が必要になります:"

#~ msgid ""
#~ "<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
#~ "<application xmlns=\"http://java.sun.com/xml/ns/javaee\" \n"
#~ "             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "             xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/application_5.xsd\"\n"
#~ "             version=\"5\">\n"
#~ "  <display-name>webbeans-translator-ear</display-name>\n"
#~ "  <description>Ear Example for the reference implementation of JSR 299: Web Beans</description>\n"
#~ "  \n"
#~ "  <module>\n"
#~ "    <web>\n"
#~ "      <web-uri>webbeans-translator.war</web-uri>\n"
#~ "      <context-root>/webbeans-translator</context-root>\n"
#~ "    </web>\n"
#~ "  </module>\n"
#~ "  <module>\n"
#~ "    <ejb>webbeans-translator.jar</ejb>\n"
#~ "  </module>\n"
#~ "</application>]]>"
#~ msgstr ""
#~ "<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
#~ "<application xmlns=\"http://java.sun.com/xml/ns/javaee\" \n"
#~ "             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "             xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/application_5.xsd\"\n"
#~ "             version=\"5\">\n"
#~ "  <display-name>webbeans-translator-ear</display-name>\n"
#~ "  <description>Ear Example for the reference implementation of JSR 299: Web Beans</description>\n"
#~ "  \n"
#~ "  <module>\n"
#~ "    <web>\n"
#~ "      <web-uri>webbeans-translator.war</web-uri>\n"
#~ "      <context-root>/webbeans-translator</context-root>\n"
#~ "    </web>\n"
#~ "  </module>\n"
#~ "  <module>\n"
#~ "    <ejb>webbeans-translator.jar</ejb>\n"
#~ "  </module>\n"
#~ "</application>]]>"

#~ msgid "Next, lets look at the war. Just as in the numberguess example, we have a <literal>faces-config.xml</literal> (to enable Facelets) and a <literal>web.xml</literal> (to enable JSF) in <literal>WebContent/WEB-INF</literal>."
#~ msgstr "次に、war を見てみましょう。ちょうど numberguess サンプルと同様に、WebContent/WEB-INF に <literal>faces-config.xml</literal> (faceletを有効化する)と <literal>web.xml</literal> (JSFを有効化する)があります。"

#~ msgid "More intersting is the facelet used to translate text. Just as in the numberguess example we have a template, which surrounds the form (ommitted here for brevity):"
#~ msgstr "興味深いことに facelet がテキストを翻訳するのに使用されています。ちょうど numberguess サンプルでテンプレートを使用しているのと同様に、フォームで囲まれています(短くするためにここでは省略しています):"

#~ msgid ""
#~ "<![CDATA[<h:form id=\"NumberGuessMain\">\n"
#~ "            \n"
#~ "   <table>\n"
#~ "      <tr align=\"center\" style=\"font-weight: bold\" >\n"
#~ "         <td>\n"
#~ "            Your text\n"
#~ "         </td>\n"
#~ "         <td>\n"
#~ "            Translation\n"
#~ "         </td>\n"
#~ "      </tr>\n"
#~ "      <tr>\n"
#~ "         <td>\n"
#~ "            <h:inputTextarea id=\"text\" value=\"#{translator.text}\" required=\"true\" rows=\"5\" cols=\"80\" />\n"
#~ "         </td>\n"
#~ "         <td>\n"
#~ "            <h:outputText value=\"#{translator.translatedText}\" />\n"
#~ "         </td>\n"
#~ "      </tr>\n"
#~ "   </table>\n"
#~ "   <div>\n"
#~ "      <h:commandButton id=\"button\" value=\"Translate\" action=\"#{translator.translate}\"/>\n"
#~ "   </div>\n"
#~ "   \n"
#~ "</h:form>]]>"
#~ msgstr ""
#~ "<![CDATA[<h:form id=\"NumberGuessMain\">\n"
#~ "            \n"
#~ "   <table>\n"
#~ "      <tr align=\"center\" style=\"font-weight: bold\" >\n"
#~ "         <td>\n"
#~ "            Your text\n"
#~ "         </td>\n"
#~ "         <td>\n"
#~ "            Translation\n"
#~ "         </td>\n"
#~ "      </tr>\n"
#~ "      <tr>\n"
#~ "         <td>\n"
#~ "            <h:inputTextarea id=\"text\" value=\"#{translator.text}\" required=\"true\" rows=\"5\" cols=\"80\" />\n"
#~ "         </td>\n"
#~ "         <td>\n"
#~ "            <h:outputText value=\"#{translator.translatedText}\" />\n"
#~ "         </td>\n"
#~ "      </tr>\n"
#~ "   </table>\n"
#~ "   <div>\n"
#~ "      <h:commandButton id=\"button\" value=\"Translate\" action=\"#{translator.translate}\"/>\n"
#~ "   </div>\n"
#~ "   \n"
#~ "</h:form>]]>"

#~ msgid "The user can enter some text in the lefthand textarea, and hit the translate button to see the result to the right."
#~ msgstr "ユーザが左側のテキストエリアにテキストを入力して、翻訳ボタンを押すことによりその右側に結果を確認できます。"

#~ msgid "Finally, let's look at the ejb module, <literal>webbeans-translator-ejb</literal>. In <literal>src/main/resources/META-INF</literal> there is just an empty <literal>web-beans.xml</literal>, used to mark the archive as containing Web Beans."
#~ msgstr "最後に、ejbモジュール <literal>webbeans-translator-ejb</literal> を見てみましょう。<literal>src/main/resources/META-INF</literal> には、単に空の <literal>web-beans.xml</literal> があり、このアーカイブが Web Beans を含んでいるという印を付けるのに使用されています。"

#~ msgid "We've saved the most interesting bit to last, the code! The project has two simple beans, <literal>SentenceParser</literal> and <literal>TextTranslator</literal> and two enterprise beans, <literal>TranslatorControllerBean</literal> and <literal>SentenceTranslator</literal>. You should be getting quite familiar with what a Web Bean looks like by now, so we'll just highlight the most interesting bits here."
#~ msgstr "最も面白い箇所、コードは最後にとっておきました。プロジェクトには２つの単純な Bean の <literal>SentenceParser</literal> と<literal>TextTranslator</literal> と、２つのエンタープライズBean の <literal>TranslatorControllerBean</literal> と <literal>SentenceTranslator</literal> があります。今までで Web Bean がどうようなものであるか詳しくなってきたので、ここでは、最も面白い箇所を取り上げましょう。"

#~ msgid "Both <literal>SentenceParser</literal> and <literal>TextTranslator</literal> are dependent beans, and <literal>TextTranslator</literal> uses constructor initialization:"
#~ msgstr "<literal>SentenceParser</literal> と <literal>TextTranslator</literal> の両方とも依存 beans で、TextTranslator はコンストラクタ初期化を使用します:"

#~ msgid ""
#~ "<![CDATA[public class TextTranslator { \n"
#~ "   private SentenceParser sentenceParser; \n"
#~ "   private Translator sentenceTranslator; \n"
#~ "   \n"
#~ "   @Initializer\n"
#~ "   TextTranslator(SentenceParser sentenceParser, Translator sentenceTranslator) \n"
#~ "   { \n"
#~ "      this.sentenceParser = sentenceParser; \n"
#~ "      this.sentenceTranslator = sentenceTranslator;]]>"
#~ msgstr ""
#~ "<![CDATA[public class TextTranslator { \n"
#~ "   private SentenceParser sentenceParser; \n"
#~ "   private Translator sentenceTranslator; \n"
#~ "   \n"
#~ "   @Initializer\n"
#~ "   TextTranslator(SentenceParser sentenceParser, Translator sentenceTranslator) \n"
#~ "   { \n"
#~ "      this.sentenceParser = sentenceParser; \n"
#~ "      this.sentenceTranslator = sentenceTranslator;]]>"

#~ msgid "<literal>TextTranslator</literal> is a stateless bean (with a local business interface), where the magic happens - of course, we couldn't develop a full translator, but we gave it a good go!"
#~ msgstr "<literal>TextTranslator</literal> は、(ローカルビジネスインタフェースをもつ)ステートレスな bean です。ここで手品が起こります - もちろん、完全な translator を開発できているわけでないので、翻訳はダミーの結果が返ります。"

#~ msgid "Finally, there is UI orientated controller, that collects the text from the user, and dispatches it to the translator. This is a request scoped, named, stateful session bean, which injects the translator."
#~ msgstr "最後に、ユーザからのテキストを受け付けて、translator にそれをディスパッチする UI に基づいたコントローラがあります。これは、translator をインジェクトする、リクエストスコープの名前をつけられたステートフルセッション Beanです。"

#~ msgid ""
#~ "<![CDATA[@Stateful\n"
#~ "@RequestScoped\n"
#~ "@Named(\"translator\")\n"
#~ "public class TranslatorControllerBean implements TranslatorController\n"
#~ "{\n"
#~ "   \n"
#~ "   @Current TextTranslator translator;]]>"
#~ msgstr ""
#~ "<![CDATA[@Stateful\n"
#~ "@RequestScoped\n"
#~ "@Named(\"translator\")\n"
#~ "public class TranslatorControllerBean implements TranslatorController\n"
#~ "{\n"
#~ "   \n"
#~ "   @Current TextTranslator translator;]]>"

#~ msgid "The bean also has getters and setters for all the fields on the page."
#~ msgstr "Beanは、ページ上のすべてのフィールドに対して getter と setter も持っています。"

#~ msgid "As this is a stateful session bean, we have to have a remove method:"
#~ msgstr "これはステートフルセッション Bean ですので、remove メソッドを持つ必要があります:"

#~ msgid ""
#~ "<![CDATA[   @Remove\n"
#~ "   public void remove()\n"
#~ "   {\n"
#~ "      \n"
#~ "   }]]>"
#~ msgstr ""
#~ "<![CDATA[   @Remove\n"
#~ "   public void remove()\n"
#~ "   {\n"
#~ "      \n"
#~ "   }]]>"

#~ msgid "The Web Beans manager will call the remove method for you when the bean is destroyed; in this case at the end of the request."
#~ msgstr "Web Beans マネージャは、Bean が破棄されるときにremove メソッドを呼び出します。このサンプルの場合は、リクエストの終わりです。"

#~ msgid "That concludes our short tour of the Web Beans examples. For more on Web Beans , or to help out, please visit <ulink url=\"http://www.seamframework.org/WebBeans/Development\">http://www.seamframework.org/WebBeans/Development</ulink>."
#~ msgstr "Web Beans サンプルの短いツアーはこれで終わります。Web Beans についての詳細や手助けをするには、どうぞ <ulink url=\"http://www.seamframework.org/WebBeans/Development\">http://www.seamframework.org/WebBeans/Development</ulink> にアクセスしてください。"

#~ msgid "We need help in all areas - bug fixing, writing new features, writing examples and translating this reference guide."
#~ msgstr "私たちはすべての領域 - バクフィックス、新機能の記述、サンプルの記述、リファレンスガイドの翻訳で協力を必要としています。"
