# Language pt-BR translations for Web_Beans:_Java_Contexts_and_Dependency_Injection package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Web_Beans:_Java_Contexts_and_Dependency_Injection VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:16\n"
"PO-Revision-Date: 2009-12-19 18:10-0300\n"
"Last-Translator: João Paulo Viragine <joao.viragine@redhat.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Application servers and environments supported by Weld"
msgstr "Servidores de Aplicação e ambientes suportados pela Web Beans"

#. Tag: title
#, fuzzy, no-c-format
msgid "Using Weld with JBoss AS"
msgstr "Utilizando a Web Beans com o JBoss AS"

#. Tag: para
#, no-c-format
msgid "If you are using JBoss AS 6.0, no additional configuration is required to use Weld (or CDI for that matter). All you need to do is make your application a bean bean archive by adding <literal>META-INF/beans.xml</literal> to the classpath or <literal>WEB-INF/beans.xml</literal> to the web root!"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Additionally, Weld Servlet supports JBoss EAP 5.1, to do this use the <literal>jboss5</literal> variant of Weld Servlet."
msgstr ""

#. Tag: title
#, no-c-format
msgid "GlassFish"
msgstr "GlassFish"

#. Tag: para
#, no-c-format
msgid "Weld is also built into GlassFish from V3 onwards. Since GlassFish V3 is the Java EE 6 reference implementation, it must support all features of CDI. What better way for GlassFish to support these features than to use Weld, the JSR-299 reference implementation? Just package up your CDI application and deploy."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Servlet containers (such as Tomcat or Jetty)"
msgstr "Servlet Containers (como o Tomcat ou Jetty)"

#. Tag: para
#, fuzzy, no-c-format
msgid "While JSR-299 does not require support for servlet environments, Weld can be used in a servlet container, such as Tomcat 6.0 or Jetty 6.1."
msgstr "A Web Beans pode ser utilizada em qualquer Servlet container como o Tomcat 6.0 ou Jetty 6.1."

#. Tag: para
#, fuzzy, no-c-format
msgid "There is a major limitation to using a servlet container. Weld doesn&#39;t support deploying session beans, injection using <literal>@EJB</literal> or <literal>@PersistenceContext</literal>, or using transactional events in servlet containers. For enterprise features such as these, you should really be looking at a Java EE application server."
msgstr "A Web Beans não suporta a implantação de session beans, injeção utilizando <literal>@EJB</literal>, <literal>@Resource</literal>, ou <literal>@PersistenceContext</literal>, ou eventos transacionais no Tomcat."

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld can be used as a library in an web application that is deployed to a Servlet container. You should place <literal>weld-servlet.jar</literal> within the <literal>WEB-INF/lib</literal> directory relative to the web root. <literal>weld-servlet.jar</literal> is an &#34;uber-jar&#34;, meaning it bundles all the bits of Weld and CDI required for running in a Servlet container, for your convenience. Alternatively, you can use its component jars. A list of transitive dependencies can be found in the META-INF/DEPENDENCIES.txt file inside the <literal>weld-servlet.jar</literal> artifact."
msgstr "A Web Beans deveria ser utilizada como uma bibilioteca de aplicação web no Tomcat. Você deve colocar o <literal>webbeans-tomcat.jar</literal> em <literal>WEB-INF/lib</literal>. <literal>webbeans-tomcat.jar</literal> é um \"hiper-jar\", disponível para a sua conveniência. Em vez disso, você pode utilizar os componentes do jars:"

#. Tag: para
#, fuzzy, no-c-format
msgid "You also need to explicitly specify the servlet listener (used to boot Weld, and control its interaction with requests) in <literal>WEB-INF/web.xml</literal> in the web root:"
msgstr "Você também precisa especificar explicitamente o Tomcat servlet listener (utilizado para \"bootar\" a Web Beans e controlar a interação com as requisições) no <literal>web.xml</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"&#60;listener&#62;\n"
"   &#60;listener-class&#62;org.jboss.weld.environment.servlet.Listener&#60;/listener-class&#62;\n"
"&#60;/listener&#62;"
msgstr ""
"<![CDATA[<listener>\n"
"   <listener-class>org.jboss.weld.environment.servlet.Listener</listener-class>\n"
"</listener>]]>"

#. Tag: title
#, no-c-format
msgid "Tomcat"
msgstr "Tomcat"

#. Tag: para
#, fuzzy, no-c-format
msgid "Tomcat has a read-only JNDI, so Weld can&#39;t automatically bind the BeanManager extension SPI. To bind the BeanManager into JNDI, you should populate <literal>META-INF/context.xml</literal> in the web root with the following contents:"
msgstr "O Tomcat tem um JNDI apenas de leitura. Assim, a Web Beans não pode vincular automaticamente o Manager. Para vincular o Manager no JNDI, você deve adicionar o seguinte ao seu <literal>META-INF/context.xml</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"&#60;Context&#62;\n"
"   &#60;Resource name=&#34;BeanManager&#34; \n"
"      auth=&#34;Container&#34;\n"
"      type=&#34;javax.enterprise.inject.spi.BeanManager&#34;\n"
"      factory=&#34;org.jboss.weld.resources.ManagerObjectFactory&#34;/&#62;\n"
"&#60;/Context&#62;"
msgstr ""
"<![CDATA[<Context>\n"
"   <Resource name=\"BeanManager\" \n"
"      auth=\"Container\"\n"
"      type=\"javax.enterprise.inject.spi.BeanManager\"\n"
"      factory=\"org.jboss.weld.resources.ManagerObjectFactory\"/>\n"
"</Context>]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "and make it available to your deployment by adding this to the bottom of <literal>web.xml</literal>:"
msgstr "e torná-lo disponível para a sua implantação, acrescentando-o ao <literal>web.xml</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"&#60;resource-env-ref&#62;\n"
"   &#60;resource-env-ref-name&#62;BeanManager&#60;/resource-env-ref-name&#62;\n"
"   &#60;resource-env-ref-type&#62;\n"
"      javax.enterprise.inject.spi.BeanManager\n"
"   &#60;/resource-env-ref-type&#62;\n"
"&#60;/resource-env-ref&#62;"
msgstr ""
"<![CDATA[<resource-env-ref>\n"
"   <resource-env-ref-name>BeanManager</resource-env-ref-name>\n"
"   <resource-env-ref-type>\n"
"      javax.enterprise.inject.spi.BeanManager\n"
"   </resource-env-ref-type>\n"
"</resource-env-ref>]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Tomcat only allows you to bind entries to <literal>java:comp/env</literal>, so the BeanManager will be available at <literal>java:comp/env/BeanManager</literal>"
msgstr "O Tomcat não só permite a você vincular as entradas para <literal>java:comp/env</literal>, assim que o Manager estará disponível em <literal>java:comp/env/app/Manager</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld also supports Servlet injection in Tomcat 6."
msgstr "Web Beans atualmente não suporta injeção de Servlet no Jetty."

#. Tag: title
#, no-c-format
msgid "Jetty"
msgstr "Jetty"

#. Tag: para
#, fuzzy, no-c-format
msgid "Like Tomcat, Jetty has a read-only JNDI, so Weld can&#39;t automatically bind the BeanManager. To bind the BeanManager to JNDI in Jetty 6, you should populate <literal>WEB-INF/jetty-env.xml</literal> with the following contents:"
msgstr "O Tomcat tem um JNDI apenas de leitura. Assim, a Web Beans não pode vincular automaticamente o Manager. Para vincular o Manager no JNDI, você deve adicionar o seguinte ao seu <literal>META-INF/context.xml</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"&#60;!DOCTYPE Configure PUBLIC &#34;-//Mort Bay Consulting//DTD Configure//EN&#34;\n"
"   &#34;http://jetty.mortbay.org/configure.dtd&#34;&#62;\n"
"&#60;Configure id=&#34;webAppCtx&#34; class=&#34;org.mortbay.jetty.webapp.WebAppContext&#34;&#62;\n"
"   &#60;New id=&#34;BeanManager&#34; class=&#34;org.mortbay.jetty.plus.naming.Resource&#34;&#62;\n"
"      &#60;Arg&#62;&#60;Ref id=&#34;webAppCtx&#34;/&#62;&#60;/Arg&#62; \n"
"      &#60;Arg&#62;BeanManager&#60;/Arg&#62;\n"
"      &#60;Arg&#62;\n"
"         &#60;New class=&#34;javax.naming.Reference&#34;&#62;\n"
"            &#60;Arg&#62;javax.enterprise.inject.spi.BeanManager&#60;/Arg&#62; \n"
"            &#60;Arg&#62;org.jboss.weld.resources.ManagerObjectFactory&#60;/Arg&#62;\n"
"            &#60;Arg/&#62;\n"
"         &#60;/New&#62;\n"
"      &#60;/Arg&#62;\n"
"   &#60;/New&#62;\n"
"&#60;/Configure&#62;"
msgstr ""
"<![CDATA[<!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure//EN\"\n"
"   \"http://jetty.mortbay.org/configure.dtd\">\n"
"<Configure id=\"webAppCtx\" class=\"org.mortbay.jetty.webapp.WebAppContext\">\n"
"   <New id=\"BeanManager\" class=\"org.mortbay.jetty.plus.naming.Resource\">\n"
"      <Arg><Ref id=\"webAppCtx\"/></Arg> \n"
"      <Arg>BeanManager</Arg>\n"
"      <Arg>\n"
"         <New class=\"javax.naming.Reference\">\n"
"            <Arg>javax.enterprise.inject.spi.BeanManager</Arg> \n"
"            <Arg>org.jboss.weld.resources.ManagerObjectFactory</Arg>\n"
"            <Arg/>\n"
"         </New>\n"
"      </Arg>\n"
"   </New>\n"
"</Configure>]]>"

#. Tag: para
#, no-c-format
msgid "Jetty 7 has moved to the Eclipse Foundation; if you are using Jetty 7 put the following in your <literal>WEB-INF/jetty-env.xml</literal>:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"&#60;!DOCTYPE Configure PUBLIC &#34;-//Mort Bay Consulting//DTD Configure//EN&#34;\n"
"   &#34;http://www.eclipse.org/jetty/configure.dtd&#34;&#62;\n"
"\n"
"&#60;Configure id=&#34;webAppCtx&#34; class=&#34;org.eclipse.jetty.webapp.WebAppContext&#34;&#62;\n"
"    &#60;New id=&#34;BeanManager&#34; class=&#34;org.eclipse.jetty.plus.jndi.Resource&#34;&#62;\n"
"        &#60;Arg&#62; &#60;Ref id=&#34;webAppCtx&#34;/&#62; &#60;/Arg&#62;\n"
"        &#60;Arg&#62;BeanManager&#60;/Arg&#62;\n"
"        &#60;Arg&#62;\n"
"            &#60;New class=&#34;javax.naming.Reference&#34;&#62;\n"
"                &#60;Arg&#62;javax.enterprise.inject.spi.BeanManager&#60;/Arg&#62;\n"
"                &#60;Arg&#62;org.jboss.weld.resources.ManagerObjectFactory&#60;/Arg&#62;\n"
"                &#60;Arg/&#62;\n"
"            &#60;/New&#62;\n"
"        &#60;/Arg&#62;\n"
"    &#60;/New&#62;\n"
"&#60;/Configure&#62; "
msgstr ""
"<![CDATA[<!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure//EN\"\n"
"   \"http://jetty.mortbay.org/configure.dtd\">\n"
"<Configure id=\"webAppCtx\" class=\"org.mortbay.jetty.webapp.WebAppContext\">\n"
"   <New id=\"BeanManager\" class=\"org.mortbay.jetty.plus.naming.Resource\">\n"
"      <Arg><Ref id=\"webAppCtx\"/></Arg> \n"
"      <Arg>BeanManager</Arg>\n"
"      <Arg>\n"
"         <New class=\"javax.naming.Reference\">\n"
"            <Arg>javax.enterprise.inject.spi.BeanManager</Arg> \n"
"            <Arg>org.jboss.weld.resources.ManagerObjectFactory</Arg>\n"
"            <Arg/>\n"
"         </New>\n"
"      </Arg>\n"
"   </New>\n"
"</Configure>]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Just like in Tomcat, you need to make it available to your deployment by adding this to the bottom of <literal>web.xml</literal>:"
msgstr "e torná-lo disponível para a sua implantação, acrescentando-o ao <literal>web.xml</literal>:"

#. Tag: para
#, no-c-format
msgid "Notice that Jetty doesn&#39;t not have built-in support for an <literal>javax.naming.spi.ObjectFactory</literal> like Tomcat, so it&#39;s necessary to manually create the <literal>javax.naming.Reference</literal> to wrap around it."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Jetty only allows you to bind entries to <literal>java:comp/env</literal>, so the BeanManager will be available at <literal>java:comp/env/BeanManager</literal>"
msgstr "O Tomcat não só permite a você vincular as entradas para <literal>java:comp/env</literal>, assim que o Manager estará disponível em <literal>java:comp/env/app/Manager</literal>"

#. Tag: para
#, no-c-format
msgid "Weld also supports Servlet injection in Jetty 6. To enable this, add the file <literal>META-INF/jetty-web.xml</literal> with the following content to your war:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;!DOCTYPE Configure PUBLIC &#34;-//Mort Bay Consulting//DTD Configure//EN&#34;\n"
"   &#34;http://jetty.mortbay.org/configure.dtd&#34;&#62;\n"
"&#60;Configure id=&#34;webAppCtx&#34; class=&#34;org.mortbay.jetty.webapp.WebAppContext&#34;&#62;\n"
"   &#60;Call class=&#34;org.jboss.weld.environment.jetty.WeldServletHandler&#34; name=&#34;process&#34;&#62;\n"
"      &#60;Arg&#62;&#60;Ref id=&#34;webAppCtx&#34;/&#62;&#60;/Arg&#62;\n"
"   &#60;/Call&#62;\n"
"&#60;/Configure&#62;"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Java SE"
msgstr "Java SE"

#. Tag: para
#, no-c-format
msgid "In addition to improved integration of the Enterprise Java stack, the &#34;Contexts and Dependency Injection for the Java EE platform&#34; specification also defines a state of the art typesafe, stateful dependency injection framework, which can prove useful in a wide range of application types. To help developers take advantage of this, Weld provides a simple means for being executed in the Java Standard Edition (SE) environment independently of any Java EE APIs."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "When executing in the SE environment the following features of Weld are available:"
msgstr "Quando executando no ambiente SE as seguintes funcionalidades da Web Beans estão disponíveis:"

#. Tag: para
#, no-c-format
msgid "Managed beans with <literal>@PostConstruct</literal> and <literal>@PreDestroy</literal> lifecycle callbacks"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Dependency injection with qualifiers and alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>@Application</literal>, <literal>@Dependent</literal> and <literal>@Singleton</literal> scopes"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Interceptors and decorators"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Stereotypes"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Events"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Portable extension support"
msgstr ""

#. Tag: para
#, no-c-format
msgid "EJB beans are not supported."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "CDI SE Module"
msgstr "Módulo Web Beans SE"

#. Tag: para
#, no-c-format
msgid "Weld provides an extension which will boot a CDI bean manager in Java SE, automatically registering all simple beans found on the classpath. The command line parameters can be injected using either of the following:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Parameters List&#60;String&#62; params;"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Parameters String[] paramsArray;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second form is useful for compatibility with existing classes."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The command line parameters do not become available for injection until the <literal>ContainerInitialized</literal> event is fired. If you need access to the parameters during initialization you can do so via the <literal>public static String[] getParameters()</literal> method in <literal>StartMain</literal>."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Here&#39;s an example of a simple CDI SE application:"
msgstr "Aqui está um exemplo de uma simples aplicação Web Beans SE:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Singleton\n"
"public class HelloWorld\n"
"{\n"
"   public void printHello(@Observes ContainerInitialized event, @Parameters List&#60;String&#62; parameters) {\n"
"       System.out.println(&#34;Hello &#34; + parameters.get(0));\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@ApplicationScoped\n"
"public class HelloWorld\n"
"{\n"
"   @Inject @Parameters List<String> parameters;\n"
"\n"
"   public void printHello(@Observes ContainerInitialized event) {\n"
"       System.out.println(\"Hello \" + parameters.get(0));\n"
"   }\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Bootstrapping CDI SE"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI SE applications can be bootstrapped in the following ways."
msgstr "Aplicações Web Beans SE são iniciadas executando o seguinte método principal."

#. Tag: title
#, no-c-format
msgid "The ContainerInitialized Event"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Thanks to the power of CDI&#39;s typesafe event model, application developers need not write any bootstrapping code. The Weld SE module comes with a built-in main method which will bootstrap CDI for you and then fire a <literal>ContainerInitialized</literal> event. The entry point for your application code would therefore be a simple bean which observes the <literal>ContainerInitialized</literal> event, as in the previous example."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "In this case your application can be started by calling the provided main method like so:"
msgstr "Aplicações Web Beans SE são iniciadas executando o seguinte método principal."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "java org.jboss.weld.environment.se.StartMain &#60;args&#62;"
msgstr "<![CDATA[java org.jboss.weld.environments.se.StartMain <args>]]>"

#. Tag: title
#, no-c-format
msgid "Programatic Bootstrap API"
msgstr ""

#. Tag: para
#, no-c-format
msgid "For added flexibility, CDI SE also comes with a bootstrap API which can be called from within your application in order to initialize CDI and obtain references to your application&#39;s beans and events. The API consists of two classes: <literal>Weld</literal> and <literal>WeldContainer</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class Weld\n"
"{\n"
"\n"
"   /** Boots Weld and creates and returns a WeldContainer instance, through which\n"
"    * beans and events can be accesed. */\n"
"   public WeldContainer initialize() {...}\n"
"\n"
"   /** Convenience method for shutting down the container. */\n"
"   public void shutdown() {...}\n"
"\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class WeldContainer\n"
"{\n"
"\n"
"   /** Provides access to all beans within the application. */\n"
"   public Instance&#60;Object&#62; instance() {...}\n"
"\n"
"   /** Provides access to all events within the application. */\n"
"   public Event&#60;Object&#62; event() {...}\n"
"\n"
"   /** Provides direct access to the BeanManager. */\n"
"   public BeanManager getBeanManager() {...}\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here&#39;s an example application main method which uses this API to initialize a bean of type <literal>MyApplicationBean</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public static void main(String[] args) {\n"
"   WeldContainer weld = new Weld().initialize();\n"
"   weld.instance().select(MyApplicationBean.class).get();\n"
"   weld.shutdown();\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Alternatively the application could be started by firing a custom event which would then be observed by another simple bean. The following example fires <literal>MyEvent</literal> on startup."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public static void main(String[] args) {\n"
"   WeldContainer weld = new Weld().initialize();\n"
"   weld.event().select(MyEvent.class).fire( new MyEvent() );\n"
"   weld.shutdown();\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Thread Context"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In contrast to Java EE applications, Java SE applications place no restrictions on developers regarding the creation and usage of threads. Therefore Weld SE provides a custom scope annotation, <literal>@ThreadScoped</literal>, and corresponding context implementation which can be used to bind bean instances to the current thread. It is intended to be used in scenarios where you might otherwise use <literal>ThreadLocal</literal>, and does in fact use <literal>ThreadLocal</literal> under the hood."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To use the @ThreadScoped annotation you need to enable the <literal>RunnableDecorator</literal> which &#39;listens&#39; for all executions of <literal>Runnable.run()</literal> and decorates them by setting up the thread context beforehand, bound to the current thread, and destroying the context afterwards."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans&#62;\n"
"  &#60;decorators&#62;\n"
"     &#60;decorator&#62;org.jboss.weld.environment.se.threading.RunnableDecorator&#60;/decorator&#62;\n"
"  &#60;/decorator&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "It is not necessary to use @ThreadScoped in all multithreaded applications. The thread context is not intended as a replacement for defining your own application-specific contexts. It is generally only useful in situtations where you would otherwise have used ThreadLocal directly, which are typically rare."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Setting the Classpath"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld SE comes packaged as a &#39;shaded&#39; jar which includes the CDI API, Weld Core and all dependant classes bundled into a single jar. Therefore the only Weld jar you need on the classpath, in addition to your application&#39;s classes and dependant jars, is the Weld SE jar. If you are working with a pure Java SE application you launch using <literal>java</literal>, this may be simpler for you."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you prefer to work with individual dependencies, then you can use the <literal>weld-core</literal> jar which just contains the Weld SE classes. Of course in this mode you will need to assemble the classpath yourself. This mode is useful, for example, if you wish to use an alternative slf4j log binding."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you work with a dependency management solution such as Maven you can declare a dependency on <literal>org.jboss.weld.se:weld-se-core</literal>."
msgstr ""

#, fuzzy
#~ msgid "A new deployer, <literal>weld.deployer</literal> is added to JBoss AS. This adds supports for JSR-299 deployments to JBoss AS, and allows Weld to query the EJB 3 container and discover which EJBs are installed in your application. It also performs an upgrade of the Javassist library, if necessary."
#~ msgstr "Um novo deployer <literal>webbeans.deployer</literal> é adicionado ao JBoss AS. Isso adiciona suporte a implantações JSR-299 no JBoss AS e permite à Web Beans consultar o EJB3 container e descobrir quais EJBs estão instalados na sua aplicação."

#, fuzzy
#~ msgid "<literal>weld-logging.jar</literal>"
#~ msgstr "webbeans-logging.jar"

#, fuzzy
#~ msgid "<literal>weld-servlet-int.jar</literal>"
#~ msgstr "webbeans-servlet-int.jar"

#~ msgid "<![CDATA[jboss.home=/path/to/jboss-as-5.x]]>"
#~ msgstr "<![CDATA[jboss.home=/path/to/jboss-as-5.x]]>"

#, fuzzy
#~ msgid ""
#~ "$> cd jboss-as\n"
#~ "$> ant update"
#~ msgstr ""
#~ "$ cd webbeans-$VERSION/jboss-as\n"
#~ "$ ant update"

#~ msgid "jsr299-api.jar"
#~ msgstr "jsr299-api.jar"

#, fuzzy
#~ msgid "weld-api.jar"
#~ msgstr "webbeans-api.jar"

#, fuzzy
#~ msgid "weld-spi.jar"
#~ msgstr "webbeans-spi.jar"

#, fuzzy
#~ msgid "weld-core.jar"
#~ msgstr "webbeans-core.jar"

#~ msgid "javassist.jar"
#~ msgstr "javassist.jar"

#~ msgid "dom4j.jar"
#~ msgstr "dom4j.jar"

#~ msgid "<![CDATA[<Listener className=\"org.jboss.weld.environment.tomcat.WeldLifecycleListener\"/>]]>"
#~ msgstr "<![CDATA[<Listener className=\"org.jboss.weld.environment.tomcat.WeldLifecycleListener\"/>]]>"

#~ msgid ""
#~ "<![CDATA[@Inject @Parameters List<String> params;\n"
#~ "@Inject @Parameters String[] paramsArray; // useful for compatability with existing classes]]>"
#~ msgstr ""
#~ "<![CDATA[@Inject @Parameters List<String> params;\n"
#~ "@Inject @Parameters String[] paramsArray; // useful for compatability with existing classes]]>"

#~ msgid ""
#~ "<![CDATA[public class PerformSetup {\n"
#~ "   public void setup(@Observes AfterBeanDiscovery event) {\n"
#~ "      event.addContext( ThreadContext.INSTANCE );\n"
#~ "   }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public class PerformSetup {\n"
#~ "   public void setup(@Observes AfterBeanDiscovery event) {\n"
#~ "      event.addContext( ThreadContext.INSTANCE );\n"
#~ "   }\n"
#~ "}]]>"

#~ msgid "No special configuration of your application, beyond adding either <literal>META-INF/beans.xml</literal> or <literal>WEB-INF/beans.xml</literal> is needed."
#~ msgstr "Além da adição de <literal>META-INF/beans.xml</literal> ou <literal>WEB-INF/beans.xml</literal>, nenhuma outra configuração especial na sua aplicação é necessária."

#~ msgid "If you are using JBoss AS 5.0.1.GA then you'll need to install Web Beans as an extra. First we need to tell Web Beans where JBoss is located. Edit <literal>jboss-as/build.properties</literal> and set the <literal>jboss.home</literal> property. For example:"
#~ msgstr "Se você estiver usando o JBoss AS 5.0.1.GA, então  precisará instalar a Web Beans como um extra. Primeiro, precisamos  dizer à Web Beans onde o JBoss está localizado. Editar o  <literal>jboss-as/build.properties</literal> e definir a propriedade <literal>jboss.home</literal>. Por exemplo:"

#~ msgid "Now we can install Web Beans:"
#~ msgstr "Agora podemos instalar a Web Beans:"

#~ msgid "Web Beans is built into all releases of JBoss AS from 5.1 onwards."
#~ msgstr "A Web Beans está embutida em todas as versões do JBoss AS a partir da versão 5.1."

#~ msgid "TODO"
#~ msgstr "TODO"

#~ msgid "Simple Web Beans (POJOs)"
#~ msgstr "Web Beans Simples (POJOs)"
