# Language pt-BR translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Introduction_to_Web_Beans VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2009-12-19 18:03-0300\n"
"Last-Translator: João Paulo Viragine <joao.viragine@redhat.com>\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Portable extensions"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI is intended to be a foundation for frameworks, extensions and integration with other technologies. Therefore, CDI exposes a set of SPIs for the use of developers of portable extensions to CDI. For example, the following kinds of extensions were envisaged by the designers of CDI:"
msgstr "A Web Beans pretende ser uma plataforma para frameworks, extensões e integração com outras tecnologias. Portanto,a  Web Beans expõe um conjunto de SPIs para a utilização pelos desenvolvedores de extensões portáveis para Web Beans. Por exemplo, os seguintes tipos de extensões estavam previstas pelos designers da Web Beans:"

#. Tag: para
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr "Integração com motores de gerenciamento de processos de negócios (Business Process Management)"

#. Tag: para
#, no-c-format
msgid "integration with third-party frameworks such as Spring, Seam, GWT or Wicket, and"
msgstr "integração com frameworks de terceiros, tais como Spring, Seam, GWT ou Wicket, e"

#. Tag: para
#, fuzzy, no-c-format
msgid "new technology based upon the CDI programming model."
msgstr "nova tecnologia baseada no modelo de programação da Web Beans."

#. Tag: para
#, no-c-format
msgid "More formally, according to the spec:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A portable extension may integrate with the container by:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing its own beans, interceptors and decorators to the container"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Injecting dependencies into its own objects using the dependency injection service"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing a context implementation for a custom scope"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Augmenting or overriding the annotation-based metadata with metadata from some other source"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Creating an <literal>Extension</literal>"
msgstr "A classe <literal>Bean</literal> "

#. Tag: para
#, no-c-format
msgid "The first step in creating a portable extension is to write a class that implements <literal>Extension</literal>. This marker interface does not define any methods, but it&#39;s needed to satisfy the requirements of Java SE&#39;s service provider architecture."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "class MyExtension implements Extension { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Next, we need to register our extension as a service provider by creating a file named <literal>META-INF/services/javax.enterprise.inject.spi.Extension</literal>, which contains the name of our extension class:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "org.mydomain.extension.MyExtension"
msgstr ""

#. Tag: para
#, no-c-format
msgid "An extension is not a bean, exactly, since it is instantiated by the container during the initialization process, before any beans or contexts exist. However, it can be injected into other beans once the initialization process is complete."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject \n"
"MyBean(MyExtension myExtension) {\n"
"   myExtension.doSomething();\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "And, like beans, extensions can have observer methods. Usually, the observer methods observe <emphasis>container lifecycle events</emphasis>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Container lifecycle events"
msgstr ""

#. Tag: para
#, no-c-format
msgid "During the initialization process, the container fires a series of events, including:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>BeforeBeanDiscovery</literal>"
msgstr "O objeto <literal>Manager</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ProcessAnnotatedType</literal>"
msgstr "O objeto <literal>Manager</literal>"

#. Tag: para
#, no-c-format
msgid "<literal>ProcessInjectionTarget</literal> and <literal>ProcessProducer</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>ProcessBean</literal> and <literal>ProcessObserverMethod</literal>"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>AfterBeanDiscovery</literal>"
msgstr "O objeto <literal>Manager</literal>"

#. Tag: para
#, no-c-format
msgid "<literal>AfterDeploymentValidation</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Extensions may observe these events:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class MyExtension implements Extension {\n"
"   \n"
"   void beforeBeanDiscovery(@Observes BeforeBeanDiscovery bbd) {\n"
"      Logger.global.debug(&#34;beginning the scanning process&#34;);\n"
"   }\n"
"      \n"
"   &#60;T&#62; void processAnnotatedType(@Observes ProcessAnnotatedType&#60;T&#62; pat) {\n"
"      Logger.global.debug(&#34;scanning type: &#34; + pat.getAnnotatedType().getJavaClass().getName());\n"
"   } \n"
"\n"
"   void afterBeanDiscovery(@Observes AfterBeanDiscovery abd) {\n"
"      Logger.global.debug(&#34;finished the scanning process&#34;);\n"
"   }\n"
"   \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In fact, the extension can do a lot more than just observe. The extension is permitted to modify the container&#39;s metamodel and more. Here&#39;s a very simple example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class MyExtension implements Extension {\n"
"      \n"
"   &#60;T&#62; void processAnnotatedType(@Observes ProcessAnnotatedType&#60;T&#62; pat) {\n"
"      //tell the container to ignore the type if it is annotated @Ignore\n"
"      if ( pat.getAnnotatedType().isAnnotionPresent(Ignore.class) ) pat.veto();   \n"
"   } \n"
"   \n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "The observer method may inject a <literal>BeanManager</literal>"
msgstr "O nervo central para estender a Web Beans é o objeto <literal>Manager</literal>."

#. Tag: programlisting
#, no-c-format
msgid "&#60;T&#62; void processAnnotatedType(@Observes ProcessAnnotatedType&#60;T&#62; pat, BeanManager beanManager) { ... }"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>BeanManager</literal> object"
msgstr "O objeto <literal>Manager</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The nerve center for extending CDI is the <literal>BeanManager</literal> object. The <literal>BeanManager</literal> interface lets us obtain beans, interceptors, decorators, observers and contexts programmatically."
msgstr "A interface <literal>Manager</literal> permite, programaticamente, registrar e obter Web Beans, interceptadores, decoradores,  observadores e contextos."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public interface BeanManager {\n"
"   public Object getReference(Bean&#60;?&#62; bean, Type beanType, CreationalContext&#60;?&#62; ctx);\n"
"   public Object getInjectableReference(InjectionPoint ij, CreationalContext&#60;?&#62; ctx);\n"
"   public &#60;T&#62; CreationalContext&#60;T&#62; createCreationalContext(Contextual&#60;T&#62; contextual);\n"
"   public Set&#60;Bean&#60;?&#62;&#62; getBeans(Type beanType, Annotation... qualifiers);\n"
"   public Set&#60;Bean&#60;?&#62;&#62; getBeans(String name);\n"
"   public Bean&#60;?&#62; getPassivationCapableBean(String id);\n"
"   public &#60;X&#62; Bean&#60;? extends X&#62; resolve(Set&#60;Bean&#60;? extends X&#62;&#62; beans);\n"
"   public void validate(InjectionPoint injectionPoint);\n"
"   public void fireEvent(Object event, Annotation... qualifiers);\n"
"   public &#60;T&#62; Set&#60;ObserverMethod&#60;? super T&#62;&#62; resolveObserverMethods(T event, Annotation... qualifiers);\n"
"   public List&#60;Decorator&#60;?&#62;&#62; resolveDecorators(Set&#60;Type&#62; types, Annotation... qualifiers);\n"
"   public List&#60;Interceptor&#60;?&#62;&#62; resolveInterceptors(InterceptionType type, Annotation... interceptorBindings);\n"
"   public boolean isScope(Class&#60;? extends Annotation&#62; annotationType);\n"
"   public boolean isNormalScope(Class&#60;? extends Annotation&#62; annotationType);\n"
"   public boolean isPassivatingScope(Class&#60;? extends Annotation&#62; annotationType);\n"
"   public boolean isQualifier(Class&#60;? extends Annotation&#62; annotationType);\n"
"   public boolean isInterceptorBinding(Class&#60;? extends Annotation&#62; annotationType);\n"
"   public boolean isStereotype(Class&#60;? extends Annotation&#62; annotationType);\n"
"   public Set&#60;Annotation&#62; getInterceptorBindingDefinition(Class&#60;? extends Annotation&#62; bindingType);\n"
"   public Set&#60;Annotation&#62; getStereotypeDefinition(Class&#60;? extends Annotation&#62; stereotype);\n"
"   public Context getContext(Class&#60;? extends Annotation&#62; scopeType);\n"
"   public ELResolver getELResolver();\n"
"   public ExpressionFactory wrapExpressionFactory(ExpressionFactory expressionFactory);\n"
"   public &#60;T&#62; AnnotatedType&#60;T&#62; createAnnotatedType(Class&#60;T&#62; type);\n"
"   public &#60;T&#62; InjectionTarget&#60;T&#62; createInjectionTarget(AnnotatedType&#60;T&#62; type);\n"
"}"
msgstr ""
"<![CDATA[public interface Manager {\n"
"   public Object getReference(Bean<?> bean, Type beanType, CreationalContext<?> ctx);\n"
"   public Object getInjectableReference(InjectionPoint ij, CreationalContext<?> ctx);\n"
"   public <T> CreationalContext<T> createCreationalContext(Contextual<T> contextual);\n"
"   public Set<Bean<?>> getBeans(Type beanType, Annotation... bindings);\n"
"   public Set<Bean<?>> getBeans(String name);\n"
"   public <X> Bean<? extends X> getMostSpecializedBean(Bean<X> bean);\n"
"   public Bean<?> getPassivationCapableBean(String id);\n"
"   public <X> Bean<? extends X> resolve(Set<Bean<? extends X>> beans);\n"
"   public void validate(InjectionPoint injectionPoint);\n"
"   public void fireEvent(Object event, Annotation... bindings);\n"
"   public <T> Set<ObserverMethod<?, T>> resolveObserverMethods(T event, Annotation... bindings);\n"
"   public List<Decorator<?>> resolveDecorators(Set<Type> types, Annotation... bindings);\n"
"   public List<Interceptor<?>> resolveInterceptors(InterceptionType type, Annotation... interceptorBindings);\n"
"   public boolean isScope(Class<? extends Annotation> annotationType);\n"
"   public boolean isNormalScope(Class<? extends Annotation> annotationType);\n"
"   public boolean isPassivatingScope(Class<? extends Annotation> annotationType);\n"
"   public boolean isQualifier(Class<? extends Annotation> annotationType);\n"
"   public boolean isInterceptorBindingType(Class<? extends Annotation> annotationType);\n"
"   public boolean isStereotype(Class<? extends Annotation> annotationType);\n"
"   public Set<Annotation> getInterceptorBindingTypeDefinition(Class<? extends Annotation> bindingType);\n"
"   public Set<Annotation> getStereotypeDefinition(Class<? extends Annotation> stereotype);\n"
"   public Context getContext(Class<? extends Annotation> scopeType);\n"
"   public ELResolver getELResolver();\n"
"   public ExpressionFactory wrapExpressionFactory(ExpressionFactory expressionFactory);\n"
"   public <T> AnnotatedType<T> createAnnotatedType(Class<T> type);\n"
"   public <T> InjectionTarget<T> createInjectionTarget(AnnotatedType<T> type);\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Any bean or other Java EE component which supports injection can obtain an instance of <literal>BeanManager</literal> via injection:"
msgstr "Nós podemos obter uma instância do <literal>Manager</literal> via injeção:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject BeanManager beanManager;"
msgstr "@Current Manager manager"

#. Tag: para
#, no-c-format
msgid "Java EE components may obtain an instance of <literal>BeanManager</literal> from JNDI by looking up the name <literal>java:comp/BeanManager</literal>. Any operation of <literal>BeanManager</literal> may be called at any time during the execution of the application."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Let&#39;s study some of the interfaces exposed by the <literal>BeanManager</literal>."
msgstr "O nervo central para estender a Web Beans é o objeto <literal>Manager</literal>."

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>InjectionTarget</literal> interface"
msgstr "A interface <literal>Context</literal>"

#. Tag: para
#, no-c-format
msgid "The first thing that a framework developer is going to look for in the portable extension SPI is a way to inject CDI beans into objects which are not under the control of CDI. The <literal>InjectionTarget</literal> interface makes this very easy."
msgstr ""

#. Tag: para
#, no-c-format
msgid "We recommend that frameworks let CDI take over the job of actually instantiating the framework-controlled objects. That way, the framework-controlled objects can take advantage of constructor injection. However, if the framework requires use of a constructor with a special signature, the framework will need to instatiate the object itself, and so only method and field injection will be supported."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"//get the BeanManager from JNDI\n"
"BeanManager beanManager = (BeanManager) new InitialContext().lookup(&#34;java:comp/BeanManager&#34;);\n"
"\n"
"//CDI uses an AnnotatedType object to read the annotations of a class\n"
"AnnotatedType&#60;SomeFrameworkComponent&#62; type = beanManager.createAnnotatedType(SomeFrameworkComponent.class);\n"
"\n"
"//The extension uses an InjectionTarget to delegate instantiation, dependency injection \n"
"//and lifecycle callbacks to the CDI container\n"
"InjectionTarget&#60;SomeFrameworkComponent&#62; it = beanManager.createInjectionTarget(type);\n"
"\n"
"//each instance needs its own CDI CreationalContext\n"
"CreationalContext ctx = beanManager.createCreationalContext(null);\n"
"\n"
"//instantiate the framework component and inject its dependencies\n"
"SomeFrameworkComponent instance = it.produce(ctx);  //call the constructor\n"
"it.inject(instance, ctx);  //call initializer methods and perform field injection\n"
"it.postConstruct(instance);  //call the @PostConstruct method\n"
"\n"
"...\n"
"\n"
"//destroy the framework component instance and clean up dependent objects\n"
"it.preDestroy(instance);  //call the @PreDestroy method\n"
"it.dispose(instance);  //it is now safe to discard the instance\n"
"ctx.release();  //clean up dependent objects\n"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>Bean</literal> interface"
msgstr "A interface <literal>Context</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Instances of the interface <literal>Bean</literal> represent beans. There is an instance of <literal>Bean</literal> registered with the <literal>BeanManager</literal> object for every bean in the application. There are even <literal>Bean</literal> objects representing interceptors, decorators and producer methods."
msgstr "Instâncias da classe abstrata <literal>Bean</literal> representam Web Beans. Existe uma instância do <literal>Bean</literal> registrado com o objeto <literal>Manager</literal> para todos os Web Beans da aplicação."

#. Tag: para
#, no-c-format
msgid "The <literal>Bean</literal> interface exposes all the interesting things we dicussed in <xref linkend=\"bean-anatomy\" />."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public interface Bean&#60;T&#62; extends Contextual&#60;T&#62; {\n"
"   public Set&#60;Type&#62; getTypes();\n"
"   public Set&#60;Annotation&#62; getQualifiers();\n"
"   public Class&#60;? extends Annotation&#62; getScope();\n"
"   public String getName();\n"
"   public Set&#60;Class&#60;? extends Annotation&#62;&#62; getStereotypes();\n"
"   public Class&#60;?&#62; getBeanClass();\n"
"   public boolean isAlternative();\n"
"   public boolean isNullable();\n"
"   public Set&#60;InjectionPoint&#62; getInjectionPoints();\n"
"}"
msgstr ""
"<![CDATA[public interface Bean<T> extends Contextual<T> {\n"
"   public Set<Type> getTypes();\n"
"   public Set<Annotation> getQualifiers();\n"
"   public Class<? extends Annotation> getScope();\n"
"   public String getName();\n"
"   public Set<Class<? extends Annotation>> getStereotypes();\n"
"   public Class<?> getBeanClass();\n"
"   public boolean isAlternative();\n"
"   public boolean isNullable();\n"
"   public Set<InjectionPoint> getInjectionPoints();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "There&#39;s an easy way to find out what beans exist in the application:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "Set&#60;Bean&#60;?&#62;&#62; allBeans = beanManager.getBeans(Obect.class, new AnnotationLiteral&#60;Any&#62;() {});"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "The <literal>Bean</literal> interface makes it possible for a portable extension to provide support for new kinds of beans, beyond those defined by the CDI specification. For example, we could use the <literal>Bean</literal> interface to allow objects managed by another framework to be injected into beans."
msgstr "É possível estender a classe <literal>Bean</literal> e registrar instâncias através da chamada <literal>Manager.addBean()</literal>, para fornecer suporte para novos tipos de Web Beans, além dos definidos pela especificação Web Beans (Web Beans simples e coporativos, métodos produtores e endpoints JMS). Por exemplo, poderíamos usar a classe <literal>Bean</literal> para permitir que os objetos gerenciados por um outro framework possam ser injetados nos Web Beans."

#. Tag: title
#, fuzzy, no-c-format
msgid "Registering a <literal>Bean</literal>"
msgstr "A classe <literal>Bean</literal> "

#. Tag: para
#, no-c-format
msgid "The most common kind of CDI portable extension registers a bean (or beans) with the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example, we make a framework class, <literal>SecurityManager</literal> available for injection. To make things a bit more interesting, we&#39;re going to delegate back to the container&#39;s <literal>InjectionTarget</literal> to perform instantiation and injection upon the <literal>SecurityManager</literal> instance."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class SecurityManagerExtension implements Extension {\n"
"    \n"
"    void afterBeanDiscovery(@Observes AfterBeanDiscovery abd, BeanManager bm) {\n"
"            \n"
"        //use this to read annotations of the class\n"
"        AnnotatedType&#60;SecurityManager&#62; at = bm.createAnnotatedType(SecurityManager.class); \n"
"\n"
"        //use this to instantiate the class and inject dependencies\n"
"        final InjectionTarget&#60;SecurityManager&#62; it = bm.createInjectionTarget(at); \n"
"\n"
"        abd.addBean( new Bean&#60;SecurityManager&#62;() {\n"
"\n"
"            @Override\n"
"            public Class&#60;?&#62; getBeanClass() {\n"
"                return SecurityManager.class;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;InjectionPoint&#62; getInjectionPoints() {\n"
"                return it.getInjectionPoints();\n"
"            }\n"
"\n"
"            @Override\n"
"            public String getName() {\n"
"                return &#34;securityManager&#34;;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;Annotation&#62; getQualifiers() {\n"
"                Set&#60;Annotation&#62; qualifiers = new HashSet&#60;Annotation&#62;();\n"
"                qualifiers.add( new AnnotationLiteral&#60;Default&#62;() {} );\n"
"                qualifiers.add( new AnnotationLiteral&#60;Any&#62;() {} );\n"
"                return qualifiers;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Class&#60;? extends Annotation&#62; getScope() {\n"
"                return SessionScoped.class;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;Class&#60;? extends Annotation&#62;&#62; getStereotypes() {\n"
"                return Collections.emptySet();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;Type&#62; getTypes() {\n"
"                Set&#60;Type&#62; types = new HashSet&#60;Type&#62;();\n"
"                types.add(SecurityManager.class);\n"
"                types.add(Object.class);\n"
"                return types;\n"
"            }\n"
"\n"
"            @Override\n"
"            public boolean isAlternative() {\n"
"                return false;\n"
"            }\n"
"\n"
"            @Override\n"
"            public boolean isNullable() {\n"
"                return false;\n"
"            }\n"
"\n"
"            @Override\n"
"            public SecurityManager create(CreationalContext&#60;SecurityManager&#62; ctx) {\n"
"                SecurityManager instance = it.produce(ctx);\n"
"                it.inject(instance, ctx);\n"
"                it.postConstruct(instance);\n"
"                return instance;\n"
"            }\n"
"\n"
"            @Override\n"
"            public void destroy(SecurityManager instance, \n"
"                                CreationalContext&#60;SecurityManager&#62; ctx) {\n"
"                it.preDestroy(instance);\n"
"                it.dispose(instance);\n"
"                ctx.release();\n"
"            }\n"
"            \n"
"        } );\n"
"    }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "But a portable extension can also mess with beans that are discovered automatically by the container."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>AnnotatedType</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "One of the most interesting things that an extension class can do is process the annotations of a bean class <emphasis>before</emphasis> the container builds its metamodel."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let&#39;s start with an example of an extension that provides support for the use of <literal>@Named</literal> at the package level. The package-level name is used to qualify the EL names of all beans defined in that package. The portable extension uses the <literal>ProcessAnnotatedType</literal> event to wrap the <literal>AnnotatedType</literal> object and override the <literal>value()</literal> of the <literal>@Named</literal> annotation."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class QualifiedNameExtension implements Extension {\n"
"\n"
"    &#60;X&#62; void processAnnotatedType(@Observes ProcessAnnotatedType&#60;X&#62; pat) {\n"
"\n"
"        //wrap this to override the annotations of the class\n"
"        final AnnotatedType&#60;X&#62; at = pat.getAnnotatedType();\n"
"        \n"
"        AnnotatedType&#60;X&#62; wrapped = new AnnotatedType&#60;X&#62;() {\n"
"\n"
"            @Override\n"
"            public Set&#60;AnnotatedConstructor&#60;X&#62;&#62; getConstructors() {\n"
"                return at.getConstructors();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;AnnotatedField&#60;? super X&#62;&#62; getFields() {\n"
"                return at.getFields();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Class&#60;X&#62; getJavaClass() {\n"
"                return at.getJavaClass();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;AnnotatedMethod&#60;? super X&#62;&#62; getMethods() {\n"
"                return at.getMethods();\n"
"            }\n"
"\n"
"            @Override\n"
"            public &#60;T extends Annotation&#62; T getAnnotation(final Class&#60;T&#62; annType) {\n"
"                if ( Named.class.equals(annType) ) {\n"
"                    class NamedLiteral \n"
"                            extends AnnotationLiteral&#60;Named&#62; \n"
"                            implements Named {\n"
"                        @Override\n"
"                        public String value() {\n"
"                            Package pkg = at.getClass().getPackage();\n"
"                            String unqualifiedName = at.getAnnotation(Named.class).value();\n"
"                            final String qualifiedName;\n"
"                            if ( pkg.isAnnotationPresent(Named.class) ) {\n"
"                                qualifiedName = pkg.getAnnotation(Named.class).value() \n"
"                                      + &#39;.&#39; + unqualifiedName;\n"
"                            }\n"
"                            else {\n"
"                                qualifiedName = unqualifiedName;\n"
"                            }\n"
"                            return qualifiedName;\n"
"                        }\n"
"                    }\n"
"                    return (T) new NamedLiteral();\n"
"                }\n"
"                else {\n"
"                    return at.getAnnotation(annType);\n"
"                }\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;Annotation&#62; getAnnotations() {\n"
"                return at.getAnnotations();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Type getBaseType() {\n"
"                return at.getBaseType();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;Type&#62; getTypeClosure() {\n"
"                return at.getTypeClosure();\n"
"            }\n"
"\n"
"            @Override\n"
"            public boolean isAnnotationPresent(Class&#60;? extends Annotation&#62; annType) {\n"
"                return at.isAnnotationPresent(annType);\n"
"            }\n"
"            \n"
"        };\n"
"        \n"
"        pat.setAnnotatedType(wrapped);\n"
"    }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here&#39;s a second example, which adds the <literal>@Alternative</literal> annotation to any class which implements a certain <literal>Service</literal> interface."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class ServiceAlternativeExtension implements Extension {\n"
"      \n"
"   &#60;T&#62; void processAnnotatedType(@Observes ProcessAnnotatedType&#60;T&#62; pat) {\n"
"   \n"
"      final AnnotatedType&#60;T&#62; type = pat.getAnnotatedType();\n"
"      \n"
"      if ( Service.class.isAssignableFrom( type.getJavaClass() ) ) {\n"
"      \n"
"         //if the class implements Service, make it an @Alternative\n"
"         AnnotatedType&#60;T&#62; wrapped = new AnnotatedType&#60;T&#62;() {\n"
"         \n"
"            @Override\n"
"            public boolean isAnnotationPresent(Class&#60;? extends Annotation&#62; annotationType) {\n"
"               return annotationType.equals(Alternative.class) ? \n"
"                  true : type.isAnnotationPresent(annotationType);\n"
"            }\n"
"            \n"
"            //remaining methods of AnnotatedType\n"
"            ...\n"
"         }\n"
"         \n"
"         pat.setAnnotatedType(wrapped);\n"
"      }\n"
"   } \n"
"   \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>AnnotatedType</literal> is not the only thing that can be wrapped by an extension."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>InjectionTarget</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>InjectionTarget</literal> interface exposes operations for producing and disposing an instance of a component, injecting its dependencies and invoking its lifecycle callbacks. A portable extension may wrap the <literal>InjectionTarget</literal> for any Java EE component that supports injection, allowing it to intercept any of these operations when they are invoked by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here&#39;s a CDI portable extension that reads values from properties files and configures fields of Java EE components, including servlets, EJBs, managed beans, interceptors and more. In this example, properties for a class such as <literal>org.mydomain.blog.Blogger</literal> go in a resource named <literal>org/mydomain/blog/Blogger.properties</literal>, and the name of a property must match the name of the field to be configured. So <literal>Blogger.properties</literal> could contain:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"firstName=Gavin\n"
"lastName=King"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The portable extension works by wrapping the containers <literal>InjectionTarget</literal> and setting field values from the <literal>inject()</literal> method."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class ConfigExtension implements Extension {\n"
"\n"
"\t&#60;X&#62; void processInjectionTarget(@Observes ProcessInjectionTarget&#60;X&#62; pit) {\n"
"\t\t\n"
"\t\t//wrap this to intercept the component lifecycle\n"
"\t    final InjectionTarget&#60;X&#62; it = pit.getInjectionTarget();\n"
"\t    \n"
"        final Map&#60;Field, Object&#62; configuredValues = new HashMap&#60;Field, Object&#62;();\n"
"        \n"
"        //use this to read annotations of the class and its members\n"
"        AnnotatedType&#60;X&#62; at = pit.getAnnotatedType();\n"
"        \n"
"        //read the properties file\n"
"        String propsFileName = at.getClass().getSimpleName() + &#34;.properties&#34;;\n"
"        InputStream stream = at.getJavaClass().getResourceAsStream(propsFileName);\n"
"        if (stream!=null) {\n"
"            \n"
"            try {\n"
"                Properties props = new Properties();\n"
"                props.load(stream);\n"
"                for (Map.Entry&#60;Object, Object&#62; property : props.entrySet()) {\n"
"                    String fieldName = property.getKey().toString();\n"
"                    Object value = property.getValue();\n"
"                    try {\n"
"                        Field field = at.getJavaClass().getField(fieldName);\n"
"                        field.setAccessible(true);\n"
"                        if ( field.getType().isAssignableFrom( value.getClass() ) ) {\n"
"                            configuredValues.put(field, value);\n"
"                        }\n"
"                        else {\n"
"                            //TODO: do type conversion automatically\n"
"                            pit.addDefinitionError( new InjectionException(\n"
"                                   &#34;field is not of type String: &#34; + field ) );\n"
"                        }\n"
"                    }\n"
"                    catch (NoSuchFieldException nsfe) {\n"
"                        pit.addDefinitionError(nsfe);\n"
"                    }\n"
"                    finally {\n"
"                        stream.close();\n"
"                    }\n"
"                }\n"
"            }\n"
"            catch (IOException ioe) {\n"
"                pit.addDefinitionError(ioe);\n"
"            }\n"
"        }\n"
"        \n"
"        InjectionTarget&#60;X&#62; wrapped = new InjectionTarget&#60;X&#62;() {\n"
"\n"
"            @Override\n"
"            public void inject(X instance, CreationalContext&#60;X&#62; ctx) {\n"
"                it.inject(instance, ctx);\n"
"                \n"
"                //set the values onto the new instance of the component\n"
"                for (Map.Entry&#60;Field, Object&#62; configuredValue: configuredValues.entrySet()) {\n"
"                    try {\n"
"                        configuredValue.getKey().set(instance, configuredValue.getValue());\n"
"                    }\n"
"                    catch (Exception e) {\n"
"                        throw new InjectionException(e);\n"
"                    }\n"
"                }\n"
"            }\n"
"\n"
"            @Override\n"
"            public void postConstruct(X instance) {\n"
"                it.postConstruct(instance);\n"
"            }\n"
"\n"
"            @Override\n"
"            public void preDestroy(X instance) {\n"
"                it.dispose(instance);\n"
"            }\n"
"\n"
"            @Override\n"
"            public void dispose(X instance) {\n"
"                it.dispose(instance);\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&#60;InjectionPoint&#62; getInjectionPoints() {\n"
"                return it.getInjectionPoints();\n"
"            }\n"
"\n"
"            @Override\n"
"            public X produce(CreationalContext&#60;X&#62; ctx) {\n"
"                return it.produce(ctx);\n"
"            }\n"
"            \n"
"        };\n"
"        \n"
"        pit.setInjectionTarget(wrapped);\n"
"        \n"
"    }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There&#39;s a lot more to the portable extension SPI than what we&#39;ve discussed here. Check out the CDI spec or Javadoc for more information. For now, we&#39;ll just mention one more extension point."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr "A interface <literal>Context</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid "The <literal>Context</literal> interface supports addition of new scopes to CDI, or extension of the built-in scopes to new environments."
msgstr "A interface <literal>Context</literal> suporta a adição de novos escopos a Web Beans, ou extensões dos escopos existentes para novos ambientes."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public interface Context {\n"
"   public Class&#60;? extends Annotation&#62; getScope();\n"
"   public &#60;T&#62; T get(Contextual&#60;T&#62; contextual, CreationalContext&#60;T&#62; creationalContext);\n"
"   public &#60;T&#62; T get(Contextual&#60;T&#62; contextual);\n"
"   boolean isActive();\n"
"}"
msgstr ""
"<![CDATA[public interface Context {\n"
"   public Class<? extends Annotation> getScope();\n"
"   public <T> T get(Contextual<T> contextual, CreationalContext<T> creationalContext);\n"
"   public <T> T get(Contextual<T> contextual);\n"
"   boolean isActive();\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "For example, we might implement <literal>Context</literal> to add a business process scope to CDI, or to add support for the conversation scope to an application that uses Wicket."
msgstr "Por exemplo, nós poderíamos implementar <literal>Context</literal> para adicionar um escopo de processo de negócios a Web Beans, ou para adicionar suporte ao escopo de conversação a uma aplicação que utiliza o Wicket."

#, fuzzy
#~ msgid "There are two subinterfaces of <literal>Bean</literal> defined by the CDI specification: <literal>Interceptor</literal> and <literal>Decorator</literal>."
#~ msgstr "Existem duas subclasses de <literal>Bean</literal> definidas pela especificação de Web Beans: <literal>Interceptor</literal> e <literal>Decorator</literal>."

#~ msgid "Extending Web Beans"
#~ msgstr "Estendendo a Web Beans"

#~ msgid ""
#~ "<![CDATA[public interface Manager\n"
#~ "{\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(Class<T> type, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public Set<Bean<?>> resolveByName(String name);\n"
#~ "\n"
#~ "   public Object getInstanceByName(String name);\n"
#~ "\n"
#~ "   public <T> T getInstance(Bean<T> bean);\n"
#~ "\n"
#~ "   public void fireEvent(Object event, Annotation... bindings);\n"
#~ "\n"
#~ "   public Context getContext(Class<? extends Annotation> scopeType);\n"
#~ "\n"
#~ "   public Manager addContext(Context context);\n"
#~ "\n"
#~ "   public Manager addBean(Bean<?> bean);\n"
#~ "\n"
#~ "   public Manager addInterceptor(Interceptor interceptor);\n"
#~ "\n"
#~ "   public Manager addDecorator(Decorator decorator);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, Class<T> eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer, Class<T> eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer,\n"
#~ "         TypeLiteral<T> eventType, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... bindings);\n"
#~ "\n"
#~ "   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
#~ "         Annotation... interceptorBindings);\n"
#~ "\n"
#~ "   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public interface Manager\n"
#~ "{\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(Class<T> type, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public Set<Bean<?>> resolveByName(String name);\n"
#~ "\n"
#~ "   public Object getInstanceByName(String name);\n"
#~ "\n"
#~ "   public <T> T getInstance(Bean<T> bean);\n"
#~ "\n"
#~ "   public void fireEvent(Object event, Annotation... bindings);\n"
#~ "\n"
#~ "   public Context getContext(Class<? extends Annotation> scopeType);\n"
#~ "\n"
#~ "   public Manager addContext(Context context);\n"
#~ "\n"
#~ "   public Manager addBean(Bean<?> bean);\n"
#~ "\n"
#~ "   public Manager addInterceptor(Interceptor interceptor);\n"
#~ "\n"
#~ "   public Manager addDecorator(Decorator decorator);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, Class<T> eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer, Class<T> eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer,\n"
#~ "         TypeLiteral<T> eventType, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... bindings);\n"
#~ "\n"
#~ "   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
#~ "         Annotation... interceptorBindings);\n"
#~ "\n"
#~ "   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "}]]>"

#~ msgid ""
#~ "public abstract class Bean&lt;T&gt; {\n"
#~ "    \n"
#~ "    private final Manager manager;\n"
#~ "    \n"
#~ "    protected Bean(Manager manager) {\n"
#~ "        this.manager=manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    protected Manager getManager() {\n"
#~ "        return manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    public abstract Set&lt;Class&gt; getTypes();\n"
#~ "    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getDeploymentType(); \n"
#~ "    public abstract String getName();\n"
#~ "    \n"
#~ "    public abstract boolean isSerializable();\n"
#~ "    public abstract boolean isNullable();\n"
#~ "\n"
#~ "    public abstract T create();\n"
#~ "    public abstract void destroy(T instance);\n"
#~ "    \n"
#~ "}"
#~ msgstr ""
#~ "public abstract class Bean&lt;T&gt; {\n"
#~ "    \n"
#~ "    private final Manager manager;\n"
#~ "    \n"
#~ "    protected Bean(Manager manager) {\n"
#~ "        this.manager=manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    protected Manager getManager() {\n"
#~ "        return manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    public abstract Set&lt;Class&gt; getTypes();\n"
#~ "    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getDeploymentType(); \n"
#~ "    public abstract String getName();\n"
#~ "    \n"
#~ "    public abstract boolean isSerializable();\n"
#~ "    public abstract boolean isNullable();\n"
#~ "\n"
#~ "    public abstract T create();\n"
#~ "    public abstract void destroy(T instance);\n"
#~ "    \n"
#~ "}"
