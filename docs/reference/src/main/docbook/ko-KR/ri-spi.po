# translation of ri-spi.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: ri-spi\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:18\n"
"PO-Revision-Date: 2009-01-19 13:32+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Integrating Weld into other environments"
msgstr "Web Beans RI를 다른 환경으로 통합 "

#. Tag: para
#, no-c-format
msgid "If you want to use Weld in another environment, you will need to provide certain information to Weld via the integration SPI. In this Appendix we will briefly discuss the steps needed."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Enterprise Services"
msgstr "리소스 불러오기 "

#. Tag: para
#, no-c-format
msgid "If you just want to use managed beans, and not take advantage of enterprise services (EE resource injection, CDI injection into EE component classes, transactional events, support for CDI services in EJBs) and non-flat deployments, then the generic servlet support provided by the &#34;Weld: Servlets&#34; extension will be sufficient, and will work in any container supporting the Servlet API."
msgstr ""

#. Tag: para
#, no-c-format
msgid "All SPIs and APIs described have extensive JavaDoc, which spell out the detailed contract between the container and Weld."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The Weld SPI"
msgstr "Web Beans RI SPI "

#. Tag: para
#, fuzzy, no-c-format
msgid "The Weld SPI is located in the <literal>weld-spi</literal> module, and packaged as <literal>weld-spi.jar</literal>. Some SPIs are optional, and should only be implemented if you need to override the default behavior; others are required."
msgstr "Web Beans SPI는 <literal>webbeans-ri-spi</literal> 모듈에 위치하고 있으며 <literal>webbeans-ri-spi.jar</literal>로 패키징되어 있습니다. 일부 SPI는 옵션 사항이며, 기본값 동작을 덮어쓰기해야할 경우, 다른 사항이 필요합니다. "

#. Tag: para
#, no-c-format
msgid "All interfaces in the SPI support the decorator pattern and provide a <literal>Forwarding</literal> class located in the <literal>helpers</literal> sub package. Additional, commonly used, utility classes, and standard implementations are also located in the <literal>helpers</literal> sub package."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld supports multiple environments. An environment is defined by an implementation of the <literal>Environment</literal> interface. A number of standard environments are built in, and described by the <literal>Environments</literal> enumeration. Different environments require different services to be present (for example a Servlet container doesn&#39;t require transaction, EJB or JPA services). By default an EE environment is assumed, but you can adjust the environment by calling <literal>bootstrap.setEnvironment()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld uses a generic-typed service registry to allow services to be registered. All services implement the <literal>Service</literal> interface. The service registry allows services to be added and retrieved."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Deployment structure"
msgstr ""

#. Tag: para
#, no-c-format
msgid "An application is often comprised of a number of modules. For example, a Java EE deployment may contain a number of EJB modules (containing business logic) and war modules (containing the user interface). A container may enforce certain <emphasis>accessibility</emphasis> rules which limit the visibility of classes between modules. CDI allows these same rules to apply to bean and observer method resolution. As the accessibility rules vary between containers, Weld requires the container to <emphasis>describe</emphasis> the deployment structure, via the <literal>Deployment</literal> SPI."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI specification discusses <emphasis>Bean Deployment Archives</emphasis> (BDAs)—archives which are marked as containing beans which should be deployed to the CDI container, and made available for injection and resolution. Weld reuses this description of <emphasis>Bean Deployment Archives</emphasis> in its deployment structure SPI. Each deployment exposes the BDAs which it contains; each BDA may also reference other which it can access. Together, the transitive closure of this graph forms the beans which are deployed in the application."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To describe the deployment structure to Weld, the container should provide an implementation of <literal>Deployment</literal>. <literal>Deployment.getBeanDeploymentArchives()</literal> allows Weld to discover the modules which make up the application. The CDI specification also allows beans to be specified programmatically as part of the bean deployment. These beans may, or may not, be in an existing BDA. For this reason, Weld will call <literal>Deployment.loadBeanDeploymentArchive(Class clazz)</literal> for each programmatically described bean."
msgstr ""

#. Tag: para
#, no-c-format
msgid "As programmatically described beans may result in additional BDAs being added to the graph, Weld will discover the BDA structure every time an unknown BDA is returned by <literal>Deployment.loadBeanDeploymentArchive</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Virtual BDAs"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In a strict container, each BDA might have to explicitly specify which other BDAs it can access. However many containers will allow an easy mechanism to make BDAs bi-directionally accessible (such as a library directory). In this case, it is allowable (and reasonable) to describe all such archives as a single, &#39;virtual&#39; <literal>BeanDeploymentArchive</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "A container, might, for example, use a flat accessibility structure for the application. In this case, a single <literal>BeanDeploymentArchive</literal> would be attached to the <literal>Deployment</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>BeanDeploymentArchive</literal> provides three methods which allow it&#39;s contents to be discovered by Weld—<literal>BeanDeploymentArchive.getBeanClasses()</literal> must return all the classes in the BDA, <literal>BeanDeploymentArchive.getBeansXml()</literal> must return a data structure representing the <code>beans.xml</code> deployment descriptor for the archive, and <literal>BeanDeploymentArchive.getEjbs()</literal> must provide an EJB descriptor for every EJB in the BDA, or an empty list if it is not an EJB archive."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To aid container integrator, Weld provides a built-in <code>beans.xml</code> parser. To parse a <code>beans.xml</code> into the data-structure required by <code>BeanDeploymentArchive</code>, the container should call <code>Bootstrap.parseBeansXml(URL)</code>. Weld can also parse multiple <code>beans.xml</code> files, merging them to become a single data-structure. This can be achieved by calling <code>Bootstrap.parseBeansXml(Iterable&#60;URL&#62;)</code>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "BDA X may also reference another BDA Y whose beans can be resolved by, and injected into, any bean in BDA X. These are the accessible BDAs, and every BDA that is directly accessible by BDA X should be returned. A BDA will also have BDAs which are accessible transitively, and the transitive closure of the sub-graph of BDA X describes all the beans resolvable by BDA X."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Matching the classloader structure for the deployment"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In practice, you can regard the deployment structure represented by <literal>Deployment</literal>, and the virtual BDA graph as a mirror of the classloader structure for a deployment. If a class can from BDA X can be loaded by another in BDA Y, it is accessible, and therefore BDA Y&#39;s accessible BDAs should include BDA X."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To specify the directly accessible BDAs, the container should provide an implementation of <literal>BeanDeploymentArchive.getBeanDeploymentArchives()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld allows the container to describe a circular graph, and will convert a graph to a tree as part of the deployment process."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Certain services are provided for the whole deployment, whilst some are provided per-BDA. BDA services are provided using <literal>BeanDeploymentArchive.getServices()</literal> and only apply to the BDA on which they are provided."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The contract for <code>Deployment</code> requires the container to specify the portable extensions (see chapter 12 of the CDI specification) which should be loaded by the application. To aid the container integrator, Weld provides the method <code>Bootstrap.loadExtensions(ClassLoader)</code> which will load the extensions for the specified classloader."
msgstr ""

#. Tag: title
#, no-c-format
msgid "EJB descriptors"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld delegates EJB 3 bean discovery to the container so that it doesn&#39;t duplicate the work done by the EJB container, and respects any vendor-extensions to the EJB definition."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "The <literal>EjbDescriptor</literal> should return the relevant metadata as defined in the EJB specification. Each business interface of a session bean should be described using a <literal>BusinessInterfaceDescriptor</literal>."
msgstr "<literal>EjbDescriptor</literal>는 쉽게 알 수 있어야 하며 EJB 사양에 정의되어 있음으로 관련된 메타데이터를 반환해야 합니다. 이러한 두 가지 인터페이스에 더하여, 로컬 비지니스 인터페이스를 나타내는 <literal>BusinessInterfaceDescriptor</literal>가 있습니다. (EJB 인스턴스를 검색하는데 사용되는 인터페이스 클래스 및 jndi 이름을 캡슐화)  "

#. Tag: title
#, no-c-format
msgid "EE resource injection and resolution services"
msgstr ""

#. Tag: para
#, no-c-format
msgid "All the EE resource services are per-BDA services, and may be provided using one of two methods. Which method to use is at the discretion of the integrator."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The integrator may choose to provide all EE resource injection services themselves, using another library or framework. In this case the integrator should use the <literal>EE</literal> environment, and implement the <xref linkend=\"injection.services\" /> SPI."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Alternatively, the integrator may choose to use CDI to provide EE resource injection. In this case, the <literal>EE_INJECT</literal> environment should be used, and the integrator should implement the <xref linkend=\"ejb.services.resolution\" />, <xref linkend=\"resource.services\" /> and <xref linkend=\"jpa.services\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI only provides annotation-based EE resource injection; if you wish to provide deployment descriptor (e.g. <literal>ejb-jar.xml</literal>) injection, you must use <xref linkend=\"injection.services\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If the container performs EE resource injection, the injected resources must be serializable. If EE resource injection is provided by Weld, the resolved resource must be serializable."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you use a non-EE environment then you may implement any of the EE service SPIs, and Weld will provide the associated functionality. There is no need to implement those services you don&#39;t need!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "EJB services"
msgstr ""

#. Tag: para
#, no-c-format
msgid "EJB services are split between two interfaces which are both per-BDA."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>EJBServices</literal> is used to resolve local EJBs used to back session beans, and must always be provided in an EE environment. <literal>EJBServices.resolveEjb(EjbDescriptor ejbDescriptor)</literal> returns a wrapper—<literal>SessionObjectReference</literal>—around the EJB reference. This wrapper allows Weld to request a reference that implements the given business interface, and, in the case of SFSBs, both request the removal of the EJB from the container and query whether the EJB has been previously removed."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>EJBResolutionServices.resolveEjb(InjectionPoint ij)</literal> allows the resolution of <literal>@EJB</literal> (for injection into managed beans). This service is not required if the implementation of <xref linkend=\"injection.services\" /> takes care of <literal>@EJB</literal> injection."
msgstr ""

#. Tag: title
#, no-c-format
msgid "JPA services"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Just as EJB resolution is delegated to the container, resolution of <literal>@PersistenceContext</literal> for injection into managed beans (with the <literal>InjectionPoint</literal> provided), is delegated to the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To allow JPA integration, the <literal>JpaServices</literal> interface should be implemented. This service is not required if the implementation of <xref linkend=\"injection.services\" /> takes care of <literal>@PersistenceContext</literal> injection."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Transaction Services"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld delegates JTA activities to the container. The SPI provides a couple hooks to easily achieve this with the <literal>TransactionServices</literal> interface."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Any <literal>javax.transaction.Synchronization</literal> implementation may be passed to the <literal>registerSynchronization()</literal> method and the SPI implementation should immediately register the synchronization with the JTA transaction manager used for the EJBs."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To make it easier to determine whether or not a transaction is currently active for the requesting thread, the <literal>isTransactionActive()</literal> method can be used. The SPI implementation should query the same JTA transaction manager used for the EJBs."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Resource Services"
msgstr "리소스 불러오기 "

#. Tag: para
#, no-c-format
msgid "The resolution of <literal>@Resource</literal> (for injection into managed beans) is delegated to the container. You must provide an implementation of <literal>ResourceServices</literal> which provides these operations. This service is not required if the implementation of <xref linkend=\"injection.services\" /> takes care of <literal>@Resource</literal> injection."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Injection Services"
msgstr "리소스 불러오기 "

#. Tag: para
#, no-c-format
msgid "An integrator may wish to use <literal>InjectionServices</literal> to provide additional field or method injection over-and-above that provided by Weld. An integration into a Java EE environment may use <literal>InjectionServices</literal> to provide EE resource injection for managed beans."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>InjectionServices</literal> provides a very simple contract, the <literal>InjectionServices.aroundInject(InjectionContext ic);</literal> intercepter will be called for every instance that CDI injects, whether it is a contextual instance, or a non-contextual instance injected by <literal>InjectionTarget.inject()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>InjectionContext</literal> can be used to discover additional information about the injection being performed, including the <literal>target</literal> being injected. <literal>ic.proceed()</literal> should be called to perform CDI-style injection, and call initializer methods."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Security Services"
msgstr "리소스 불러오기 "

#. Tag: para
#, no-c-format
msgid "In order to obtain the <literal>Principal</literal> representing the current caller identity, the container should provide an implementation of <literal>SecurityServices</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Bean Validation Services"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In order to obtain the default <literal>ValidatorFactory</literal> for the application deployment, the container should provide an implementation of <literal>ValidationServices</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Identifying the BDA being addressed"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When a client makes a request to an application which uses Weld, the request may be addressed at any of the BDAs in the application deployment. To allow Weld to correctly service the request, it needs to know which BDA the request is addressed at. Where possible, Weld will provide some context, but use of these by the integrator is optional."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Most Servlet contains use a classloader-per-war, this may provide a good way to identify the BDA in use for web requests."
msgstr ""

#. Tag: para
#, no-c-format
msgid "When Weld needs to identify the BDA, it will use one of these services, depending on what is servicing the request:"
msgstr ""

#. Tag: term
#, no-c-format
msgid "<literal>ServletServices.getBeanDeploymentArchive(ServletContext ctx)</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Identify the war in use. The <literal>ServletContext</literal> is provided for additional context."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The bean store"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld uses a map like structure to store bean instances - <literal>org.jboss.weld.context.api.BeanStore</literal>. You may find <literal>org.jboss.weld.context.api.helpers.ConcurrentHashMapBeanStore</literal> useful."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The application context"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld expects the Application Server or other container to provide the storage for each application&#39;s context. The <literal>org.jboss.weld.context.api.BeanStore</literal> should be implemented to provide an application scoped storage."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Initialization and shutdown"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>org.jboss.weld.bootstrap.api.Bootstrap</literal> interface defines the initialization for Weld, bean deployment and bean validation. To boot Weld, you must create an instance of <literal>org.jboss.weld.bootstrap.WeldBeansBootstrap</literal> (which implements <literal>Boostrap</literal>), tell it about the services in use, and then request the container start."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The bootstrap is split into phases, container initialization, bean deployment, bean validation and shutdown. Initialization will create a manager, and add the built-in contexts, and examine the deployment structure. Bean deployment will deploy any beans (defined using annotations, programtically, or built in). Bean validation will validate all beans."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To initialize the container, you call <literal>Bootstrap.startInitialization()</literal>. Before calling <literal>startInitialization()</literal>, you must register any services required by the environment. You can do this by calling, for example, <literal>bootstrap.getServices().add(JpaServices.class, new MyJpaServices())</literal>. You must also provide the application context bean store."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Having called <literal>startInitialization()</literal>, the <literal>Manager</literal> for each BDA can be obtained by calling <literal>Bootstrap.getManager(BeanDeploymentArchive bda)</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To deploy the discovered beans, call <literal>Bootstrap.deployBeans()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To validate the deployed beans, call <literal>Bootstrap.validateBeans()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To place the container into a state where it can service requests, call <literal>Bootstrap.endInitialization()</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To shutdown the container you call <literal>Bootstrap.shutdown()</literal>. This allows the container to perform any cleanup operations needed."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Resource loading"
msgstr "리소스 불러오기 "

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld needs to load classes and resources from the classpath at various times. By default, they are loaded from the Thread Context ClassLoader if available, if not the same classloader that was used to load Weld, however this may not be correct for some environments. If this is case, you can implement <literal>org.jboss.weld.spi.ResourceLoader</literal>."
msgstr "Web Beans RI는 여러번 classpath에서 클래스 및 리소스를 불러와야 합니다. 기본값으로 RI를 불러오기 위해 사용되었던 동일한 classloader에서 로딩되지만, 일부 환경에서는 작동하지 않을 수 도 있습니다. 이러한 경우, <literal>org.jboss.webbeans.spi.ResourceLoader</literal>를 구현할 수 있습니다:  "

#. Tag: title
#, no-c-format
msgid "The contract with the container"
msgstr "컨테이너와 계약 "

#. Tag: para
#, fuzzy, no-c-format
msgid "There are a number of requirements that Weld places on the container for correct functioning that fall outside implementation of APIs."
msgstr "API의 외부 구현에서의 올바른 기능을 실행하게 하기 위해 Web Beans RI이 컨테이너에 위치하게 해야 할 여러 요구 사항이 있습니다 "

#. Tag: term
#, no-c-format
msgid "Classloader isolation"
msgstr "Classloader 분리 "

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into an environment that supports deployment of multiple applications, you must enable, automatically, or through user configuation, classloader isolation for each CDI application."
msgstr "Web Beans RI를 다수의 애플리케이션의 운용을 지원하는 환경으로 통합할 경우, 각각의 Web Beans 애플리케이션에 대한 클래스로더 분리를 자동으로 또는 사용자 설정을 통해 반드시 활성화해야 합니다.   "

#. Tag: term
#, no-c-format
msgid "Servlet"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into a Servlet environment you must register <literal>org.jboss.weld.servlet.WeldListener</literal> as a Servlet listener, either automatically, or through user configuration, for each CDI application which uses Servlet."
msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#. Tag: para
#, no-c-format
msgid "You must ensure that that <literal>WeldListener.contextInitialized()</literal> is called after beans are deployed is complete (<literal>Bootstrap.deployBeans()</literal> has been called)."
msgstr ""

#. Tag: term
#, no-c-format
msgid "JSF"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into a JSF environment you must register <literal>org.jboss.weld.jsf.WeldPhaseListener</literal> as a phase listener."
msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into a JSF environment you must register <literal>org.jboss.weld.el.WeldELContextListener</literal> as an EL Context listener."
msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into a JSF environment you must register <literal>org.jboss.weld.jsf.ConversationAwareViewHandler</literal> as a delegating view handler."
msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#. Tag: para
#, no-c-format
msgid "If you are integrating Weld into a JSF environment you must obtain the bean manager for the module and then call <literal>BeanManager.wrapExpressionFactory()</literal>, passing <literal>Application.getExpressionFactory()</literal> as the argument. The wrapped expression factory must be used in all EL expression evaluations performed by JSF in this web application."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you are integrating Weld into a JSF environment you must obtain the bean manager for the module and then call <literal>BeanManager.getELResolver()</literal>, The returned EL resolver should be registered with JSF for this web application."
msgstr ""

#. Tag: para
#, no-c-format
msgid "There are a number of ways you can obtain the bean manager for the module. You could call <literal>Bootstrap.getManager()</literal>, passing in the BDA for this module. Alternatively, you could use the injection into Java EE component classes, or look up the bean manager in JNDI."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into a JSF environment you must register <literal>org.jboss.weld.servlet.ConversationPropagationFilter</literal> as a Servlet listener, either automatically, or through user configuration, for each CDI application which uses JSF. This filter can be registered for all Servlet deployment safely."
msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#. Tag: para
#, no-c-format
msgid "Weld only supports JSF 1.2 and above."
msgstr ""

#. Tag: term
#, no-c-format
msgid "JSP"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into a JSP environment you must register <literal>org.jboss.weld.el.WeldELContextListener</literal> as an EL Context listener."
msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#. Tag: para
#, no-c-format
msgid "If you are integrating Weld into a JSP environment you must obtain the bean manager for the module and then call <literal>BeanManager.wrapExpressionFactory()</literal>, passing <literal>Application.getExpressionFactory()</literal> as the argument. The wrapped expression factory must be used in all EL expression evaluations performed by JSP."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you are integrating Weld into a JSP environment you must obtain the bean manager for the module and then call <literal>BeanManager.getELResolver()</literal>, The returned EL resolver should be registered with JSP for this web application."
msgstr ""

#. Tag: term
#, no-c-format
msgid "Session Bean Interceptor"
msgstr "Session Bean 인터셉터 "

#. Tag: para
#, fuzzy, no-c-format
msgid "If you are integrating Weld into an EJB environment you must register the <literal>aroundInvoke</literal> method of <literal>org.jboss.weld.ejb.SessionBeanInterceptor</literal> as a EJB around-invoke interceptor for all EJBs in the application, either automatically, or through user configuration, for each CDI application which uses enterprise beans. If you are running in a EJB 3.1 environment, you should register this as an around-timeout interceptor as well."
msgstr "Web Beans를 EJB 환경으로 통합하고자 할 경우 엔터프라이즈 beans를 사용하는 각각의 Web Beans 애플리케이션 용으로 모든 EJB 애플리케이션에 대해 EJB 인터셉터로서 <literal>org.jboss.webbeans.ejb.SessionBeanInterceptor</literal>를 자동으로 또는 사용자 설정을 통해 등록해야 합니다.  "

#. Tag: para
#, no-c-format
msgid "You must register the <literal>SessionBeanInterceptor</literal> as the inner most interceptor in the stack for all EJBs."
msgstr ""

#. Tag: term
#, fuzzy, no-c-format
msgid "The <literal>weld-core.jar</literal>"
msgstr "<literal>webbeans-ri.jar</literal> "

#. Tag: para
#, no-c-format
msgid "Weld can reside on an isolated classloader, or on a shared classloader. If you choose to use an isolated classloader, the default <literal>SingletonProvider</literal>, <literal>IsolatedStaticSingletonProvider</literal>, can be used. If you choose to use a shared classloader, then you will need to choose another strategy."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can provide your own implementation of <literal>Singleton</literal> and <literal>SingletonProvider</literal> and register it for use using <literal>SingletonProvider.initialize(SingletonProvider provider)</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Weld also provides an implementation of Thread Context Classloader per application strategy, via the <literal>TCCLSingletonProvider</literal>."
msgstr ""

#. Tag: term
#, no-c-format
msgid "Binding the manager in JNDI"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You should bind the bean manager for the bean deployment archive into JNDI at <literal>java:comp/BeanManager</literal>. The type should be <literal>javax.enterprise.inject.spi.BeanManager</literal>. To obtain the correct bean manager for the bean deployment archive, you may call <literal>bootstrap.getBeanManager(beanDeploymentArchive)</literal>"
msgstr ""

#. Tag: term
#, no-c-format
msgid "Performing CDI injection on Java EE component classes"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI specification requires the container to provide injection into non-contextual resources for all Java EE component classes. Weld delegates this responsibility to the container. This can be achieved using the CDI defined <literal>InjectionTarget</literal> SPI. Furthermore, you must perform this operation on the correct bean manager for the bean deployment archive containing the EE component class."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI specification also requires that a <literal>ProcessInjectionTarget</literal> event is fired for every Java EE component class. Furthermore, if an observer calls <literal>ProcessInjectionTarget.setInjectionTarget()</literal> the container must use <emphasis>the specified</emphasis> injection target to perform injection."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To help the integrator, Weld provides <literal>WeldManager.fireProcessInjectionTarget()</literal> which returns the <literal>InjectionTarget</literal> to use."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"// Fire ProcessInjectionTarget, returning the InjectionTarget\n"
"// to use\n"
"InjectionTarget it = weldBeanManager.fireProcessInjectionTarget(clazz);\n"
"\n"
"// Per instance required, create the creational context\n"
"CreationalContext&#60;?&#62; cc = beanManager.createCreationalContext(null);\n"
"\n"
"// Produce the instance, performing any constructor injection required\n"
"Object instance = it.produce();\n"
"\n"
"// Perform injection and call initializers\n"
"it.inject(instance, cc);\n"
"\n"
"// Call the post-construct callback\n"
"it.postConstruct(instance);\n"
"\n"
"// Call the pre-destroy callback\n"
"it.preDestroy(instance);\n"
"\n"
"// Clean up the instance\n"
"it.dispose();\n"
"cc.release();"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The container may intersperse other operations between these calls. Further, the integrator may choose to implement any of these calls in another manner, assuming the contract is fulfilled."
msgstr ""

#. Tag: para
#, no-c-format
msgid "When performing injections on EJBs you must use the Weld-defined SPI, <literal>WeldManager</literal>. Furthermore, you must perform this operation on the correct bean manager for the bean deployment archive containing the EJB."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"// Obtain the EjbDescriptor for the EJB\n"
"// You may choose to use this utility method to get the descriptor\n"
"EjbDescriptor&#60;?&#62; ejbDescriptor = beanManager.getEjbDescriptor(ejbName);\n"
"\n"
"// Get an the Bean object\n"
"Bean&#60;?&#62; bean = beanManager.getBean(ejbDescriptor);\n"
"\n"
"// Create the injection target\n"
"InjectionTarget it = deploymentBeanManager.createInjectionTarget(ejbDescriptor);\n"
"\n"
"// Per instance required, create the creational context\n"
"CreationalContext&#60;?&#62; cc = deploymentBeanManager.createCreationalContext(bean);\n"
"\n"
"// Perform injection and call initializers\n"
"it.inject(instance, cc);\n"
"\n"
"// You may choose to have CDI call the post construct and pre destroy\n"
"// lifecycle callbacks\n"
"\n"
"// Call the post-construct callback\n"
"it.postConstruct(instance);\n"
"\n"
"// Call the pre-destroy callback\n"
"it.preDestroy(instance);\n"
"\n"
"// Clean up the instance\n"
"it.dispose();\n"
"cc.release();"
msgstr ""

#, fuzzy
#~ msgid "Currently Web Beans only runs in JBoss AS 5; integrating the RI into other EE environments (for example another application server like Glassfish), into a servlet container (like Tomcat), or with an Embedded EJB3.1 implementation is fairly easy. In this Appendix we will briefly discuss the steps needed."
#~ msgstr "현재 Web Beans RI는 JBoss AS 5에서만 실행됩니다; RI를 기타 다른 EE 환경 (예를 들어 Glassfish와 같은 다른 애플리케이션 서버)으로 통합, 또는 servlet 컨테이너로 통합 (예: Tomcat), 또는 내장된 EJB3.1 구현과 통합하는 것은 쉽습니다. Appendix에서 필요한 절차에 대해 간략하게 살펴보겠습니다.  "

#~ msgid "Web Bean Discovery"
#~ msgstr "Web Bean 검색 "

#, fuzzy
#~ msgid ""
#~ "<![CDATA[/**\n"
#~ "    * Gets list of all classes in classpath archives with META-INF/beans.xml (or\n"
#~ "    * for WARs WEB-INF/beans.xml) files\n"
#~ "    * \n"
#~ "    * @return An iterable over the classes \n"
#~ "    */\n"
#~ "   public Iterable<Class<?>> discoverWebBeanClasses();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets a list of all deployment descriptors in the app classpath\n"
#~ "    * \n"
#~ "    * @return An iterable over the beans.xml files \n"
#~ "    */\n"
#~ "   public Iterable<URL> discoverWebBeansXml();]]>"
#~ msgstr ""
#~ "<![CDATA[public interface WebBeanDiscovery {\n"
#~ "   /**\n"
#~ "    * Gets list of all classes in classpath archives with web-beans.xml files\n"
#~ "    * \n"
#~ "    * @return An iterable over the classes \n"
#~ "    */\n"
#~ "   public Iterable<Class<?>> discoverWebBeanClasses();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets a list of all web-beans.xml files in the app classpath\n"
#~ "    * \n"
#~ "    * @return An iterable over the web-beans.xml files \n"
#~ "    */\n"
#~ "   public Iterable<URL> discoverWebBeansXml();\n"
#~ "   \n"
#~ "}]]>"

#, fuzzy
#~ msgid "The discovery of Web Bean classes and <literal>beans.xml</literal> files is self-explanatory (the algorithm is described in Section 11.1 of the JSR-299 specification, and isn't repeated here)."
#~ msgstr "Web Bean 클래스 및 <literal>web-bean.xml</literal> 파일 검색은 쉽게 알 수 있습니다 (알고리즘은 JSR-299 사양 11.1장에 설명되어 있으므로 여기서 다시 설명하지 않습니다).  "

#, fuzzy
#~ msgid "Web Beans also delegates EJB3 bean discovery to the container so that it doesn't have to scan for EJB3 annotations or parse <literal>ejb-jar.xml</literal>. For each EJB in the application an EJBDescriptor should be discovered:"
#~ msgstr "Web Beans RI는 컨테이너로 EJB3 bean 검색을 위임하므로 EJB3 어노테이션을 검색하거나 <literal>ejb-jar.xml</literal>을 파싱할 필요가 없습니다. 애플리케이션에 있는 각각의 EJB의 경우 EJBDescriptor를 검색해야 합니다: "

#, fuzzy
#~ msgid ""
#~ "<![CDATA[public interface EjbDescriptor<T>\n"
#~ "{\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets the EJB type\n"
#~ "    * \n"
#~ "    * @return The EJB Bean class\n"
#~ "    */\n"
#~ "   public Class<T> getType();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Gets the local business interfaces of the EJB\n"
#~ "    * \n"
#~ "    * @return An iterator over the local business interfaces\n"
#~ "    */\n"
#~ "   public Iterable<BusinessInterfaceDescriptor<?>> getLocalBusinessInterfaces();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets the remote business interfaces of the EJB\n"
#~ "    * \n"
#~ "    * @return An iterator over the remote business interfaces\n"
#~ "    */\n"
#~ "   public Iterable<BusinessInterfaceDescriptor<?>> getRemoteBusinessInterfaces();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Get the remove methods of the EJB\n"
#~ "    * \n"
#~ "    * @return An iterator over the remove methods\n"
#~ "    */\n"
#~ "   public Iterable<Method> getRemoveMethods();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the bean is stateless\n"
#~ "    * \n"
#~ "    * @return True if stateless, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isStateless();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the bean is a EJB 3.1 Singleton\n"
#~ "    * \n"
#~ "    * @return True if the bean is a singleton, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isSingleton();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the EJB is stateful\n"
#~ "    * \n"
#~ "    * @return True if the bean is stateful, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isStateful();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the EJB is and MDB\n"
#~ "    * \n"
#~ "    * @return True if the bean is an MDB, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isMessageDriven();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Gets the EJB name\n"
#~ "    * \n"
#~ "    * @return The name\n"
#~ "    */\n"
#~ "   public String getEjbName();]]>"
#~ msgstr ""
#~ "<![CDATA[public interface EjbDescriptor<T> {\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets the EJB type\n"
#~ "    * \n"
#~ "    * @return The EJB Bean class\n"
#~ "    */\n"
#~ "   public Class<T> getType();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Gets the local business interfaces of the EJB\n"
#~ "    * \n"
#~ "    * @return An iterator over the local business interfaces\n"
#~ "    */\n"
#~ "   public Iterable<BusinessInterfaceDescriptor<?>> getLocalBusinessInterfaces();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets the remote business interfaces of the EJB\n"
#~ "    * \n"
#~ "    * @return An iterator over the remote business interfaces\n"
#~ "    */\n"
#~ "   public Iterable<BusinessInterfaceDescriptor<?>> getRemoteBusinessInterfaces();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Get the remove methods of the EJB\n"
#~ "    * \n"
#~ "    * @return An iterator over the remove methods\n"
#~ "    */\n"
#~ "   public Iterable<Method> getRemoveMethods();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the bean is stateless\n"
#~ "    * \n"
#~ "    * @return True if stateless, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isStateless();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the bean is a EJB 3.1 Singleton\n"
#~ "    * \n"
#~ "    * @return True if the bean is a singleton, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isSingleton();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the EJB is stateful\n"
#~ "    * \n"
#~ "    * @return True if the bean is stateful, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isStateful();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Indicates if the EJB is and MDB\n"
#~ "    * \n"
#~ "    * @return True if the bean is an MDB, false otherwise\n"
#~ "    */\n"
#~ "   public boolean isMessageDriven();\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Gets the EJB name\n"
#~ "    * \n"
#~ "    * @return The name\n"
#~ "    */\n"
#~ "   public String getEjbName();\n"
#~ "   \n"
#~ "   \n"
#~ "}]]>"

#~ msgid "JNDI"
#~ msgstr "JNDI"

#~ msgid ""
#~ "<![CDATA[\n"
#~ "         public interface ResourceLoader {\n"
#~ "    \n"
#~ "   /**\n"
#~ "    * Creates a class from a given FQCN\n"
#~ "    * \n"
#~ "    * @param name The name of the clsas\n"
#~ "    * @return The class\n"
#~ "    */\n"
#~ "   public Class<?> classForName(String name);\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets a resource as a URL by name\n"
#~ "    * \n"
#~ "    * @param name The name of the resource\n"
#~ "    * @return An URL to the resource\n"
#~ "    */\n"
#~ "   public URL getResource(String name);\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets resources as URLs by name\n"
#~ "    * \n"
#~ "    * @param name The name of the resource\n"
#~ "    * @return An iterable reference to the URLS\n"
#~ "    */\n"
#~ "   public Iterable<URL> getResources(String name);\n"
#~ "   \n"
#~ "}\n"
#~ "         ]]>"
#~ msgstr ""
#~ "<![CDATA[\n"
#~ "         public interface ResourceLoader {\n"
#~ "    \n"
#~ "   /**\n"
#~ "    * Creates a class from a given FQCN\n"
#~ "    * \n"
#~ "    * @param name The name of the clsas\n"
#~ "    * @return The class\n"
#~ "    */\n"
#~ "   public Class<?> classForName(String name);\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets a resource as a URL by name\n"
#~ "    * \n"
#~ "    * @param name The name of the resource\n"
#~ "    * @return An URL to the resource\n"
#~ "    */\n"
#~ "   public URL getResource(String name);\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets resources as URLs by name\n"
#~ "    * \n"
#~ "    * @param name The name of the resource\n"
#~ "    * @return An iterable reference to the URLS\n"
#~ "    */\n"
#~ "   public Iterable<URL> getResources(String name);\n"
#~ "   \n"
#~ "}\n"
#~ "         ]]>"

#, fuzzy
#~ msgid "Servlet injection"
#~ msgstr "Servlet 청취자 "

#, fuzzy
#~ msgid "If you are integrating the Web Beans into a JSF environment you must register <literal>org.jboss.webbeans.jsf.WebBeansPhaseListener</literal> as a phase listener, and <literal>org.jboss.webbeans.el.WebBeansELREsolver</literal> as an EL resolver, either automatically, or through user configuration, for each Web Beans application which uses JSF."
#~ msgstr "Web Beans를 Servlet 환경으로 통합할 경우, Servlet을 사용하는 각각의 Web Beans 애플리케이션에 대해 자동으로 또는 사용자 설정을 통해 <literal>org.jboss.webbeans.servlet.WebBeansListener</literal>를 Servlet 청취자로 등록해야 합니다.  "

#, fuzzy
#~ msgid "If you are integrating the Web Beans into an environment that supports deployment of applications, you must insert the <literal>webbeans-core.jar</literal> into the applications isolated classloader. It cannot be loaded from a shared classloader."
#~ msgstr "Web Beans를 애플리케이션 운용을 지원하는 환경으로 통합하고자 할 경우, <literal>webbeans-ri.jar</literal>를 애플리케이션 분리 classloader로 삽입해야 합니다. 이는 공유 classloader에서 불러올 수 없습니다.  "

#~ msgid "It should be possible to run Web Beans in an SE environment, but you'll to do more work, adding your own contexts and lifecycle. The Web Beans RI currently doesn't expose lifecycle extension points, so you would have to code directly against Web Beans RI classes."
#~ msgstr "SE 환경에서 Web Beans를 실행할 수 있어야 하지만, 자체적 컨텍스트 및 수명 주기 추가와 같은 더 많은 작업을 해야 합니다. 현재 Web Beans RI는 수명 확장 지점을 나타내지 않고 있으므로, Web Beans RI 클래스에 대해 직접 코드화해야 합니다. "

#~ msgid "All interfaces in the SPI support the decorator pattern and provide a <literal>Forwarding</literal> class."
#~ msgstr "SPI에 있는 모든 인터페이스는 데코레이터 패턴을 지원하고 <literal>Forwarding</literal> 클래스를 제공합니다.  "

#, fuzzy
#~ msgid ""
#~ "<![CDATA[public interface EjbServices\n"
#~ "{\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets a descriptor for each EJB in the application\n"
#~ "    * \n"
#~ "    * @return The bean class to descriptor map \n"
#~ "    */\n"
#~ "   public Iterable<EjbDescriptor<?>> discoverEjbs();]]>"
#~ msgstr ""
#~ "<![CDATA[public interface EjbDiscovery\n"
#~ "{\n"
#~ "   public static final String PROPERTY_NAME = EjbDiscovery.class.getName();\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Gets a descriptor for each EJB in the application\n"
#~ "    * \n"
#~ "    * @return The bean class to descriptor map \n"
#~ "    */\n"
#~ "   public Iterable<EjbDescriptor<?>> discoverEjbs();\n"
#~ "   \n"
#~ "}]]>"

#, fuzzy
#~ msgid "The Web Beans RI implements JNDI binding and lookup according to standards, however you may want to alter the binding and lookup (for example in an environment where JNDI isn't available). To do this, implement <literal>org.jboss.webbeans.resources.spi.NamingContext</literal>:"
#~ msgstr "Web Beans RI는 기준에 따라 JNDI 바인딩 및 lookup을 구현하지만, 바인딩 및 lookup을 변경하고자 하실 수 있습니다 (예를 들어 JNDI를 사용할 수 없는 환경에서). 이를 위해 <literal>org.jboss.webbeans.spi.resources.NamingContext</literal>를구현합니다:       "

#~ msgid ""
#~ "<![CDATA[public interface NamingContext extends Serializable {\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Typed JNDI lookup\n"
#~ "    * \n"
#~ "    * @param <T> The type\n"
#~ "    * @param name The JNDI name\n"
#~ "    * @param expectedType The expected type\n"
#~ "    * @return The object\n"
#~ "    */\n"
#~ "   public <T> T lookup(String name, Class<? extends T> expectedType);\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Binds an item to JNDI\n"
#~ "    * \n"
#~ "    * @param name The key to bind under\n"
#~ "    * @param value The item to bind\n"
#~ "    */\n"
#~ "   public void bind(String name, Object value);\n"
#~ "   \n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public interface NamingContext extends Serializable {\n"
#~ "   \n"
#~ "   /**\n"
#~ "    * Typed JNDI lookup\n"
#~ "    * \n"
#~ "    * @param <T> The type\n"
#~ "    * @param name The JNDI name\n"
#~ "    * @param expectedType The expected type\n"
#~ "    * @return The object\n"
#~ "    */\n"
#~ "   public <T> T lookup(String name, Class<? extends T> expectedType);\n"
#~ "\n"
#~ "   /**\n"
#~ "    * Binds an item to JNDI\n"
#~ "    * \n"
#~ "    * @param name The key to bind under\n"
#~ "    * @param value The item to bind\n"
#~ "    */\n"
#~ "   public void bind(String name, Object value);\n"
#~ "   \n"
#~ "}]]>"

#, fuzzy
#~ msgid "Servlet listener and filters"
#~ msgstr "Servlet 청취자 "

#~ msgid "EJB Discovery"
#~ msgstr "EJB 검색  "

#~ msgid "You can specify the implementation of an SPI either as a system property, or in a properties file <literal>META-INF/web-beans-ri.properties</literal>. All property names are the fully qualified class name of the implemented interface; all property values are the fully qualified class name of the implementation class."
#~ msgstr "SPI 구현을 시스템 속성으로나 또는 속성 파일 <literal>META-INF/web-beans-ri.properties</literal>로 지정할 수 있습니다. 모든 속성 이름은 구현된 인터페이스의 완전 정규화된 클래스 이름입니다; 모드 속성 값은 구현 클래스의 완전 정규화된 클래스 이름입니다.  "

#~ msgid "The Web Beans RI can be told to load your implementation of <literal>WebBeanDiscovery</literal> using the property <literal>org.jboss.webbeans.bootstrap.spi.WebBeanDiscovery</literal> with the fully qualified class name as the value. For example:"
#~ msgstr "Web Beans RI는 완전 정규화된 클래스 이름 값과 함께 <literal>org.jboss.webbeans.bootstrap.spi.WebBeanDiscovery</literal> 속성을 사용하여 <literal>WebBeanDiscovery</literal> 구현을 불러오기하게 할 수 있습니다. 예: "

#, fuzzy
#~ msgid ""
#~ "org.jboss.webbeans.bootstrap.spi.WebBeanDiscovery= \\ \n"
#~ "   org.jboss.webbeans.integration.jbossas.WebBeanDiscoveryImpl"
#~ msgstr "org.jboss.webbeans.bootstrap.spi.WebBeanDiscovery=org.jboss.webbeans.integration.jbossas.WebBeanDiscoveryImpl"

#~ msgid "If the Web Beans RI is being used in a servlet container, it expects a constructor of the form:"
#~ msgstr "Web Beans RI가 servlet 컨테이너에서 사용될 경우, 이는 생성자 형식을 요청하게 됩니다: "

#~ msgid "<![CDATA[public WebBeanDiscoveryImpl(ServletContext servletContext) {}]]>"
#~ msgstr "<![CDATA[public WebBeanDiscoveryImpl(ServletContext servletContext) {}]]>"

#~ msgid "The servlet context can be used to allow your implementation of <literal>WebBeanDiscovery</literal> to interact with the container."
#~ msgstr "servlet 컨텍스트는 <literal>WebBeanDiscovery</literal> 구현을 허용하기 위해 사용되어 컨테이너와 상호작용할 수 있습니다.  "

#~ msgid "The Web Beans RI can be told to load your implementation of <literal>EjbDiscovery</literal> using the property <literal>org.jboss.webbeans.bootstrap.spi.EjbDiscovery</literal> with the fully qualified class name as the value. For example:"
#~ msgstr "Web Beans RI는 완전 정규화된 클래스 이름 값과 함께 <literal>org.jboss.webbeans.bootstrap.spi.EjbDiscovery</literal> 속성을 사용하여 <literal>EjbDiscovery</literal> 구현을 불러오기하게 할 수 있습니다. 예: "

#, fuzzy
#~ msgid ""
#~ "org.jboss.webbeans.bootstrap.spi.EjbDiscovery= \\\n"
#~ "   org.jboss.webbeans.integration.jbossas.EjbDiscoveryImpl"
#~ msgstr "org.jboss.webbeans.bootstrap.spi.EjbDiscovery=org.jboss.webbeans.integration.jbossas.EjbDiscoveryImpl"

#~ msgid "<![CDATA[public EjbDiscoveryImpl(ServletContext servletContext) {}]]>"
#~ msgstr "<![CDATA[public EjbDiscoveryImpl(ServletContext servletContext) {}]]>"

#~ msgid "The servlet context can be used to allow your implementation of <literal>EjbDiscovery</literal> to interact with the container."
#~ msgstr "servlet 컨텍스트는 <literal>EjbDiscovery</literal> 구현을 허용하기 위해 사용되어 컨테이너와 상호작용할 수 있습니다.  "

#~ msgid "and tell the RI to use it:"
#~ msgstr "RI에게 사용할 것을 알립니다: "

#~ msgid "org.jboss.webbeans.resources.spi.NamingContext=com.acme.MyNamingContext"
#~ msgstr "org.jboss.webbeans.resources.spi.NamingContext=com.acme.MyNamingContext"

#~ msgid "<![CDATA[public MyNamingContext(ServletContext servletContext) {}]]>"
#~ msgstr "<![CDATA[public MyNamingContext(ServletContext servletContext) {}]]>"

#~ msgid "The servlet context can be used to allow your implementation of <literal>NamingContext</literal> to interact with the container."
#~ msgstr "servlet 컨텍스트는 <literal>NamingContext</literal> 구현을 허용하기 위해 사용되어 컨테이너와 상호 작용할 수 있습니다.      "

#~ msgid "org.jboss.webbeans.resources.spi.ResourceLoader=com.acme.ResourceLoader"
#~ msgstr "org.jboss.webbeans.resources.spi.ResourceLoader=com.acme.ResourceLoader"

#~ msgid "<![CDATA[public MyResourceLoader(ServletContext servletContext) {}]]>"
#~ msgstr "<![CDATA[public MyResourceLoader(ServletContext servletContext) {}]]>"

#~ msgid "The servlet context can be used to allow your implementation of <literal>ResourceLoader</literal> to interact with the container."
#~ msgstr "servlet 컨텍스트는 <literal>ResourceLoader</literal> 구현을 허용하기 위해 사용되어 컨테이너와 상호작용할 수 있습니다.   "
