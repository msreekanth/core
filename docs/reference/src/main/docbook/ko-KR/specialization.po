# translation of specialization.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: specialization\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:18\n"
"PO-Revision-Date: 2009-01-23 11:14+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#, no-c-format
msgid "Specialization, inheritance and alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When you first start developing with CDI, you&#39;ll likely be dealing only with a single bean implementation for each bean type. In this case, it&#39;s easy to understand how beans get selected for injection. As the complexity of your application grows, multiple occurrences of the same bean type start appearing, either because you have multiple implementations or two beans share a common (Java) inheritance. That&#39;s when you have to begin studying the specialization, inheritance and alternative rules to work through unsatisfied or ambiguous dependencies or to avoid certain beans from being called."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI specification recognizes two distinct scenarios in which one bean extends another:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second bean <emphasis>specializes</emphasis> the first bean in certain deployment scenarios. In these deployments, the second bean completely replaces the first, fulfilling the same role in the system."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second bean is simply reusing the Java implementation, and otherwise bears no relation to the first bean. The first bean may not even have been designed for use as a contextual object."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The second case is the default assumed by CDI. It&#39;s possible to have two beans in the system with the same part bean type (interface or parent class). As you&#39;ve learned, you select between the two implementations using qualifiers."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The first case is the exception, and also requires more care. In any given deployment, only one bean can fulfill a given role at a time. That means one bean needs to be enabled and the other disabled. There are a two modifiers involved: <literal>@Alternative</literal> and <literal>@Specializes</literal>. We&#39;ll start by looking at alternatives and then show the guarantees that specialization adds."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using alternative stereotypes"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI lets you <emphasis>override</emphasis> the implementation of a bean type at deployment time using an alternative. For example, the following bean provides a default implementation of the <literal>PaymentProcessor</literal> interface:"
msgstr "이미 Web Beans 의존성 삽입 모델은 배치시 API 구현을 <emphasis>덮어쓰기</emphasis> 하게 합니다. 예를 들어, 다음과 같은 엔터프라이즈 Web Bean은 제품에서 API <literal>PaymentProcessor</literal> 구현을 제공합니다:   "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class DefaultPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, fuzzy, no-c-format
msgid "But in our staging environment, we don&#39;t really want to submit payments to the external system, so we override that implementation of <literal>PaymentProcessor</literal> with a different bean:"
msgstr "staging 환경에서, 다른 Web Bean을 사용하여 <literal>PaymentProcessor</literal> 구현을 덮어쓰기 합니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public @Alternative\n"
"class StagingPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@CreditCard @Stateless\n"
"public class CreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "or"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public @Alternative\n"
"class StagingPaymentProcessor \n"
"      extends DefaultPaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "We&#39;ve already seen how we can enable this alternative by listing its class in the <literal>beans.xml</literal> descriptor."
msgstr ""

#. Tag: para
#, no-c-format
msgid "But suppose we have many alternatives in the staging environment. It would be much more convenient to be able to enable them all at once. So let&#39;s make <literal>@Staging</literal> an <literal>@Alternative</literal> stereotype and annotate the staging beans with this stereotype instead. You&#39;ll see how this level of indirection pays off. First, we create the stereotype:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Alternative\n"
"@Stereotype\n"
"@Retention(RUNTIME)\n"
"@Target(TYPE)\n"
"public @interface Staging {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Then we replace the <literal>@Alternative</literal> annotation on our bean with <literal>@Staging</literal>:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Staging\n"
"public class StagingPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@CreditCard @Stateless @Staging\n"
"public class StagingCreditCardPaymentProcessor \n"
"        implements PaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "Finally, we activate the <literal>@Staging</literal> stereotype in the <literal>beans.xml</literal> descriptor:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;alternatives&#62;\n"
"         &#60;stereotype&#62;org.mycompany.myapp.Staging&#60;/stereotype&#62;\n"
"   &#60;/alternatives&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now, no matter how many staging beans we have, they will all be enabled at once."
msgstr ""

#. Tag: title
#, no-c-format
msgid "A minor problem with alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When we enable an alternative, does that mean the default implementation is disabled? Well, not exactly. If the default implementation has a qualifier, for instance <literal>@LargeTransaction</literal>, and the alternative does not, you could still inject the default implementation."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @LargeTransaction PaymentProcessor paymentProcessor;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "So we haven&#39;t completely replaced the default implementation in this deployment of the system. The only way one bean can completely override a second bean at all injection points is if it implements all the bean types and declares all the qualifiers of the second bean. However, if the second bean declares a producer method or observer method, then even this is not enough to ensure that the second bean is never called! We need something extra."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI provides a special feature, called <emphasis>specialization</emphasis>, that helps the developer avoid these traps. Specialization is a way of informing the system of your intent to completely replace and disable an implementation of a bean."
msgstr "Web Beans는 <emphasis>특성화</emphasis>라는 특별 기능을 제공하여, 개발자들이 이러한 함정에 빠지지 않도록 돕습니다. 특성화 기능은 처음에는 조금 난해하게 보이지만, 익숙해 지면 사용하기 쉬우며 제공되는 추가 보안 기능에 만족하실 것입니다.  "

#. Tag: title
#, no-c-format
msgid "Using specialization"
msgstr "특성화 기능 사용  "

#. Tag: para
#, no-c-format
msgid "When the goal is to replace one bean implementation with a second, to help prevent developer error, the first bean may:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "directly extend the bean class of the second bean, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid "directly override the producer method, in the case that the second bean is a producer method, and then"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "explicitly declare that it <emphasis>specializes</emphasis> the second bean:"
msgstr "높은 우선 순위의 Web Bean이 해당 상위클래스를 <emphasis>특성화</emphasis>한다고 합니다.   "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Alternative @Specializes\n"
"public class MockCreditCardPaymentProcessor \n"
"      extends CreditCardPaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""
"@Stateless @Staging @Specializes\n"
"public class StagingCreditCardPaymentProcessor \n"
"        extends CreditCardPaymentProcessor {\n"
"    ...\n"
"}"

#. Tag: para
#, no-c-format
msgid "When an enabled bean specializes another bean, the other bean is never instantiated or called by the container. Even if the other bean defines a producer or observer method, the method will never be called."
msgstr ""

#. Tag: para
#, no-c-format
msgid "So why does specialization work, and what does it have to do with inheritance?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Since we&#39;re informing the container that our alternative bean is meant to stand in as a replacement for the default implementation, the alternative implementation automatically inherits all qualifiers of the default implementation. Thus, in our example, <literal>MockCreditCardPaymentProcessor</literal> inherits the qualifiers <literal>@Default</literal> and <literal>@CreditCard</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Furthermore, if the default implementation declares a bean EL name using <literal>@Named</literal>, the name is inherited by the specialized alternative bean."
msgstr ""

#~ msgid "Specialization"
#~ msgstr "특성화 "

#~ msgid "What we've tried to do with <literal>StagingCreditCardPaymentProcessor</literal> is to completely replace <literal>AsyncPaymentProcessor</literal> in a particular deployment of the system. In that deployment, the deployment type <literal>@Staging</literal> would have a higher priority than the default deployment type <literal>@Production</literal>, and therefore clients with the following injection point:"
#~ msgstr "<literal>StagingCreditCardPaymentProcessor</literal>를 사용하여 실행하려는 작업은 특정 시스템 배치에 <literal>AsyncPaymentProcessor</literal>를 완전 교체하는 것입니다. 여기서 배치 유형 <literal>@Staging</literal>은 기본값 배치 유형 <literal>@Production</literal> 보다 높은 우선 순위를 갖게 되므로 클라이언트는 다음과 같은 삽입 지점을 사용하게 됩니다:  "

#~ msgid "@CreditCard PaymentProcessor ccpp"
#~ msgstr "@CreditCard PaymentProcessor ccpp"

#~ msgid "Would receive an instance of <literal>StagingCreditCardPaymentProcessor</literal>."
#~ msgstr "<literal>StagingCreditCardPaymentProcessor</literal> 인스턴스를 받고자 합니다. "

#~ msgid "Unfortunately, there are several traps we can easily fall into:"
#~ msgstr "불행하게도 여기에는 몇 가지 함정이 있습니다: "

#~ msgid "the higher-priority Web Bean may not implement all the API types of the Web Bean that it attempts to override,"
#~ msgstr "높은 우선 순위의 Web Bean은 덮어쓰기하려는 Web Bean의 모든 API 유형을 구현할 수 없습니다. "

#~ msgid "the higher-priority Web Bean may not declare all the binding types of the Web Bean that it attempts to override,"
#~ msgstr "높은 우선 순위의 Web Bean은 덮어쓰기하려는 Web Bean의 모든 바인딩 유형을 명시할 수 없습니다. "

#~ msgid "the higher-priority Web Bean might not have the same name as the Web Bean that it attempts to override, or"
#~ msgstr "높은 우선 순위의 Web Bean은 덮어 쓰기하려는 Web Bean과 동일한 이름을 갖을 수 없습니다. "

#~ msgid "the Web Bean that it attempts to override might declare a producer method, disposal method or observer method."
#~ msgstr "덮어쓰기하려는 Web Bean은 생산자 방식, 폐지 방식 또는 옵저버 방식을 명시할 수 있습니다.   "

#~ msgid "In each of these cases, the Web Bean that we tried to override could still be called at runtime. Therefore, overriding is somewhat prone to developer error."
#~ msgstr "이러한 경우, 덮어 쓰기하려는 Web Bean은 런타임시 호출 가능해야 합니다 따라서, 덮어쓰기는 다소 개발자 오류를 초래하는 경우가 있습니다. "

#~ msgid "Specialization is a feature that is specific to simple and enterprise Web Beans. To make use of specialization, the higher-priority Web Bean must:"
#~ msgstr "특성화는 심플 Web Beans 및 엔터프라이즈 Web Beans에만 있는 기능입니다. 특성화 기능을 사용하려면 높은 우선 순위의 Web Bean은 다음 사항을 따라야 합니다:  "

#~ msgid "be a direct subclass of the Web Bean it overrides, and"
#~ msgstr "덮어쓰기할 Web Bean의 직접적인 하부 클래스가 되어야 합니다. "

#~ msgid "be a simple Web Bean if the Web Bean it overrides is a simple Web Bean or an enterprise Web Bean if the Web Bean it overrides is an enterprise Web Bean, and"
#~ msgstr "덮어쓰기할 Web Bean이 심플 Web Bean일 경우 심플 Web Bean이 되어야 하고 또는 덮어쓰기 할 Web Bean이 엔터프라이즈 Web Bean일 경우 엔터프라이즈 Web Bean이 되어야 합니다  "

#~ msgid "be annotated <literal>@Specializes</literal>."
#~ msgstr "<literal>@Specializes</literal>로 어노테이션되어야 합니다. "

#~ msgid "Advantages of specialization"
#~ msgstr "특성화 기능의 장점  "

#~ msgid "When specialization is used:"
#~ msgstr "특성화 기능 사용시:  "

#~ msgid "the binding types of the superclass are automatically inherited by the Web Bean annotated <literal>@Specializes</literal>, and"
#~ msgstr "상위클래스의 바인딩 유형은 <literal>@Specializes</literal>로 어노테이션된 Web Bean에 의해 자동으로 상속됩니다   "

#~ msgid "the Web Bean name of the superclass is automatically inherited by the Web Bean annotated <literal>@Specializes</literal>, and"
#~ msgstr "상위클래스의 Web Bean 이름은 <literal>@Specializes</literal>로 어노테이션된 Web Bean에 의해 자동으로 상속됩니다   "

#~ msgid "producer methods, disposal methods and observer methods declared by the superclass are called upon an instance of the Web Bean annotated <literal>@Specializes</literal>."
#~ msgstr "상위클래스에 의해 명시된 생산자 방식, 폐지 방식 및 옵저버 방식은 <literal>@Specializes</literal>로 어노테이션된 Web Bean 인스턴스를 호출합니다.   "

#~ msgid "In our example, the binding type <literal>@CreditCard</literal> of <literal>CreditCardPaymentProcessor</literal> is inherited by <literal>StagingCreditCardPaymentProcessor</literal>."
#~ msgstr "예에서 <literal>CreditCardPaymentProcessor</literal>의 <literal>@CreditCard</literal> 바인딩 유형은 <literal>StagingCreditCardPaymentProcessor</literal>에 의해 전승됩니다. "

#~ msgid "Furthermore, the Web Bean manager will validate that:"
#~ msgstr "Web Bean 관리자는 다음 사항을 유효화합니다:  "

#~ msgid "all API types of the superclass are API types of the Web Bean annotated <literal>@Specializes</literal> (all local interfaces of the superclass enterprise bean are also local interfaces of the subclass),"
#~ msgstr "상위클래스의 모든 API 유형은 <literal>@Specializes</literal>로 어노테이션된 Web Bean의 API 유형입니다 (상위클래스 엔터프라이즈 빈의 모든 로컬 인터페이스는 하부클래스의 로컬 인터페이스도 됩니다)   "

#~ msgid "the deployment type of the Web Bean annotated <literal>@Specializes</literal> has a higher precedence than the deployment type of the superclass, and"
#~ msgstr "<literal>@Specializes</literal>로 어노테이션된 Web Bean의 배치 유형은 상위클래스의 배치 유형보다 높은 우선 순위를 갖습니다   "

#~ msgid "there is no other enabled Web Bean that also specializes the superclass."
#~ msgstr "상위클래스를 특성화하는 활성화된 Web Bean이 없습니다.   "

#~ msgid "If any of these conditions are violated, the Web Bean manager throws an exception at initialization time."
#~ msgstr "이러한 조건을 위반할 경우, Web Bean 관리자는 초기화시 예외 처리를 넘기게 됩니다.   "

#~ msgid "Therefore, we can be certain that the superclass will <emphasis>never</emphasis> be called in any deployment of the system where the Web Bean annotated <literal>@Specializes</literal> is deployed and enabled."
#~ msgstr "따라서, <literal>@Specializes</literal>라고 어노테이션된 Web Bean이 배치되어 활성화된 시스템의 어떤 배치에서도 상위클래스는 <emphasis>절대로</emphasis> 호출되지 않음을 확인할 수 있습니다.    "
