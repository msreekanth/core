# translation of interceptors.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: interceptors\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2009-01-23 11:10+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#, no-c-format
msgid "Interceptors"
msgstr "인터셉터 "

#. Tag: para
#, fuzzy, no-c-format
msgid "Interceptor functionality is defined in the Java Interceptors specification. CDI enhances this functionality with a more sophisticated, semantic, annotation-based approach to binding interceptors to beans."
msgstr "Web Beans는 Web Beans에 인터셉터를 바인딩하기 위해 보다 복잡한 어노테이션 기반 방식을 특징으로 합니다. "

#. Tag: para
#, fuzzy, no-c-format
msgid "The Interceptors specification defines two kinds of interception points:"
msgstr "EJB 사양은 두 종류의 인터셉션 지점을 정의합니다:  "

#. Tag: para
#, no-c-format
msgid "business method interception, and"
msgstr "비지니스 방식 인터셉터 "

#. Tag: para
#, no-c-format
msgid "lifecycle callback interception."
msgstr "수명주기 콜백 인터셉터 "

#. Tag: para
#, fuzzy, no-c-format
msgid "In addition, the EJB specification defines timeout method interception."
msgstr "EJB 사양은 두 종류의 인터셉션 지점을 정의합니다:  "

#. Tag: para
#, fuzzy, no-c-format
msgid "A <emphasis>business method interceptor</emphasis> applies to invocations of methods of the bean by clients of the bean:"
msgstr "<emphasis>비지니스 방식 인터셉터</emphasis>는 Web Bean 클라이언트에 의해 Web Bean 방식 호출에 적용됩니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class TransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""
"<![CDATA[public class TransactionInterceptor {\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "A <emphasis>lifecycle callback interceptor</emphasis> applies to invocations of lifecycle callbacks by the container:"
msgstr "<emphasis>수명 주기 콜백 인터셉터</emphasis>는 컨테이너에 의해 수명 주기 콜백 호출에 적용됩니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class DependencyInjectionInterceptor {\n"
"   @PostConstruct \n"
"   public void injectDependencies(InvocationContext ctx) { ... }\n"
"}"
msgstr ""
"<![CDATA[public class DependencyInjectionInterceptor {\n"
"    @PostConstruct public void injectDependencies(InvocationContext ctx) { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "An interceptor class may intercept both lifecycle callbacks and business methods."
msgstr "인터셉터 클래스는 수명 주기 콜백 및 비지니스 방식 모두를 차단할 수 있습니다. "

#. Tag: para
#, fuzzy, no-c-format
msgid "A <emphasis>timeout method interceptor</emphasis> applies to invocations of EJB timeout methods by the container:"
msgstr "<emphasis>수명 주기 콜백 인터셉터</emphasis>는 컨테이너에 의해 수명 주기 콜백 호출에 적용됩니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class TimeoutInterceptor {\n"
"   @AroundTimeout \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""
"<![CDATA[public class TransactionInterceptor {\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Interceptor bindings"
msgstr "인터셉터 바인딩 "

#. Tag: para
#, fuzzy, no-c-format
msgid "Suppose we want to declare that some of our beans are transactional. The first thing we need is an <emphasis>interceptor binding type</emphasis> to specify exactly which beans we&#39;re interested in:"
msgstr "Web Beans의 일부는 트랜젝션할 수 있음을 명시하고자 한다고 가정합니다. 처음으로 해야할 것은 어떤 Web Beans에 관심이 있는 지를 지정하기 위해 <emphasis>인터셉터 바인딩 어노테이션</emphasis>을 합니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {}"
msgstr ""
"<![CDATA[@InterceptorBindingType\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {}]]>"

#. Tag: para
#, no-c-format
msgid "Now we can easily specify that our <literal>ShoppingCart</literal> is a transactional object:"
msgstr "<literal>ShoppingCart</literal>가 트랜젝션 객체임을 쉽게 지정할 수 있습니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional\n"
"public class ShoppingCart { ... }"
msgstr ""
"<![CDATA[@Transactional\n"
"public class ShoppingCart { ... }]]>"

#. Tag: para
#, no-c-format
msgid "Or, if we prefer, we can specify that just one method is transactional:"
msgstr "원하실 경우, 하나의 방식 만이 트랙젝션 가능하도록 지정할 수 있습니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class ShoppingCart {\n"
"   @Transactional public void checkout() { ... }\n"
"}"
msgstr ""
"<![CDATA[public class ShoppingCart {\n"
"    @Transactional public void checkout() { ... }\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Implementing interceptors"
msgstr "인터셉터 구현 "

#. Tag: para
#, fuzzy, no-c-format
msgid "That&#39;s great, but somewhere along the line we&#39;re going to have to actually implement the interceptor that provides this transaction management aspect. All we need to do is create a standard interceptor, and annotate it <literal>@Interceptor</literal> and <literal>@Transactional</literal>."
msgstr "행을 따라 어딘가에 이러한 트랜젝션 관리 측면을 제공하기 위해 실제적으로 인터셉터를 구현해야 합니다. 해야 할 작업은 표준 EJB 인터셉터를 생성하고 이를 <literal>@Interceptor</literal> 및 <literal>@Transactional</literal>로 어노테이션하는 것입니다.  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""
"<![CDATA[@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "Interceptors can take advantage of dependency injection:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"\n"
"    @Resource UserTransaction transaction;\n"
"\n"
"    @AroundInvoke \n"
"    public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"    \n"
"}"
msgstr ""
"<![CDATA[@ApplicationScoped @Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"\n"
"    @Resource Transaction transaction;\n"
"\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "Multiple interceptors may use the same interceptor binding type."
msgstr "여러 인터셉터는 동일한 인터셉터 바인딩 유형을 사용할 수 있습니다.  "

#. Tag: title
#, no-c-format
msgid "Enabling interceptors"
msgstr "인터셉터 활성화 "

#. Tag: para
#, no-c-format
msgid "By default, all interceptors are disabled. We need to <emphasis>enable</emphasis> our interceptor in the <literal>beans.xml</literal> descriptor of a bean archive. This activation only applies to the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;interceptors&#62;\n"
"      &#60;class&#62;org.mycompany.myapp.TransactionInterceptor&#60;/class&#62;\n"
"   &#60;/interceptors&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Whoah! Why the angle bracket stew?"
msgstr "왜 각진 괄호를 써야 합니까? "

#. Tag: para
#, fuzzy, no-c-format
msgid "Well, having the XML declaration is actually a <emphasis>good thing</emphasis>. It solves two problems:"
msgstr "XML 선언으로 두 가지 문제를 해결합니다:  "

#. Tag: para
#, no-c-format
msgid "it enables us to specify a total ordering for all the interceptors in our system, ensuring deterministic behavior, and"
msgstr "이는 시스템에서 모든 인터셉터에 대한 전체적인 순서를 지정할 수 있도록 활성화하며, 결정적인 작업를 확인합니다  "

#. Tag: para
#, no-c-format
msgid "it lets us enable or disable interceptor classes at deployment time."
msgstr "배치시 인터셉터 클래스를 활성화 또는 비활성화하게 합니다.    "

#. Tag: para
#, fuzzy, no-c-format
msgid "For example, we could specify that our security interceptor runs before our transaction interceptor."
msgstr "예를 들어, <literal>TransactionInterceptor</literal> 이전에 보안 인터셉터를 실행하도록 지정할 수 있습니다.  "

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;beans\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&#34;&#62;\n"
"   &#60;interceptors&#62;\n"
"      &#60;class&#62;org.mycompany.myapp.SecurityInterceptor&#60;/class&#62;\n"
"      &#60;class&#62;org.mycompany.myapp.TransactionInterceptor&#60;/class&#62;\n"
"   &#60;/interceptors&#62;\n"
"&#60;/beans&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Or we could turn them both off in our test environment by simply not mentioning them in <literal>beans.xml</literal>! Ah, so simple."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor bindings with members"
msgstr "멤버와 인터셉터 바인딩  "

#. Tag: para
#, no-c-format
msgid "Suppose we want to add some extra information to our <literal>@Transactional</literal> annotation:"
msgstr "<literal>@Transactional</literal> 어노테이션에 정보를 추가하고자 한다고 가정합시다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {\n"
"   boolean requiresNew() default false;\n"
"}"
msgstr ""
"<![CDATA[@InterceptorBindingType\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {\n"
"    boolean requiresNew() default false;\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI will use the value of <literal>requiresNew</literal> to choose between two different interceptors, <literal>TransactionInterceptor</literal> and <literal>RequiresNewTransactionInterceptor</literal>."
msgstr "Web Beans는 <literal>requiresNew</literal> 값을 사용하여 두 개의 다른 인터셉터 <literal>TransactionInterceptor</literal>와 <literal>RequiresNewTransactionInterceptor</literal> 중에서 선택하게 됩니다. "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional(requiresNew = true) @Interceptor\n"
"public class RequiresNewTransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""
"<![CDATA[@Transactional(requiresNew=true) @Interceptor\n"
"public class RequiresNewTransactionInterceptor {\n"
"    @AroundInvoke public Object manageTransaction(InvocationContext ctx) { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "Now we can use <literal>RequiresNewTransactionInterceptor</literal> like this:"
msgstr "다음과 같이 <literal>RequiresNewTransactionInterceptor</literal>를 사용할 수 있습니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional(requiresNew = true)\n"
"public class ShoppingCart { ... }"
msgstr ""
"<![CDATA[@Transactional(requiresNew=true)\n"
"public class ShoppingCart { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "But what if we only have one interceptor and we want the container to ignore the value of <literal>requiresNew</literal> when binding interceptors? Perhaps this information is only useful for the interceptor implementation. We can use the <literal>@Nonbinding</literal> annotation:"
msgstr "한 개의 인터샙터만이 있고 인터셉터를 바인딩할 때 <literal>requiresNew</literal> 값을 무시하기 위한 관리자를 원할 경우에는 <literal>@NonBinding</literal> 어노테이션을 사용할 수 있습니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Secure {\n"
"   @Nonbinding String[] rolesAllowed() default {};\n"
"}"
msgstr ""
"<![CDATA[@InterceptorBindingType\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Secure {\n"
"    @NonBinding String[] rolesAllowed() default {};\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Multiple interceptor binding annotations"
msgstr "여러개의 인터셉터 바인딩 어노테이션  "

#. Tag: para
#, fuzzy, no-c-format
msgid "Usually we use combinations of interceptor bindings types to bind multiple interceptors to a bean. For example, the following declaration would be used to bind <literal>TransactionInterceptor</literal> and <literal>SecurityInterceptor</literal> to the same bean:"
msgstr "일반적으로 여러개의 인터셉터를 Web Bean에 바인딩하기 위해 인터셉터 바인딩 유형의 조합을 사용합니다. 예를 들어, 다음과 같은 명시를 사용하여 동일한 Web Bean에 <literal>TransactionInterceptor</literal> 및 <literal>SecurityInterceptor</literal>를 바인딩할 수 있습니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Secure(rolesAllowed=&#34;admin&#34;) @Transactional\n"
"public class ShoppingCart { ... }"
msgstr ""
"<![CDATA[@Secure(rolesAllowed=\"admin\") @Transactional\n"
"public class ShoppingCart { ... }]]>"

#. Tag: para
#, no-c-format
msgid "However, in very complex cases, an interceptor itself may specify some combination of interceptor binding types:"
msgstr "하지만 매우 복잡한 경우 인터셉터 자체가 인터셉터 바인딩 유형의 조합을 일부 지정할 수 있습니다:  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @Secure @Interceptor\n"
"public class TransactionalSecureInterceptor { ... }"
msgstr ""
"<![CDATA[@Transactional @Secure @Interceptor\n"
"public class TransactionalSecureInterceptor { ... }]]>"

#. Tag: para
#, no-c-format
msgid "Then this interceptor could be bound to the <literal>checkout()</literal> method using any one of the following combinations:"
msgstr "그 후 이러한 인터셉터는 다음과 같은 조합 중 하나를 사용하여 <literal>checkout()</literal> 방식에 바운딩될 수 있습니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class ShoppingCart {\n"
"   @Transactional @Secure public void checkout() { ... }\n"
"}"
msgstr ""
"<![CDATA[public class ShoppingCart {\n"
"    @Transactional @Secure public void checkout() { ... }\n"
"}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Secure\n"
"public class ShoppingCart {\n"
"   @Transactional public void checkout() { ... }\n"
"}"
msgstr ""
"<![CDATA[@Secure\n"
"public class ShoppingCart {\n"
"    @Transactional public void checkout() { ... }\n"
"}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional\n"
"public class ShoppingCart {\n"
"   @Secure public void checkout() { ... }\n"
"}"
msgstr ""
"<![CDATA[@Transactionl\n"
"public class ShoppingCart {\n"
"    @Secure public void checkout() { ... }\n"
"}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @Secure\n"
"public class ShoppingCart {\n"
"   public void checkout() { ... }\n"
"}"
msgstr ""
"<![CDATA[@Transactional @Secure\n"
"public class ShoppingCart {\n"
"    public void checkout() { ... }\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Interceptor binding type inheritance"
msgstr "인터셉터 바인딩 유형 상속 "

#. Tag: para
#, no-c-format
msgid "One limitation of the Java language support for annotations is the lack of annotation inheritance. Really, annotations should have reuse built in, to allow this kind of thing to work:"
msgstr "어노테이션에 대한 Java 언어 지원 한계는 어노테이션 상속의 결여입니다. 실제로 어노테이션은 재사용 기능이 내장되어 있어 이러한 기능이 작동하게 해야 합니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public @interface Action extends Transactional, Secure { ... }"
msgstr "<![CDATA[public @interface Action extends Transactional, Secure { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Well, fortunately, CDI works around this missing feature of Java. We may annotate one interceptor binding type with other interceptor binding types (termed a <emphasis>meta-annotation</emphasis>). The interceptor bindings are transitive — any bean with the first interceptor binding inherits the interceptor bindings declared as meta-annotations."
msgstr "다행히도 Web Beans는 이러한 생략된 Java의 기능을 해결하여 하나의 인터셉터 바인딩 유형을 다른 인터셉터 바인딩 유형과 어노테이션할 수 있습니다. 인터셉터 바인딩은 트렌젝션 가능하여  &#151;  첫번째 인터셉터 바인딩이 있는 Web Bean은 메타 어노테이션으로 명시된 인터셉터 바인딩을 상속할 수 있습니다. "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Transactional @Secure\n"
"@InterceptorBinding\n"
"@Target(TYPE)\n"
"@Retention(RUNTIME)\n"
"public @interface Action { ... }"
msgstr ""
"<![CDATA[@Transactional @Secure\n"
"@InterceptorBindingType\n"
"@Target(TYPE)\n"
"@Retention(RUNTIME)\n"
"public @interface Action { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Now, any bean annotated <literal>@Action</literal> will be bound to both <literal>TransactionInterceptor</literal> and <literal>SecurityInterceptor</literal>. (And even <literal>TransactionalSecureInterceptor</literal>, if it exists.)"
msgstr "<literal>@Action</literal>으로 어노테이션된 Web Bean은 <literal>TransactionInterceptor</literal> 및 <literal>SecurityInterceptor</literal>로 바운딩됩니다. (<literal>TransactionalSecureInterceptor</literal>이 있을 경우 이것으로 바운딩됩니다.) "

#. Tag: title
#, no-c-format
msgid "Use of <literal>@Interceptors</literal>"
msgstr "<literal>@Interceptors</literal> 사용 "

#. Tag: para
#, fuzzy, no-c-format
msgid "The <literal>@Interceptors</literal> annotation defined by the interceptor specification (and used by the managed bean and EJB specifications) is still supported in CDI."
msgstr "EJB 사양에 의해 정의된 <literal>@Interceptors</literal> 어노테이션은 엔터프라이즈 및 심플 Web Beans 모두를 지원합니다. 예:   "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Interceptors({TransactionInterceptor.class, SecurityInterceptor.class})\n"
"public class ShoppingCart {\n"
"   public void checkout() { ... }\n"
"}"
msgstr ""
"<![CDATA[@Interceptors({TransactionInterceptor.class, SecurityInterceptor.class})\n"
"public class ShoppingCart {\n"
"    public void checkout() { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "However, this approach suffers the following drawbacks:"
msgstr "하지만, 이러한 방식은 다음과 같은 결점을 갖습니다: "

#. Tag: para
#, no-c-format
msgid "the interceptor implementation is hardcoded in business code,"
msgstr "인터셉터 구현은 비지니스 코드에서 하드코어되어 있습니다 "

#. Tag: para
#, no-c-format
msgid "interceptors may not be easily disabled at deployment time, and"
msgstr "인터셉터는 배치시 쉽게 비활성화할 수 없습니다, "

#. Tag: para
#, fuzzy, no-c-format
msgid "the interceptor ordering is non-global — it is determined by the order in which interceptors are listed at the class level."
msgstr "인터셉터 순서는 비전역적입니다 &#151; 이는 클래스 레벨로 열거된 인터셉터 순서에 의해 결정됩니다. "

#. Tag: para
#, fuzzy, no-c-format
msgid "Therefore, we recommend the use of CDI-style interceptor bindings."
msgstr "따라서 Web Beans 형식 인터셉터 바인딩을 사용할 것을 권장합니다.  "

#~ msgid "Web Beans re-uses the basic interceptor architecture of EJB 3.0, extending the functionality in two directions:"
#~ msgstr "Web Beans는 EJB 3.0의 기본 인터셉터 구조를 재사용하여, 두 가지 방향으로 기능을 확장합니다: "

#~ msgid "Any Web Bean may have interceptors, not just session beans."
#~ msgstr "Web Bean에는 세션 beans 만이 아니라 인터셉터도 있을 수 있습니다. "

#~ msgid "All Web Beans interceptors are simple Web Beans, and can take advantage of dependency injection and contextual lifecycle management."
#~ msgstr "모든 Web Beans 인터셉터는 심플 Web Beans으로, 의존성 삽입및 컨텍스트 수명 주기 관리의 장점을 취할 수 있습니다.    "

#~ msgid "Finally, we need to <emphasis>enable</emphasis> our interceptor in <literal>web-beans.xml</literal>."
#~ msgstr "마지막으로 <literal>web-beans.xml</literal>에서 인터셉터를 <emphasis>활성화</emphasis>해야 합니다.  "

#~ msgid ""
#~ "<![CDATA[<Interceptors>\n"
#~ "    <tx:TransactionInterceptor/>\n"
#~ "</Interceptors>]]>"
#~ msgstr ""
#~ "<![CDATA[<Interceptors>\n"
#~ "    <tx:TransactionInterceptor/>\n"
#~ "</Interceptors>]]>"

#~ msgid ""
#~ "<![CDATA[<Interceptors>\n"
#~ "    <sx:SecurityInterceptor/>\n"
#~ "    <tx:TransactionInterceptor/>\n"
#~ "</Interceptors>]]>"
#~ msgstr ""
#~ "<![CDATA[<Interceptors>\n"
#~ "    <sx:SecurityInterceptor/>\n"
#~ "    <tx:TransactionInterceptor/>\n"
#~ "</Interceptors>]]>"

#~ msgid "Or we could turn them both off in our test environment!"
#~ msgstr "또는 테스트 환경에서 두 가지 모두를 비활성화시킬 수 있습니다!  "
