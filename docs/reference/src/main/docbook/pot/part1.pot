# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2010-12-14T13:35:17\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: para
#, no-c-format
msgid "The <ulink url=\"http://jcp.org/en/jsr/detail?id=299\">JSR-299</ulink> specification (CDI) defines a set of complementary services that help improve the structure of application code. CDI layers an enhanced lifecycle and interaction model over existing Java component types, including managed beans and Enterprise Java Beans. The CDI services provide:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "an improved lifecycle for stateful objects, bound to well-defined <emphasis>contexts</emphasis>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "a typesafe approach to <emphasis>dependency injection</emphasis>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "object interaction via an <emphasis>event notification facility</emphasis>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "a better approach to binding <emphasis>interceptors</emphasis> to objects, along with a new kind of interceptor, called a <emphasis>decorator</emphasis>, that is more appropriate for use in solving business problems, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "an <emphasis>SPI</emphasis> for developing portable extensions to the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The CDI services are a core aspect of the Java EE platform and include full support for Java EE modularity and the Java EE component architecture. But the specification does not limit the use of CDI to the Java EE environment. In the Java SE environment, the services might be provided by a standalone CDI implementation like Weld (see <xref linkend=\"weld-se\" />), or even by a container that also implements the subset of EJB defined for embedded usage by the EJB 3.1 specification. CDI is especially useful in the context of web application development, but the problems it solves are general development concerns and it is therefore applicable to a wide variety of application."
msgstr ""

#. Tag: para
#, no-c-format
msgid "An object bound to a lifecycle context is called a bean. CDI includes built-in support for several different kinds of bean, including the following Java EE component types:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "managed beans, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "EJB session beans."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Both managed beans and EJB session beans may inject other beans. But some other objects, which are not themselves beans in the sense used here, may also have beans injected via CDI. In the Java EE platform, the following kinds of component may have beans injected:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "message-driven beans,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "interceptors,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "servlets, servlet filters and servlet event listeners,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "JAX-WS service endpoints and handlers, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "JSP tag handlers and tag library event listeners."
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI relieves the user of an unfamiliar API of the need to answer the following questions:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "What is the lifecycle of this object?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "How many simultaneous clients can it have?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Is it multithreaded?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "How do I get access to it from a client?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Do I need to explicitly destroy it?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Where should I keep the reference to it when I&#39;m not currently using it?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "How can I define an alternative implementation, so that the implementation can vary at deployment time?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "How should I go about sharing this object between other objects?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI is more than a framework. It&#39;s a whole, rich programming model. The <emphasis>theme</emphasis> of CDI is <emphasis>loose-coupling with strong typing</emphasis>. Let&#39;s study what that phrase means."
msgstr ""

#. Tag: para
#, no-c-format
msgid "A bean specifies only the type and semantics of other beans it depends upon. It need not be aware of the actual lifecycle, concrete implementation, threading model or other clients of any bean it interacts with. Even better, the concrete implementation, lifecycle and threading model of a bean may vary according to the deployment scenario, without affecting any client. This loose-coupling makes your code easier to maintain."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Events, interceptors and decorators enhance the loose-coupling inherent in this model:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>event notifications</emphasis> decouple event producers from event consumers,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>interceptors</emphasis> decouple technical concerns from business logic, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>decorators</emphasis> allow business concerns to be compartmentalized."
msgstr ""

#. Tag: para
#, no-c-format
msgid "What&#39;s even more powerful (and comforting) is that CDI provides all these facilities in a <emphasis>typesafe</emphasis> way. CDI never relies on string-based identifiers to determine how collaborating objects fit together. Instead, CDI uses the typing information that is already available in the Java object model, augmented using a new programming pattern, called <emphasis>qualifier annotations</emphasis>, to wire together beans, their dependencies, their interceptors and decorators, and their event consumers. Usage of XML descriptors is minimized to truly deployment-specific information."
msgstr ""

#. Tag: para
#, no-c-format
msgid "But CDI isn&#39;t a restrictive programming model. It doesn&#39;t tell you how you should to structure your application into layers, how you should handle persistence, or what web framework you have to use. You&#39;ll have to decide those kinds of things for yourself."
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI even provides a comprehensive SPI, allowing other kinds of object defined by future Java EE specifications or by third-party frameworks to be cleanly integrated with CDI, take advantage of the CDI services, and interact with any other kind of bean."
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI was influenced by a number of existing Java frameworks, including Seam, Guice and Spring. However, CDI has its own, very distinct, character: more typesafe than Seam, more stateful and less XML-centric than Spring, more web and enterprise-application capable than Guice. But it couldn&#39;t have been any of these without inspiration from the frameworks mentioned and <emphasis>lots</emphasis> of collaboration and hard work by the JSR-299 Expert Group (EG)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Finally, CDI is a <ulink url=\"http://jcp.org\">Java Community Process</ulink> (JCP) standard. Java EE 6 requires that all compliant application servers provide support for JSR-299 (even in the web profile)."
msgstr ""

