# Language zh-TW translations for Weld_-_JSR-299_Reference_Implementation package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Weld_-_JSR-299_Reference_Implementation VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:18\n"
"PO-Revision-Date: 2009-11-11 15:00+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Diving into the Weld examples"
msgstr ""

#. Tag: para
#, no-c-format
msgid "It&#39;s time to pull the covers back and dive into the internals of Weld example applications. Let&#39;s start with the simpler of the two examples, <literal>weld-numberguess</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The numberguess example in depth"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the numberguess application you get 10 attempts to guess a number between 1 and 100. After each attempt, you&#39;re told whether your guess was too high or too low."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The numberguess example is comprised of a number of beans, configuration files and Facelets (JSF) views, packaged as a war module. Let&#39;s start by examining the configuration files."
msgstr ""

#. Tag: para
#, no-c-format
msgid "All the configuration files for this example are located in <literal>WEB-INF/</literal>, which can be found in the <literal>src/main/webapp</literal> directory of the example. First, we have the JSF 2.0 version of <literal>faces-config.xml</literal>. A standardized version of Facelets is the default view handler in JSF 2.0, so there&#39;s really nothing that we have to configure. Thus, the configuration consists of only the root element."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;faces-config version=&#34;2.0&#34;\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd&#34;&#62;\n"
"&#60;/faces-config&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There&#39;s also an empty <literal>beans.xml</literal> file, which tells the container to look for beans in this application and to activate the CDI services."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Finally, there&#39;s the familiar <literal>web.xml</literal>:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;web-app version=&#34;2.5&#34;\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;\n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34;&#62;\n"
"   \n"
"   &#60;display-name&#62;weld-jsf-numberguess-war&#60;/display-name&#62;\n"
"   &#60;description&#62;Weld JSF numberguess example (war)&#60;/description&#62;\n"
"\n"
"   &#60;servlet&#62;\n"
"      &#60;servlet-name&#62;Faces Servlet&#60;/servlet-name&#62;\n"
"      &#60;servlet-class&#62;javax.faces.webapp.FacesServlet&#60;/servlet-class&#62;\n"
"      &#60;load-on-startup&#62;1&#60;/load-on-startup&#62;\n"
"   &#60;/servlet&#62;\n"
"\n"
"   &#60;servlet-mapping&#62;\n"
"      &#60;servlet-name&#62;Faces Servlet&#60;/servlet-name&#62;\n"
"      &#60;url-pattern&#62;*.jsf&#60;/url-pattern&#62;\n"
"   &#60;/servlet-mapping&#62;\n"
"   \n"
"   &#60;context-param&#62;\n"
"      &#60;param-name&#62;javax.faces.DEFAULT_SUFFIX&#60;/param-name&#62;\n"
"      &#60;param-value&#62;.xhtml&#60;/param-value&#62;\n"
"   &#60;/context-param&#62;\n"
"\n"
"   &#60;session-config&#62;\n"
"      &#60;session-timeout&#62;10&#60;/session-timeout&#62;\n"
"   &#60;/session-config&#62;\n"
"\n"
"&#60;/web-app&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Enable and initialize the JSF servlet"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Configure requests for URLs ending in <literal>.jsf</literal> to be handled by JSF"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Tell JSF that we will be giving our JSF views (Facelets templates) an extension of <literal>.xhtml</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Configure a session timeout of 10 minutes"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This demo uses JSF 2 as the view framework, but you can use Weld with any servlet-based web framework, such as JSF 1.2 or Wicket."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let&#39;s take a look at the main JSF view, <literal>src/main/webapp/home.xhtml</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Transitional//EN&#34;\n"
"   &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#34;&#62;\n"
"&#60;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34;\n"
"   xmlns:ui=&#34;http://java.sun.com/jsf/facelets&#34;\n"
"   xmlns:h=&#34;http://java.sun.com/jsf/html&#34;\n"
"   xmlns:f=&#34;http://java.sun.com/jsf/core&#34;&#62;\n"
"\n"
"   &#60;ui:composition template=&#34;/template.xhtml&#34;&#62;\n"
"      &#60;ui:define name=&#34;content&#34;&#62;\n"
"         &#60;h1&#62;Guess a number...&#60;/h1&#62;\n"
"         &#60;h:form id=&#34;numberGuess&#34;&#62;\n"
"            &#60;div style=&#34;color: red&#34;&#62;\n"
"               &#60;h:messages id=&#34;messages&#34; globalOnly=&#34;false&#34;/&#62;\n"
"               &#60;h:outputText id=&#34;Higher&#34; value=&#34;Higher!&#34;\n"
"                  rendered=&#34;#{game.number gt game.guess and game.guess ne 0}&#34;/&#62;\n"
"               &#60;h:outputText id=&#34;Lower&#34; value=&#34;Lower!&#34;\n"
"                  rendered=&#34;#{game.number lt game.guess and game.guess ne 0}&#34;/&#62;\n"
"            &#60;/div&#62;\n"
"    \n"
"            &#60;div&#62;\n"
"               I&#39;m thinking of a number between #{game.smallest} and #{game.biggest}.\n"
"               You have #{game.remainingGuesses} guesses remaining.\n"
"            &#60;/div&#62;\n"
"       \n"
"            &#60;div&#62;\n"
"               Your guess: \n"
"               &#60;h:inputText id=&#34;inputGuess&#34; value=&#34;#{game.guess}&#34;\n"
"                  size=&#34;3&#34; required=&#34;true&#34; disabled=&#34;#{game.number eq game.guess}&#34;\n"
"                  validator=&#34;#{game.validateNumberRange}&#34;/&#62;\n"
"               &#60;h:commandButton id=&#34;guessButton&#34; value=&#34;Guess&#34; \n"
"                  action=&#34;#{game.check}&#34; disabled=&#34;#{game.number eq game.guess}&#34;/&#62;\n"
"            &#60;/div&#62;\n"
"            &#60;div&#62;\n"
"              &#60;h:commandButton id=&#34;restartButton&#34; value=&#34;Reset&#34; action=&#34;#{game.reset}&#34; immediate=&#34;true&#34;/&#62;\n"
"            &#60;/div&#62;\n"
"         &#60;/h:form&#62;\n"
"      &#60;/ui:define&#62;\n"
"   &#60;/ui:composition&#62;\n"
"&#60;/html&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Facelets is the built-in templating language for JSF. Here we are wrapping our page in a template which defines the layout."
msgstr ""

#. Tag: para
#, no-c-format
msgid "There are a number of messages which can be sent to the user, &#34;Higher!&#34;, &#34;Lower!&#34; and &#34;Correct!&#34;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "As the user guesses, the range of numbers they can guess gets smaller - this sentence changes to make sure they know the number range of a valid guess."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This input field is bound to a bean property using a value expression."
msgstr ""

#. Tag: para
#, no-c-format
msgid "A validator binding is used to make sure the user doesn&#39;t accidentally input a number outside of the range in which they can guess - if the validator wasn&#39;t here, the user might use up a guess on an out of bounds number."
msgstr ""

#. Tag: para
#, no-c-format
msgid "And, of course, there must be a way for the user to send their guess to the server. Here we bind to an action method on the bean."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The example exists of 4 classes, the first two of which are qualifiers. First, there is the <literal>@Random</literal> qualifier, used for injecting a random number:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Qualifier\n"
"@Target( { TYPE, METHOD, PARAMETER, FIELD })\n"
"@Retention(RUNTIME)\n"
"public @interface Random {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There is also the <literal>@MaxNumber</literal> qualifier, used for injecting the maximum number that can be injected:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Qualifier\n"
"@Target( { TYPE, METHOD, PARAMETER, FIELD })\n"
"@Retention(RUNTIME)\n"
"public @interface MaxNumber {}\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The application-scoped <literal>Generator</literal> class is responsible for creating the random number, via a producer method. It also exposes the maximum possible number via a producer method:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@ApplicationScoped\n"
"public class Generator implements Serializable {\n"
"\n"
"   private java.util.Random random = new java.util.Random(System.currentTimeMillis());\n"
"   \n"
"   private int maxNumber = 100;\n"
"   \n"
"   java.util.Random getRandom() {\n"
"      return random;\n"
"   }\n"
"   \n"
"   @Produces @Random int next() { \n"
"      return getRandom().nextInt(maxNumber); \n"
"   }\n"
"   \n"
"   @Produces @MaxNumber int getMaxNumber() {\n"
"      return maxNumber;\n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>Generator</literal> is application scoped, so we don&#39;t get a different random each time."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The package declaration and imports have been excluded from these listings. The complete listing is available in the example source code."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The final bean in the application is the session-scoped <literal>Game</literal> class. This is the primary entry point of the application. It&#39;s responsible for setting up or resetting the game, capturing and validating the user&#39;s guess and providing feedback to the user with a <literal>FacesMessage</literal>. We&#39;ve used the post-construct lifecycle method to initialize the game by retrieving a random number from the <literal>@Random Instance&#60;Integer&#62;</literal> bean."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You&#39;ll notice that we&#39;ve also added the <literal>@Named</literal> annotation to this class. This annotation is only required when you want to make the bean accessible to a JSF view via EL (i.e., #{game})."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Named\n"
"@SessionScoped\n"
"public class Game implements Serializable {\n"
"\n"
"   private int number;\n"
"   private int guess;\n"
"   private int smallest;\n"
"   private int biggest;\n"
"   private int remainingGuesses;\n"
"\n"
"   @Inject @MaxNumber private int maxNumber;\n"
"   @Inject @Random Instance&#60;Integer&#62; randomNumber;\n"
"   \n"
"   public Game() {}\n"
"   \n"
"   public void check() {\n"
"      if (guess &#62; number) {\n"
"         biggest = guess - 1;\n"
"      }\n"
"      else if (guess &#60; number) {\n"
"         smallest = guess + 1;\n"
"      }\n"
"      else if (guess == number) {\n"
"         FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(&#34;Correct!&#34;));\n"
"      }\n"
"      remainingGuesses--;\n"
"   }\n"
"   \n"
"   @PostConstruct\n"
"   public void reset() {\n"
"      this.smallest = 0;\n"
"      this.guess = 0;\n"
"      this.remainingGuesses = 10;\n"
"      this.biggest = maxNumber;\n"
"      this.number = randomNumber.get();\n"
"   }\n"
"   \n"
"   public void validateNumberRange(FacesContext context,  UIComponent toValidate, Object value) {\n"
"      if (remainingGuesses &#60;= 0) {\n"
"         FacesMessage message = new FacesMessage(&#34;No guesses left!&#34;);\n"
"         context.addMessage(toValidate.getClientId(context), message);\n"
"         ((UIInput) toValidate).setValid(false);\n"
"         return;\n"
"      }\n"
"      int input = (Integer) value;\n"
"\n"
"      if (input &#60; smallest || input &#62; biggest) {\n"
"         ((UIInput) toValidate).setValid(false);\n"
"\n"
"         FacesMessage message = new FacesMessage(&#34;Invalid guess&#34;);\n"
"         context.addMessage(toValidate.getClientId(context), message);\n"
"      }\n"
"   }\n"
"\n"
"   public int getNumber() {\n"
"      return number;\n"
"   }\n"
"   \n"
"   public int getGuess() {\n"
"      return guess;\n"
"   }\n"
"   \n"
"   public void setGuess(int guess) {\n"
"      this.guess = guess;\n"
"   }\n"
"   \n"
"   public int getSmallest() {\n"
"      return smallest;\n"
"   }\n"
"   \n"
"   public int getBiggest() {\n"
"      return biggest;\n"
"   }\n"
"   \n"
"   public int getRemainingGuesses() {\n"
"      return remainingGuesses;\n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "The numberguess example in Apache Tomcat or Jetty"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A couple of modifications must be made to the numberguess artifact in order to deploy it to Tomcat or Jetty. First, Weld must be deployed as a Web Application library under <literal>WEB-INF/lib</literal> since the servlet container does not provide the CDI services. For your convenience we provide a single jar suitable for running Weld in any servlet container (including Jetty), <literal>weld-servlet.jar</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You must also include the jars for JSF, EL, and the common annotations (<literal>jsr250-api.jar</literal>), all of which are provided by the Java EE platform (a Java EE application server). Are you starting to appreciate why a Java EE platform is worth using?"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Second, we need to explicitly specify the servlet listener in <literal>web.xml</literal>, again because the container isn&#39;t doing this stuff for you. The servlet listener boots Weld and controls it&#39;s interaction with requests."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;listener&#62;\n"
"   &#60;listener-class&#62;org.jboss.weld.environment.servlet.Listener&#60;/listener-class&#62;\n"
"&#60;/listener&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When Weld boots, it places the <literal>javax.enterprise.inject.spi.BeanManager</literal>, the portable SPI for obtaining bean instances, in the ServletContext under a variable name equal to the fully-qualified interface name. You generally don&#39;t need to access this interface, but Weld makes use of it."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The numberguess example for Java SE with Swing"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This example shows how to use the Weld SE extension to in a Java SE based Swing application with no EJB or servlet dependencies. This example can be found in the <literal>examples/se/numberguess</literal> folder of the Weld distribution."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Creating the Eclipse project"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To use the Weld SE numberguess example in Eclipse, you can open the example natively using the <ulink url=\"http://m2eclipse.sonatype.org/\">m2eclipse plugin</ulink> ."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you have m2eclipse installed, you can open any Maven project directly. From within Eclipse, select <emphasis>File -&#62; Import... -&#62; Maven Projects</emphasis> . Then, browse to the location of the Weld SE numberguess example. You should see that Eclipse recognizes the existence of a Maven project."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This will create a project in your workspace called <literal>weld-se-numberguess</literal> ."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you are not using the m2eclipse plugin, you have to follow different steps to import the project. First, switch into the Weld SE numberguess example, then execute the Maven Eclipse plugin with the jetty profile activated, as follows:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "It&#39;s time to get the example running!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Running the example from Eclipse"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Disable m2eclipse&#39;s <emphasis>Workspace Resolution</emphasis>, to make sure that Eclipse can find <literal>StartMain</literal>. Right click on the project, and choose <emphasis>Properties -&#62; Maven</emphasis>, and uncheck <emphasis>Resolve dependencies from Workspace projects</emphasis>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Right click on the project, and choose <emphasis>Run As -&#62; Run As Application</emphasis>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Locate the <literal>StartMain</literal> class:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The application should now launch!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Running the example from the command line"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Ensure that Maven 3 is installed and in your PATH"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Ensure that the <literal>JAVA_HOME</literal> environment variable is pointing to your JDK installation"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Open a command line or terminal window in the <literal>examples/se/numberguess</literal> directory"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Execute the following command"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "mvn -Drun"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Understanding the code"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let&#39;s have a look at the significant code and configuration files that make up this example."
msgstr ""

#. Tag: para
#, no-c-format
msgid "As usual, there is an empty <literal>beans.xml</literal> file in the root package (<literal>src/main/resources/beans.xml</literal>), which marks this application as a CDI application."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The game&#39;s main logic is located in <literal>Game.java</literal>. Here is the code for that class, highlighting the ways in which this differs from the web application version:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@ApplicationScoped\n"
"public class Game\n"
"{\n"
"\n"
"   public static final int MAX_NUM_GUESSES = 10;\n"
"\n"
"   private Integer number;\n"
"   private int guess = 0;\n"
"   private int smallest = 0;\n"
"\n"
"   @Inject\n"
"   @MaxNumber\n"
"   private int maxNumber;\n"
"\n"
"   private int biggest;\n"
"   private int remainingGuesses = MAX_NUM_GUESSES;\n"
"   private boolean validNumberRange = true;\n"
"\n"
"   @Inject\n"
"   Generator rndGenerator;\n"
"\n"
"   public Game()\n"
"   {\n"
"   }\n"
"\n"
"   ...\n"
"\n"
"   public boolean isValidNumberRange()\n"
"   {\n"
"      return validNumberRange;\n"
"   }\n"
"\n"
"   public boolean isGameWon()\n"
"   {\n"
"      return guess == number;\n"
"   }\n"
"\n"
"   public boolean isGameLost()\n"
"   {\n"
"      return guess != number &amp;&amp; remainingGuesses &#60;= 0;\n"
"   }\n"
"\n"
"   public boolean check()\n"
"   {\n"
"      boolean result = false;\n"
"\n"
"      if (checkNewNumberRangeIsValid())\n"
"      {\n"
"         if (guess &#62; number)\n"
"         {\n"
"            biggest = guess - 1;\n"
"         }\n"
"\n"
"         if (guess &#60; number)\n"
"         {\n"
"            smallest = guess + 1;\n"
"         }\n"
"\n"
"         if (guess == number)\n"
"         {\n"
"            result = true;\n"
"         }\n"
"\n"
"         remainingGuesses--;\n"
"      }\n"
"\n"
"      return result;\n"
"   }\n"
"\n"
"   private boolean checkNewNumberRangeIsValid()\n"
"   {\n"
"      return validNumberRange = ((guess &#62;= smallest) &amp;&amp; (guess &#60;= biggest));\n"
"   }\n"
"\n"
"   @PostConstruct\n"
"   public void reset()\n"
"   {\n"
"      this.smallest = 0;\n"
"      this.guess = 0;\n"
"      this.remainingGuesses = 10;\n"
"      this.biggest = maxNumber;\n"
"      this.number = rndGenerator.next();\n"
"   }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The bean is application scoped rather than session scoped, since an instance of a Swing application typically represents a single &#39;session&#39;."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Notice that the bean is not named, since it doesn&#39;t need to be accessed via EL."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In Java SE there is no JSF <literal>FacesContext</literal> to which messages can be added. Instead the <literal>Game</literal> class provides additional information about the state of the current game including:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "If the game has been won or lost"
msgstr ""

#. Tag: para
#, no-c-format
msgid "If the most recent guess was invalid"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This allows the Swing UI to query the state of the game, which it does indirectly via a class called <literal>MessageGenerator</literal>, in order to determine the appropriate messages to display to the user during the game."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Since there is no dedicated validation phase, validation of user input is performed during the <literal>check()</literal> method."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>reset()</literal> method makes a call to the injected <literal>rndGenerator</literal> in order to get the random number at the start of each game. Note that it can&#39;t use <literal>Instance.get()</literal> like the JSF example does because there will not be any active contexts like there are during a JSF request."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>MessageGenerator</literal> class depends on the current instance of <literal>Game</literal> and queries its state in order to determine the appropriate messages to provide as the prompt for the user&#39;s next guess and the response to the previous guess. The code for <literal>MessageGenerator</literal> is as follows:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class MessageGenerator\n"
"{\n"
"   @Inject\n"
"   private Game game;\n"
"\n"
"   public String getChallengeMessage()\n"
"   {\n"
"      StringBuilder challengeMsg = new StringBuilder(&#34;I&#39;m thinking of a number between &#34;);\n"
"      challengeMsg.append(game.getSmallest());\n"
"      challengeMsg.append(&#34; and &#34;);\n"
"      challengeMsg.append(game.getBiggest());\n"
"      challengeMsg.append(&#34;. Can you guess what it is?&#34;);\n"
"\n"
"      return challengeMsg.toString();\n"
"   }\n"
"\n"
"   public String getResultMessage()\n"
"   {\n"
"      if (game.isGameWon())\n"
"      {\n"
"         return &#34;You guessed it! The number was &#34; + game.getNumber();\n"
"      }\n"
"      else if (game.isGameLost())\n"
"      {\n"
"         return &#34;You are fail! The number was &#34; + game.getNumber();\n"
"      }\n"
"      else if (!game.isValidNumberRange())\n"
"      {\n"
"         return &#34;Invalid number range!&#34;;\n"
"      }\n"
"      else if (game.getRemainingGuesses() == Game.MAX_NUM_GUESSES)\n"
"      {\n"
"         return &#34;What is your first guess?&#34;;\n"
"      }\n"
"      else\n"
"      {\n"
"         String direction = null;\n"
"\n"
"         if (game.getGuess() &#60; game.getNumber())\n"
"         {\n"
"            direction = &#34;Higher&#34;;\n"
"         }\n"
"         else\n"
"         {\n"
"            direction = &#34;Lower&#34;;\n"
"         }\n"
"\n"
"         return direction + &#34;! You have &#34; + game.getRemainingGuesses() + &#34; guesses left.&#34;;\n"
"      }\n"
"   }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The instance of <literal>Game</literal> for the application is injected here."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>Game</literal>&#39;s state is interrogated to determine the appropriate challenge message ..."
msgstr ""

#. Tag: para
#, no-c-format
msgid "... and again to determine whether to congratulate, console or encourage the user to continue."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Finally we come to the <literal>NumberGuessFrame</literal> class which provides the Swing front end to our guessing game."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class NumberGuessFrame extends javax.swing.JFrame\n"
"{\n"
"   @Inject\n"
"   private Game game;\n"
"\n"
"   @Inject\n"
"   private MessageGenerator msgGenerator;\n"
"\n"
"   public void start(@Observes ContainerInitialized event)\n"
"   {\n"
"      java.awt.EventQueue.invokeLater(new Runnable()\n"
"      {\n"
"         public void run()\n"
"         {\n"
"            initComponents();\n"
"            setVisible(true);\n"
"         }\n"
"      });\n"
"   }\n"
"\n"
"   private void initComponents()\n"
"   {\n"
"\n"
"      buttonPanel = new javax.swing.JPanel();\n"
"      mainMsgPanel = new javax.swing.JPanel();\n"
"      mainLabel = new javax.swing.JLabel();\n"
"      messageLabel = new javax.swing.JLabel();\n"
"      guessText = new javax.swing.JTextField();\n"
"      ...\n"
"      mainLabel.setText(msgGenerator.getChallengeMessage());\n"
"      mainMsgPanel.add(mainLabel);\n"
"\n"
"      messageLabel.setText(msgGenerator.getResultMessage());\n"
"      mainMsgPanel.add(messageLabel);\n"
"      ...\n"
"   }\n"
"\n"
"   private void guessButtonActionPerformed( java.awt.event.ActionEvent evt )\n"
"   {\n"
"      int guess =  Integer.parseInt(guessText.getText());\n"
"      game.setGuess( guess );\n"
"      game.check();\n"
"      refreshUI();\n"
"   }\n"
"\n"
"   private void replayBtnActionPerformed(java.awt.event.ActionEvent evt)\n"
"   {\n"
"      game.reset();\n"
"      refreshUI();\n"
"   }\n"
"\n"
"   private void refreshUI() {\n"
"      mainLabel.setText( msgGenerator.getChallengeMessage() );\n"
"      messageLabel.setText( msgGenerator.getResultMessage() );\n"
"      guessText.setText( &#34;&#34; );\n"
"      guessesLeftBar.setValue( game.getRemainingGuesses() );\n"
"      guessText.requestFocus();\n"
"   }\n"
"\n"
"   // swing components\n"
"   private javax.swing.JPanel borderPanel;\n"
"   ...\n"
"   private javax.swing.JButton replayBtn;\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The injected instance of the game (logic and state)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The injected message generator for UI messages."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This application is started in the prescribed Weld SE way, by observing the <literal>ContainerInitialized</literal> event."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This method initializes all of the Swing components. Note the use of the <literal>msgGenerator</literal> here."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>guessButtonActionPerformed</literal> is called when the &#39;Guess&#39; button is clicked, and it does the following:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Gets the guess entered by the user and sets it as the current guess in the <literal>Game</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Calls <literal>game.check()</literal> to validate and perform one &#39;turn&#39; of the game"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Calls <literal>refreshUI</literal>. If there were validation errors with the input, this will have been captured during <literal>game.check()</literal> and as such will be reflected in the messages returned by <literal>MessageGenerator</literal> and subsequently presented to the user. If there are no validation errors then the user will be told to guess again (higher or lower) or that the game has ended either in a win (correct guess) or a loss (ran out of guesses)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>replayBtnActionPerformed</literal> simply calls <literal>game.reset()</literal> to start a new game and refreshes the messages in the UI."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The translator example in depth"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The translator example will take any sentences you enter, and translate them to Latin. (Well, not really, but the stub is there for you to implement, at least. Good luck!)"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The translator example is built as an ear and contains EJBs. As a result, it&#39;s structure is more complex than the numberguess example."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Java EE 6, which bundles EJB 3.1, allows you to package EJBs in a war, which will make this structure much simpler! Still, there are other advantages of using an ear."
msgstr ""

#. Tag: para
#, no-c-format
msgid "First, let&#39;s take a look at the ear aggregator, which is located in the example&#39;s <literal>ear</literal> directory. Maven automatically generates the <literal>application.xml</literal> for us from this plugin configuration:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;plugin&#62;\n"
"   &#60;groupId&#62;org.apache.maven.plugins&#60;/groupId&#62;\n"
"   &#60;artifactId&#62;maven-ear-plugin&#60;/artifactId&#62;\n"
"   &#60;configuration&#62;\n"
"      &#60;modules&#62;\n"
"         &#60;webModule&#62;\n"
"            &#60;groupId&#62;org.jboss.weld.examples.jsf.translator&#60;/groupId&#62;\n"
"            &#60;artifactId&#62;weld-jsf-translator-war&#60;/artifactId&#62;\n"
"            &#60;contextRoot&#62;/weld-translator&#60;/contextRoot&#62;\n"
"         &#60;/webModule&#62;\n"
"      &#60;/modules&#62;\n"
"   &#60;/configuration&#62;\n"
"&#60;/plugin&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This configuration overrides the web context path, resulting in this application URL: <ulink url=\"http://localhost:8080/weld-translator\">http://localhost:8080/weld-translator</ulink>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you weren&#39;t using Maven to generate these files, you would need <literal>META-INF/application.xml</literal>:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;application version=&#34;5&#34;\n"
"   xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34; \n"
"   xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;\n"
"   xsi:schemaLocation=&#34;\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/application_5.xsd&#34;&#62;\n"
"\n"
"  &#60;display-name&#62;weld-jsf-translator-ear&#60;/display-name&#62;\n"
"  &#60;description&#62;The Weld JSF translator example (ear)&#60;/description&#62;\n"
"  \n"
"  &#60;module&#62;\n"
"    &#60;web&#62;\n"
"      &#60;web-uri&#62;weld-translator.war&#60;/web-uri&#62;\n"
"      &#60;context-root&#62;/weld-translator&#60;/context-root&#62;\n"
"    &#60;/web&#62;\n"
"  &#60;/module&#62;\n"
"  &#60;module&#62;\n"
"    &#60;ejb&#62;weld-translator.jar&#60;/ejb&#62;\n"
"  &#60;/module&#62;\n"
"&#60;/application&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Next, lets look at the war, which is located in the example&#39;s <literal>war</literal> directory. Just as in the numberguess example, we have a <literal>faces-config.xml</literal> for JSF 2.0 and a <literal>web.xml</literal> (to activate JSF) under WEB-INF, both sourced from <literal>src/main/webapp/WEB-INF</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "More interesting is the JSF view used to translate text. Just as in the numberguess example we have a template, which surrounds the form (ommitted here for brevity):"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&#60;h:form id=&#34;translator&#34;&#62;\n"
"\n"
"   &#60;table&#62;\n"
"      &#60;tr align=&#34;center&#34; style=&#34;font-weight: bold&#34;&#62;\n"
"         &#60;td&#62;\n"
"            Your text\n"
"         &#60;/td&#62;\n"
"         &#60;td&#62;\n"
"            Translation\n"
"         &#60;/td&#62;\n"
"      &#60;/tr&#62;\n"
"      &#60;tr&#62;\n"
"         &#60;td&#62;\n"
"            &#60;h:inputTextarea id=&#34;text&#34; value=&#34;#{translator.text}&#34; required=&#34;true&#34; rows=&#34;5&#34; cols=&#34;80&#34;/&#62;\n"
"         &#60;/td&#62;\n"
"         &#60;td&#62;\n"
"            &#60;h:outputText value=&#34;#{translator.translatedText}&#34;/&#62;\n"
"         &#60;/td&#62;\n"
"      &#60;/tr&#62;\n"
"   &#60;/table&#62;\n"
"   &#60;div&#62;\n"
"      &#60;h:commandButton id=&#34;button&#34; value=&#34;Translate&#34; action=&#34;#{translator.translate}&#34;/&#62;\n"
"   &#60;/div&#62;\n"
"   \n"
"&#60;/h:form&#62;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The user can enter some text in the left-hand textarea, and hit the translate button to see the result to the right."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Finally, let&#39;s look at the EJB module, which is located in the example&#39;s <literal>ejb</literal> directory. In <literal>src/main/resources/META-INF</literal> there is just an empty <literal>beans.xml</literal>, used to mark the archive as containing beans."
msgstr ""

#. Tag: para
#, no-c-format
msgid "We&#39;ve saved the most interesting bit to last, the code! The project has two simple beans, <literal>SentenceParser</literal> and <literal>TextTranslator</literal> and two session beans, <literal>TranslatorControllerBean</literal> and <literal>SentenceTranslator</literal>. You should be getting quite familiar with what a bean looks like by now, so we&#39;ll just highlight the most interesting bits here."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Both <literal>SentenceParser</literal> and <literal>TextTranslator</literal> are dependent beans, and <literal>TextTranslator</literal> uses constructor injection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class TextTranslator implements Serializable { \n"
"\n"
"   private SentenceParser sentenceParser; \n"
"\n"
"   @EJB private Translator translator; \n"
"   \n"
"   @Inject public TextTranslator(SentenceParser sentenceParser) { \n"
"      this.sentenceParser = sentenceParser; \n"
"   }\n"
"   \n"
"   public String translate(String text) { \n"
"      StringBuilder sb = new StringBuilder(); \n"
"      for (String sentence: sentenceParser.parse(text)) { \n"
"         sb.append(translator.translate(sentence)).append(&#34;. &#34;); \n"
"      } \n"
"      return sb.toString().trim(); \n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>TextTranslator</literal> uses the simple bean (really just a plain Java class!) <literal>SentenceParser</literal> to parse the sentence and then calls on the stateless bean with the local business interface <literal>Translator</literal> to perform the translation. That&#39;s where the magic happens. Of course, we couldn&#39;t develop a full translator, but it&#39;s convincing enough to anyone who doesn&#39;t understand Latin!"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Stateless\n"
"public class SentenceTranslator implements Translator { \n"
"\n"
"   public String translate(String sentence) { \n"
"      return &#34;Lorem ipsum dolor sit amet&#34;; \n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Finally, there is UI orientated controller. This is a request scoped, named, stateful session bean, which injects the translator. It collects the text from the user and dispatches it to the translator. The bean also has getters and setters for all the fields on the page."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Stateful\n"
"@RequestScoped\n"
"@Named(&#34;translator&#34;)\n"
"public class TranslatorControllerBean implements TranslatorController {\n"
"\n"
"   @Inject private TextTranslator translator;\n"
"   \n"
"   private String inputText;\n"
"   \n"
"   private String translatedText;\n"
"   \n"
"   public void translate() {\n"
"      translatedText = translator.translate(inputText);\n"
"   }\n"
"   \n"
"   public String getText() {\n"
"      return inputText;\n"
"   }\n"
"   \n"
"   public void setText(String text) {\n"
"      this.inputText = text;\n"
"   }\n"
"   \n"
"   public String getTranslatedText() {\n"
"      return translatedText;\n"
"   }\n"
"   \n"
"   @Remove public void remove() {}\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "That concludes our short tour of the Weld starter examples. For more information on Weld, please visit <ulink url=\"http://www.seamframework.org/Weld\">http://www.seamframework.org/Weld</ulink>."
msgstr ""
