# translation of part3.po to Traditional Chinese
# Language zh-TW translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Terry Chuang <tchuang@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: part3\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-12-14T13:35:17\n"
"PO-Revision-Date: 2009-01-14 16:07+1000\n"
"Last-Translator: Terry Chuang <tchuang@redhat.com>\n"
"Language-Team: Traditional Chinese <zh@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: para
#, no-c-format
msgid "The first major theme of CDI is <emphasis>loose coupling</emphasis>. We&#39;ve already seen three means of achieving loose coupling:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>alternatives</emphasis> enable deployment time polymorphism,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>producer methods</emphasis> enable runtime polymorphism, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>contextual lifecycle management</emphasis> decouples bean lifecycles."
msgstr ""

#. Tag: para
#, no-c-format
msgid "These techniques serve to enable loose coupling of client and server. The client is no longer tightly bound to an implementation of an interface, nor is it required to manage the lifecycle of the implementation. This approach lets <emphasis>stateful objects interact as if they were services</emphasis>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Loose coupling makes a system more <emphasis>dynamic</emphasis>. The system can respond to change in a well-defined manner. In the past, frameworks that attempted to provide the facilities listed above invariably did it by sacrificing type safety (most notably by using XML descriptors). CDI is the first technology, and certainly the first specification in the Java EE platform, that achieves this level of loose coupling in a typesafe way."
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI provides three extra important facilities that further the goal of loose coupling:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>interceptors</emphasis> decouple technical concerns from business logic,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>decorators</emphasis> may be used to decouple some business concerns, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>event notifications</emphasis> decouple event producers from event consumers."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "The second major theme of CDI is <emphasis>strong typing</emphasis>. The information about the dependencies, interceptors and decorators of a bean, and the information about event consumers for an event producer, is contained in typesafe Java constructs that may be validated by the compiler."
msgstr "Web Bean 的第二個重點就是 <emphasis>strong typing（強類型）</emphasis>。有關於 Web Bean 的相依性、攔截器與裝飾器的相關資訊，以及有關於某個事件產生器的事件用戶的相關資訊都包含在編譯器可驗證的 typesafe Java 架構中。"

#. Tag: para
#, fuzzy, no-c-format
msgid "You don&#39;t see string-based identifiers in CDI code, not because the framework is hiding them from you using clever defaulting rules—so-called &#34;configuration by convention&#34;—but because there are simply no strings there to begin with!"
msgstr "您在 Web Bean 的程式碼中不會看見基於字串的識別符號，這不是因為 framework 透過使用預設的規則來將它隱藏起來 &#151; 又稱為「configuration by convention」 &#151; 而是因為一開始根本就沒有任何字串！"

#. Tag: para
#, no-c-format
msgid "The obvious benefit of this approach is that <emphasis>any</emphasis> IDE can provide autocompletion, validation and refactoring without the need for special tooling. But there is a second, less-immediately-obvious, benefit. It turns out that when you start thinking of identifying objects, events or interceptors via annotations instead of names, you have an opportunity to lift the semantic level of your code."
msgstr "這個作法明顯的好處就是<emphasis>任何</emphasis> IDE 都可在不使用特殊工具的情況下提供自動完成（autocompletion）、驗證（validation）和重整（refactoring）。還有一個較沒那麼明顯且直接的好處。當您希望透過標記來識別物件、事件或是攔截器而不是透過名稱時，您可提昇您程式碼的語意層級（semantic level）。"

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI encourages you develop annotations that model concepts, for example,"
msgstr "Web Bean 鼓勵您使用塑造概念的標記，例如"

#. Tag: para
#, no-c-format
msgid "<literal>@Asynchronous</literal>,"
msgstr "<literal>@Asynchronous</literal>、"

#. Tag: para
#, no-c-format
msgid "<literal>@Mock</literal>,"
msgstr "<literal>@Mock</literal>、"

#. Tag: para
#, no-c-format
msgid "<literal>@Secure</literal> or"
msgstr "<literal>@Secure</literal> 或"

#. Tag: para
#, no-c-format
msgid "<literal>@Updated</literal>,"
msgstr "<literal>@Updated</literal>、"

#. Tag: para
#, no-c-format
msgid "instead of using compound names like"
msgstr "而不是使用像是"

#. Tag: para
#, no-c-format
msgid "<literal>asyncPaymentProcessor</literal>,"
msgstr "<literal>asyncPaymentProcessor</literal>、"

#. Tag: para
#, no-c-format
msgid "<literal>mockPaymentProcessor</literal>,"
msgstr "<literal>mockPaymentProcessor</literal>、"

#. Tag: para
#, no-c-format
msgid "<literal>SecurityInterceptor</literal> or"
msgstr "<literal>SecurityInterceptor</literal> 或是"

#. Tag: para
#, no-c-format
msgid "<literal>DocumentUpdatedEvent</literal>."
msgstr "<literal>DocumentUpdatedEvent</literal> 的複合式名稱。"

#. Tag: para
#, no-c-format
msgid "The annotations are reusable. They help describe common qualities of disparate parts of the system. They help us categorize and understand our code. They help us deal with common concerns in a common way. They make our code more literate and more understandable."
msgstr "這些標記可重複使用。它們協助描述系統不同部份的通用要點（common qualities）。它們協助我們分類和理解我們的程式碼。它們協助我們利用通用的方式來處理一般的問題。它們讓我們的程式碼變得更文字化且更容易理解。"

#. Tag: para
#, fuzzy, no-c-format
msgid "CDI <emphasis>stereotypes</emphasis> take this idea a step further. A stereotype models a common <emphasis>role</emphasis> in your application architecture. It encapsulates various properties of the role, including scope, interceptor bindings, qualifiers, etc, into a single reusable package. (Of course, there is also the benefit of tucking some of those annotations away)."
msgstr "Web Bean <emphasis>stereotype</emphasis> 將這個概念帶領到了另一個更為進階的領域。固定刻板模式（stereotype model）是您應用程式架構中的一個通用<emphasis>角色（role）</emphasis>。它將該角色的各種屬性（包括 scope、攔截器綁定〔interceptor binding〕，建置類型〔deployment type〕等等）壓縮進了一個單獨、可重複使用的套件中。"

#. Tag: para
#, fuzzy, no-c-format
msgid "We&#39;re now ready to meet some more advanced features of CDI. Bear in mind that these features exist to make our code both easier to validate and more understandable. Most of the time you don&#39;t ever really <emphasis>need</emphasis> to use these features, but if you use them wisely, you&#39;ll come to appreciate their power."
msgstr "我們現在已準備好談到一些更為進階的 Web Bean 功能。請記得，這些功能是為了使我們的程式碼變得易於驗證和較容易理解。實際上大部分的時候您都不會真的<emphasis>需要</emphasis>使用到這些功能，不過若您可有效地利用這些功能的話，您將可體會到這些功能的強大。"

#~ msgid "Even Web Beans XML metadata is strongly typed! There's no compiler for XML, so Web Beans takes advantage of XML schemas to validate the Java types and attributes that appear in XML. This approach turns out to make the XML more literate, just like annotations made our Java code more literate."
#~ msgstr "就連 Web Bean XML 的 metadata 也屬於強類型！XML 沒有編譯器，因此 Web Bean 利用了 XML schema 來驗證出現在 XML 中的 Java 類型和屬性。這個方法使得 XML 變得更文字化，就和標記使得我們的 Java 程式碼變得更容易理解一樣。"
